{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst DataTypes = require(\"../../data-types\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mariadb\");\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n    const complete = this._logQuery(sql, debug, parameters);\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n    let results;\n    const errForStack = new Error();\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n        options.transaction.finished = \"rollback\";\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      if (!this.instance) {\n        if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = {\n              [pkField]: startId + i\n            };\n          }\n          return [result, data.affectedRows];\n        }\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith(\"enum\") ? _result.Type.replace(/^enum/i, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    return result;\n  }\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        rows = rows.map(row => {\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === \"string\" && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2] : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n          const errors = [];\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: err.errno === ER_ROW_IS_REFERENCED ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === \"PRIMARY\",\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n    });\n    return result;\n  }\n}\nmodule.exports = Query;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,gBAAgBC,QAAQ;AAC9B,MAAMC,kBAAkBD,QAAQ;AAChC,MAAME,IAAIF,QAAQ;AAClB,MAAMG,YAAYH,QAAQ;AAC1B,MAAM;EAAEI;AAAA,IAAWJ,QAAQ;AAE3B,MAAMK,eAAe;AACrB,MAAMC,cAAc;AACpB,MAAMC,uBAAuB;AAC7B,MAAMC,uBAAuB;AAE7B,MAAMC,QAAQL,OAAOM,aAAa;AAElC,oBAAoBX,cAAc;EAChCY,YAAYC,YAAYC,WAAWC,SAAS;IAC1C,MAAMF,YAAYC,WAAWE;MAAEC,cAAc;IAAA,GAAUF;EAAA;EAAA,OAGlDG,qBAAqBC,KAAKC,QAAQC,SAAS;IAChD,MAAMC,YAAY;IAClB,MAAMC,kBAAkB,CAACC,OAAOC,KAAKC,YAAY;MAC/C,IAAIA,QAAQD,SAAS,QAAW;QAC9BH,UAAUK,KAAKD,QAAQD;QACvB,OAAO;MAAA;MAET,OAAO;IAAA;IAETN,MAAMnB,cAAckB,qBAAqBC,KAAKC,QAAQC,SAASE,iBAAiB;IAChF,OAAO,CAACJ,KAAKG,UAAUM,SAAS,IAAIN,YAAY;EAAA;EAAA,MAG5CO,IAAIV,KAAKW,YAAY;IACzB,KAAKX,MAAMA;IACX,MAAM;MAAEN;MAAYE;IAAA,IAAY;IAEhC,MAAME,eAAe,KAAKH,UAAUC,QAAQE,gBAAgBF,QAAQE;IAEpE,MAAMc,WAAW,KAAKC,UAAUb,KAAKT,OAAOoB;IAE5C,IAAIA,YAAY;MACdpB,MAAM,kBAAkBoB;IAAA;IAG1B,IAAIG;IACJ,MAAMC,cAAc,IAAIC;IAExB,IAAI;MACFF,UAAU,MAAMpB,WAAWuB,MAAM,KAAKjB,KAAKW;IAAA,SACpCO,OAAP;MACA,IAAItB,QAAQuB,eAAeD,MAAME,UAAUhC,aAAa;QAGtD,IAAI;UACF,MAAMQ,QAAQuB,YAAYE;QAAA,SACnBC,QAAP;QAKF1B,QAAQuB,YAAYI,WAAW;MAAA;MAGjCL,MAAMlB,MAAMA;MACZkB,MAAMP,aAAaA;MACnB,MAAM,KAAKa,YAAYN,OAAOH,YAAYU;IAAA,UAC1C;MACAb;IAAA;IAGF,IAAId,gBAAgBgB,WAAWA,QAAQY,gBAAgB,GAAG;MACxD,MAAM,KAAKC,YAAYb;IAAA;IAEzB,OAAO,KAAKc,cAAcd;EAAA;EAoB5Bc,cAAcC,MAAM;IAClB,IAAIC,SAAS,KAAKC;IAElB,IAAI,KAAKC,uBAAuB,KAAKC,qBAAqB;MACxD,OAAOJ,KAAKK;IAAA;IAEd,IAAI,KAAKC,iBAAiB;MACxB,OAAO,CAACL,QAAQD,KAAKK,iBAAiB;IAAA;IAExC,IAAI,KAAKE,cAAcP,OAAO;MAC5B,KAAKQ,kBAAkBR;MAEvB,IAAI,CAAC,KAAKE,UAAU;QAElB,IACE,KAAKO,SACF,KAAKA,MAAMC,0BACX,KAAKD,MAAMC,2BAA2B,KAAKD,MAAME,uBACjD,KAAKF,MAAMG,cAAc,KAAKH,MAAME,sBACvC;UAGA,MAAME,UAAUb,KAAK,KAAKc;UAC1Bb,SAAS,IAAIc,MAAMf,KAAKK;UACxB,MAAMW,UAAU,KAAKP,MAAMG,cAAc,KAAKH,MAAME,qBAAqBM;UACzE,SAASC,IAAI,GAAGA,IAAIlB,KAAKK,cAAca,KAAK;YAC1CjB,OAAOiB,KAAK;cAAA,CAAGF,UAAUH,UAAUK;YAAA;UAAA;UAErC,OAAO,CAACjB,QAAQD,KAAKK;QAAA;QAGvB,OAAO,CAACL,KAAK,KAAKc,qBAAqBd,KAAKK;MAAA;IAAA;IAIhD,IAAI,KAAKc,iBAAiB;MACxB,KAAKC,sBAAsBpB;MAE3B,OAAO,KAAKqB,kBAAkBrB;IAAA;IAEhC,IAAI,KAAKO,mBAAmB,KAAKe,iBAAiB;MAChD,OAAO,CAACrB,QAAQD,KAAKK;IAAA;IAEvB,IAAI,KAAKkB,eAAe;MACtB,OAAOvB,KAAK;IAAA;IAEd,IAAI,KAAKwB,cAAc;MACrB,MAAMC,OAAOzB,KAAKyB;MAClB,OAAOzB,KAAKyB;MACZ,OAAO,CAACzB,MAAMyB;IAAA;IAEhB,IAAI,KAAKC,sBAAsB;MAC7B,OAAO,KAAKC,uBAAuB3B;IAAA;IAErC,IAAI,KAAK4B,wBAAwB,KAAKC,0BAA0B;MAC9D,OAAO7B;IAAA;IAET,IAAI,KAAK8B,qBAAqB;MAC5B,OAAO,KAAKC,sBAAsB/B;IAAA;IAEpC,IAAI,KAAKgC,mBAAmB;MAC1B/B,SAAS;MAET,WAAWgC,WAAWjC,MAAM;QAC1BC,OAAOgC,QAAQC,SAAS;UACtBC,MAAMF,QAAQG,KAAKC,cAAcC,WAAW,UAAUL,QAAQG,KAAKG,QAAQ,UACzE,UAAUN,QAAQG,KAAKI;UACzBC,WAAWR,QAAQS,SAAS;UAC5BC,cAAcV,QAAQW;UACtBC,YAAYZ,QAAQa,QAAQ;UAC5BC,eAAeC,OAAOC,UAAUC,eAAeC,KAAKlB,SAAS,YACxDA,QAAQmB,MAAMf,kBAAkB;UACrCgB,SAASpB,QAAQqB,UAAUrB,QAAQqB,UAAU;QAAA;MAAA;MAGjD,OAAOrD;IAAA;IAET,IAAI,KAAKsD,kBAAkB;MACzB,OAAOvD,KAAK,GAAGwD;IAAA;IAGjB,OAAOvD;EAAA;EAGTmB,sBAAsBqC,MAAM;IAC1B,IAAI,CAAC,KAAKhD,SAAS,CAAC,KAAKA,MAAMiD,uBAAuB;MACpD;IAAA;IAEF,WAAWC,UAAUX,OAAOY,KAAK,KAAKnD,MAAMiD,wBAAwB;MAClE,MAAMG,aAAa,KAAKpD,MAAMiD,sBAAsBC;MACpD,IAAIE,WAAW1B,gBAAgB/E,UAAU0G,MAAM;QAE7CL,OAAOA,KAAKM,IAAIC,OAAO;UAGrB,IAAIA,IAAIH,WAAWI,cAAc,OAAOD,IAAIH,WAAWI,eAAe,YAAY,CAAC,KAAKpG,WAAWqG,KAAKC,cAAc,IAAI,GAAG,IAAI;YAC/HH,IAAIH,WAAWI,aAAaH,KAAKM,MAAMJ,IAAIH,WAAWI;UAAA;UAExD,IAAI7G,UAAU0G,KAAKM,OAAO;YACxB,OAAOhH,UAAU0G,KAAKM,MAAMP,YAAY,KAAK/F,UAAUC,SACrDiG,IAAIH,WAAWI;UAAA;UAEnB,OAAOD;QAAA;MAAA;IAAA;EAAA;EAAA,MAMTlE,YAAYb,SAAS;IACzB,MAAMoF,iBAAiB,MAAM,KAAKxF,IAAI;IACtC,MAAMyF,iBAAiB,qBAAqB,KAAKzG,WAAW0G,QAAQ;IACpE,MAAMC,WAAW;IACjB,WAAWC,eAAeJ,gBAAgB;MACxC,IAAII,gBAAgB,UAAa,OAAOA,YAAYC,OAAOC,cAAc,YAAY;QACnF;MAAA;MAEF,WAAWC,kBAAkBH,aAAa;QACxC,IAAIzB,OAAOC,UAAUC,eAAeC,KAAKyB,gBAAgB,YAAY;UACnEJ,SAAS7F,KAAKiG,eAAeC;QAAA,OACxB;UACL,WAAWC,cAAcF,eAAehB,QAAQ;YAC9CY,SAAS7F,KAAK,CAACmG,YAAYF,eAAeE,aAAaC,KAAK;UAAA;QAAA;MAAA;IAAA;IAMpE,KAAKjH,UAAUkH,IAAIV,iBAAiBE,SAASO,KAAK,OAAO,KAAKhH;IAE9D,OAAOkB;EAAA;EAGTU,YAAYsF,KAAKC,UAAU;IACzB,QAAQD,IAAI1F;MAAA,KACLjC;QAAc;UACjB,MAAMkB,QAAQyG,IAAIE,QAAQ3G,MACxB;UAEF,IAAI4G,SAAS;UACb,IAAID,UAAU;UACd,MAAM/G,SAASI,QAAQA,MAAM,GAAG6G,MAAM,OAAO;UAC7C,MAAMC,WAAW9G,QAAQA,MAAM,KAAK;UACpC,MAAM+G,WAAW/G,QAAQA,MAAM,KAAK;UACpC,MAAMgH,YAAY,KAAK/E,SAAS,KAAKA,MAAMgF,WAAWH;UAEtD,IAAIE,WAAW;YACb,IAAIA,UAAUE,KAAKP,UAAUK,UAAUE;YACvCN,SAASjI,EAAEwI,UAAUH,UAAUJ,QAAQhH;UAAA,OAClC;YACLgH,OAAOE,YAAYC;UAAA;UAGrB,MAAMK,SAAS;UACfzI,EAAE0I,OAAOT,QAAQ,CAACU,OAAO7E,UAAU;YACjC2E,OAAOjH,KAAK,IAAIzB,gBAAgB6I,oBAC9B,KAAKC,gCAAgC/E,QACrC,oBACAA,OACA6E,OACA,KAAK5F,UACL;UAAA;UAIJ,OAAO,IAAIhD,gBAAgB+I,sBAAsB;YAAEd;YAASS;YAAQM,QAAQjB;YAAKG;YAAQxF,OAAOsF;UAAA;QAAA;MAAA,KAG7F1H;MAAA,KACAC;QAAsB;UAEzB,MAAMe,QAAQyG,IAAIE,QAAQ3G,MACxB;UAEF,MAAM2H,YAAY3H,QAAQA,MAAM,KAAK;UACrC,MAAM4G,SAAS5G,QAAQA,MAAM,GAAG6G,MAAM,IAAIe,OAAO,GAAGD,eAAeA,gBAAgB;UAEnF,OAAO,IAAIjJ,gBAAgBmJ,0BAA0B;YACnDC,SAASrB,IAAI1F,UAAU/B,uBAAuB,WAAW;YACzD+I,OAAO/H,QAAQA,MAAM,KAAK;YAC1B4G;YACAU,OAAOV,UAAUA,OAAOxG,UAAU,KAAKsB,YAAY,KAAKA,SAASkF,OAAO,OAAO;YAC/EoB,OAAOhI,QAAQA,MAAM,KAAK;YAC1B0H,QAAQjB;YACRrF,OAAOsF;UAAA;QAAA;MAAA;QAKT,OAAO,IAAIhI,gBAAgBuJ,cAAcxB,KAAK;UAAErF,OAAOsF;QAAA;IAAA;EAAA;EAI7DnD,sBAAsB9C,SAAS;IAC7B,OAAOA,QAAQ8E,IAAI2C,cAAc;MAC/BC,WAAWD,UAAUE;MACrBC,QAAQH,UAAUI;IAAA;EAAA;EAItBnF,uBAAuB3B,MAAM;IAE3B,IAAI+G;IACJ,MAAM9G,SAAS;IAEfD,KAAKgH,QAAQC,QAAQ;MACnB,IAAI,CAACF,YAAYA,SAASG,SAASD,KAAKE,UAAU;QAChDJ,WAAW;UACTK,SAASH,KAAKE,aAAa;UAC3B/B,QAAQ;UACR8B,MAAMD,KAAKE;UACXR,WAAWM,KAAKI;UAChBC,QAAQL,KAAKM,eAAe;UAC5BpF,MAAM8E,KAAKO;QAAA;QAEbvH,OAAOtB,KAAKoI;MAAA;MAGdA,SAAS3B,OAAO6B,KAAKQ,eAAe,KAAK;QACvCC,WAAWT,KAAKU;QAChB/I,QAAQqI,KAAKW,YAAY;QACzBC,OAAOZ,KAAKa,cAAc,MAAM,QAAQ;MAAA;IAAA;IAI5C,OAAO7H;EAAA;AAAA;AAIX8H,OAAOC,UAAUC","names":["AbstractQuery","require","sequelizeErrors","_","DataTypes","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","constructor","connection","sequelize","options","__spreadValues","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","values_","push","length","run","parameters","complete","_logQuery","results","errForStack","Error","query","error","transaction","errno","rollback","error_","finished","formatError","stack","warningStatus","logWarnings","formatResults","data","result","instance","isBulkUpdateQuery","isBulkDeleteQuery","affectedRows","isUpsertQuery","isInsertQuery","handleInsertQuery","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","Array","pkField","field","i","isSelectQuery","handleJsonSelectQuery","handleSelectQuery","isUpdateQuery","isCallQuery","isRawQuery","meta","isShowIndexesQuery","handleShowIndexesQuery","isForeignKeysQuery","isShowConstraintsQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","toLowerCase","startsWith","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","comment","Comment","isVersionQuery","version","rows","fieldRawAttributesMap","_field","keys","modelField","JSON","map","row","fieldName","info","hasMinVersion","parse","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","join","log","err","errStack","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","table","index","DatabaseError","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","currItem","forEach","item","name","Key_name","primary","Table","unique","Non_unique","Index_type","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","module","exports","Query"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mariadb\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          // JSON fields for MariaDB server 10.5.2+ already results in JSON format, skip JSON.parse\n          // this is due to this https://jira.mariadb.org/browse/MDEV-17832 and how mysql2 connector interacts with MariaDB and JSON fields\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === 'string' && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}