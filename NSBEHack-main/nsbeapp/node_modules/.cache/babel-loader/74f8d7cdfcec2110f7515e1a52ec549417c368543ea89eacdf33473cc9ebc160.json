{"ast":null,"code":"\"use strict\";\n\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst sequelizeErrors = require(\"../../errors\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").db2;\nconst debug = logger.debugContext(\"connection:db2\");\nconst parserStore = require(\"../parserStore\")(\"db2\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"ibm_db\");\n    this.refreshTypeParser(DataTypes);\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    const connectionConfig = {\n      database: config.database,\n      hostname: config.host,\n      port: config.port,\n      uid: config.username,\n      pwd: config.password\n    };\n    if (config.ssl) {\n      connectionConfig[\"security\"] = config.ssl;\n    }\n    if (config.sslcertificate) {\n      connectionConfig[\"SSLServerCertificate\"] = config.sslcertificate;\n    }\n    if (config.dialectOptions) {\n      for (const key of Object.keys(config.dialectOptions)) {\n        connectionConfig[key] = config.dialectOptions[key];\n      }\n    }\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection2 = new this.lib.Database();\n        connection2.lib = this.lib;\n        connection2.open(connectionConfig, error => {\n          if (error) {\n            if (error.message && error.message.includes(\"SQL30081N\")) {\n              return reject(new sequelizeErrors.ConnectionRefusedError(error));\n            }\n            return reject(new sequelizeErrors.ConnectionError(error));\n          }\n          return resolve(connection2);\n        });\n      });\n      return connection;\n    } catch (err) {\n      throw new sequelizeErrors.ConnectionError(err);\n    }\n  }\n  disconnect(connection) {\n    if (connection.connected) {\n      connection.close(error => {\n        if (error) {\n          debug(error);\n        } else {\n          debug(\"connection closed\");\n        }\n      });\n    }\n    return Promise.resolve();\n  }\n  validate(connection) {\n    return connection && connection.connected;\n  }\n  _disconnect(connection) {\n    return this.dialect.connectionManager.disconnect(connection);\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":";;AAEA,MAAMA,4BAA4BC,QAAQ;AAC1C,MAAMC,kBAAkBD,QAAQ;AAChC,MAAM;EAAEE;AAAA,IAAWF,QAAQ;AAC3B,MAAMG,YAAYH,QAAQ,oBAAoBI;AAC9C,MAAMC,QAAQH,OAAOI,aAAa;AAClC,MAAMC,cAAcP,QAAQ,kBAAkB;AAW9C,gCAAgCD,0BAA0B;EACxDS,YAAYC,SAASC,WAAW;IAC9BA,UAAUC,OAAOC,OAAOF,UAAUC,OAAOC,QAAQ;IACjD,MAAMH,SAASC;IACf,KAAKG,MAAM,KAAKC,mBAAmB;IACnC,KAAKC,kBAAkBZ;EAAA;EAAA,OAGlBa,UAAUC,OAAOC,MAAM;IAC5B,IAAIX,YAAYY,IAAIF,MAAMG,OAAO;MAC/B,OAAOb,YAAYY,IAAIF,MAAMG,MAAMH,OAAO,KAAKP,UAAUW,SAASH;IAAA;IAEpE,OAAOA;EAAA;EAGTI,mBAAmBC,UAAU;IAC3BhB,YAAYiB,QAAQD;EAAA;EAGtBE,mBAAmB;IACjBlB,YAAYmB;EAAA;EAAA,MAYRC,QAAQhB,QAAQ;IACpB,MAAMiB,mBAAmB;MACvBC,UAAUlB,OAAOkB;MACjBC,UAAUnB,OAAOoB;MACjBnB,MAAMD,OAAOC;MACboB,KAAKrB,OAAOsB;MACZC,KAAKvB,OAAOwB;IAAA;IAGd,IAAIxB,OAAOyB,KAAK;MACdR,iBAAiB,cAAcjB,OAAOyB;IAAA;IAExC,IAAIzB,OAAO0B,gBAAgB;MACzBT,iBAAiB,0BAA0BjB,OAAO0B;IAAA;IAEpD,IAAI1B,OAAO2B,gBAAgB;MACzB,WAAWC,OAAOC,OAAOC,KAAK9B,OAAO2B,iBAAiB;QACpDV,iBAAiBW,OAAO5B,OAAO2B,eAAeC;MAAA;IAAA;IAIlD,IAAI;MACF,MAAMG,aAAa,MAAM,IAAIC,QAAQ,CAACC,SAASC,WAAW;QACxD,MAAMC,cAAa,IAAI,KAAKjC,IAAIkC;QAChCD,YAAWjC,MAAM,KAAKA;QACtBiC,YAAWE,KAAKpB,kBAAkBqB,SAAS;UACzC,IAAIA,OAAO;YACT,IAAIA,MAAMC,WAAWD,MAAMC,QAAQC,SAAS,cAAc;cACxD,OAAON,OAAO,IAAI5C,gBAAgBmD,uBAAuBH;YAAA;YAE3D,OAAOJ,OAAO,IAAI5C,gBAAgBoD,gBAAgBJ;UAAA;UAEpD,OAAOL,QAAQE;QAAA;MAAA;MAGnB,OAAOJ;IAAA,SACAY,KAAP;MACA,MAAM,IAAIrD,gBAAgBoD,gBAAgBC;IAAA;EAAA;EAI9CC,WAAWb,YAAY;IAErB,IAAIA,WAAWc,WAAW;MACxBd,WAAWe,MAAMR,SAAS;QACxB,IAAIA,OAAO;UAAE5C,MAAM4C;QAAA,OACd;UAAE5C,MAAM;QAAA;MAAA;IAAA;IAGjB,OAAOsC,QAAQC;EAAA;EAGjBc,SAAShB,YAAY;IACnB,OAAOA,cAAcA,WAAWc;EAAA;EAUlCG,YAAYjB,YAAY;IACtB,OAAO,KAAKjC,QAAQmD,kBAAkBL,WAAWb;EAAA;AAAA;AAIrDmB,OAAOC,UAAUC;AACjBF,OAAOC,QAAQC,oBAAoBA;AACnCF,OAAOC,QAAQE,UAAUD","names":["AbstractConnectionManager","require","sequelizeErrors","logger","DataTypes","db2","debug","debugContext","parserStore","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_typecast","field","next","get","type","options","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","connectionConfig","database","hostname","host","uid","username","pwd","password","ssl","sslcertificate","dialectOptions","key","Object","keys","connection","Promise","resolve","reject","connection2","Database","open","error","message","includes","ConnectionRefusedError","ConnectionError","err","disconnect","connected","close","validate","_disconnect","connectionManager","module","exports","ConnectionManager","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\db2\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst sequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').db2;\nconst debug = logger.debugContext('connection:db2');\nconst parserStore = require('../parserStore')('db2');\n\n/**\n * DB2 Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle DB2 specific connections\n * Use https://github.com/ibmdb/node-ibm_db to connect with DB2 server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('ibm_db');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with DB2 database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      database: config.database,\n      hostname: config.host,\n      port: config.port,\n      uid: config.username,\n      pwd: config.password\n    };\n\n    if (config.ssl) {\n      connectionConfig['security'] = config.ssl;\n    }\n    if (config.sslcertificate) {\n      connectionConfig['SSLServerCertificate'] = config.sslcertificate;\n    }\n    if (config.dialectOptions) {\n      for (const key of Object.keys(config.dialectOptions)) {\n        connectionConfig[key] = config.dialectOptions[key];\n      }\n    }\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = new this.lib.Database();\n        connection.lib = this.lib;\n        connection.open(connectionConfig, error => {\n          if (error) {\n            if (error.message && error.message.includes('SQL30081N')) {\n              return reject(new sequelizeErrors.ConnectionRefusedError(error));\n            }\n            return reject(new sequelizeErrors.ConnectionError(error));\n          }\n          return resolve(connection);\n        });\n      });\n      return connection;\n    } catch (err) {\n      throw new sequelizeErrors.ConnectionError(err);\n    }\n  }\n\n  disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.connected) {\n      connection.close(error => {\n        if (error) { debug(error); }\n        else { debug('connection closed'); }\n      });\n    }\n    return Promise.resolve();\n  }\n\n  validate(connection) {\n    return connection && connection.connected;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  _disconnect(connection) {\n    return this.dialect.connectionManager.disconnect(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}