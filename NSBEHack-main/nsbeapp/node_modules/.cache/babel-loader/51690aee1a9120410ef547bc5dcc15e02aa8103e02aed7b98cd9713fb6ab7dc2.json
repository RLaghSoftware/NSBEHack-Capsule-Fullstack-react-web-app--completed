{"ast":null,"code":"\"use strict\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"connection:sqlite\");\nconst dataTypes = require(\"../../data-types\").sqlite;\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"sqlite\");\nconst {\n  promisify\n} = require(\"util\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n    if (this.sequelize.options.host === \"localhost\") {\n      delete this.sequelize.options.host;\n    }\n    this.connections = {};\n    this.lib = this._loadDialectModule(\"sqlite3\");\n    this.refreshTypeParser(dataTypes);\n  }\n  async _onProcessExit() {\n    await Promise.all(Object.getOwnPropertyNames(this.connections).map(connection => promisify(callback => this.connections[connection].close(callback))()));\n    return super._onProcessExit.call(this);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || \"default\";\n    if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== void 0) {\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || \":memory:\";\n    }\n    options.inMemory = options.storage === \":memory:\" ? 1 : 0;\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      fs.mkdirSync(path.dirname(options.storage), {\n        recursive: true\n      });\n    }\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(options.storage, options.readWriteMode, err => {\n        if (err) return reject(new sequelizeErrors.ConnectionError(err));\n        debug(`connection acquired ${options.uuid}`);\n        resolve(this.connections[options.inMemory || options.uuid]);\n      });\n    });\n    if (this.sequelize.config.password) {\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n    if (this.sequelize.options.foreignKeys !== false) {\n      connection.run(\"PRAGMA FOREIGN_KEYS=ON\");\n    }\n    return connection;\n  }\n  releaseConnection(connection, force) {\n    if (connection.filename === \":memory:\" && force !== true) return;\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["fs","require","path","AbstractConnectionManager","logger","debug","debugContext","dataTypes","sqlite","sequelizeErrors","parserStore","promisify","constructor","dialect","sequelize","options","host","connections","lib","_loadDialectModule","refreshTypeParser","_onProcessExit","Promise","all","Object","getOwnPropertyNames","map","connection","callback","close","call","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","getConnection","uuid","storage","inMemory","dialectOptions","defaultReadWriteMode","OPEN_READWRITE","OPEN_CREATE","readWriteMode","mode","mkdirSync","dirname","recursive","resolve","reject","Database","err","ConnectionError","config","password","run","escape","foreignKeys","releaseConnection","force","filename","module","exports","ConnectionManager","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:sqlite');\nconst dataTypes = require('../../data-types').sqlite;\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('sqlite3');\n    this.refreshTypeParser(dataTypes);\n  }\n\n  async _onProcessExit() {\n    await Promise.all(\n      Object.getOwnPropertyNames(this.connections)\n        .map(connection => promisify(callback => this.connections[connection].close(callback))())\n    );\n    return super._onProcessExit.call(this);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n\n    if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== undefined) {\n      // Check explicitely for the storage option to not be set since an empty string signals\n      // SQLite will create a temporary disk-based database in that case.\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || ':memory:';\n    }\n\n    options.inMemory = options.storage === ':memory:' ? 1 : 0;\n\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      // automatic path provision for `options.storage`\n      fs.mkdirSync(path.dirname(options.storage), { recursive: true });\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\n        options.storage,\n        options.readWriteMode,\n        err => {\n          if (err) return reject(new sequelizeErrors.ConnectionError(err));\n          debug(`connection acquired ${options.uuid}`);\n          resolve(this.connections[options.inMemory || options.uuid]);\n        }\n      );\n    });\n\n    if (this.sequelize.config.password) {\n      // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n    if (this.sequelize.options.foreignKeys !== false) {\n      // Make it possible to define and use foreign key constraints unless\n      // explicitly disallowed. It's still opt-in per relation\n      connection.run('PRAGMA FOREIGN_KEYS=ON');\n    }\n\n    return connection;\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}