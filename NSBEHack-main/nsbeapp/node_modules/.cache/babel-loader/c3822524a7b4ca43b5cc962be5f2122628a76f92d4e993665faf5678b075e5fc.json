{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst QueryTypes = require(\"../../query-types\");\nconst Op = require(\"../../operators\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nclass MSSqlQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = __spreadValues({\n      raw: true\n    }, options || {});\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n    options = __spreadValues({}, options);\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\nexports.MSSqlQueryInterface = MSSqlQueryInterface;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,IAAIC,QAAQ;AAElB,MAAMC,QAAQD,QAAQ;AACtB,MAAME,aAAaF,QAAQ;AAC3B,MAAMG,KAAKH,QAAQ;AACnB,MAAM;EAAEI;AAAA,IAAmBJ,QAAQ;AAKnC,kCAAkCI,eAAe;EAAA,MAMzCC,aAAaC,WAAWC,eAAeC,SAAS;IACpDA,UAAUC;MAAEC,KAAK;IAAA,GAASF,WAAW;IAErC,MAAMG,oBAAoB,KAAKC,eAAeC,0BAA0BP,WAAWC;IACnF,MAAM,CAACO,YAAY,MAAM,KAAKC,UAAUC,MAAML,mBAAmBH;IACjE,IAAIM,SAASG,QAAQ;MAEnB,MAAMC,oBAAoB,KAAKN,eAAeO,oBAAoBb,WAAWQ,SAAS,GAAGM;MACzF,MAAM,KAAKL,UAAUC,MAAME,mBAAmBV;IAAA;IAEhD,MAAMa,oBAAoB,KAAKT,eAAeU,mBAAmBhB,WAAWC;IAC5E,MAAM,CAACgB,WAAW,MAAM,KAAKR,UAAUC,MAAMK,mBAAmBb;IAChE,IAAIe,QAAQN,QAAQ;MAElB,MAAMO,oBAAoB,KAAKZ,eAAea,oBAAoBnB,WAAWiB,QAAQ,GAAGG;MACxF,MAAM,KAAKX,UAAUC,MAAMQ,mBAAmBhB;IAAA;IAGhD,MAAMmB,0BAA0B,KAAKf,eAAegB,6BAA6BtB,WAAWC;IAC5F,MAAM,CAACsB,UAAU,MAAM,KAAKd,UAAUC,MAAMW,yBAAyBnB;IACrE,IAAIqB,OAAOZ,QAAQ;MACjB,MAAMC,oBAAoB,KAAKN,eAAeO,oBAAoBb,WAAWuB,OAAO,GAAGC;MACvF,MAAM,KAAKf,UAAUC,MAAME,mBAAmBV;IAAA;IAEhD,MAAMuB,YAAY,KAAKnB,eAAeoB,kBAAkB1B,WAAWC;IACnE,OAAO,KAAKQ,UAAUC,MAAMe,WAAWvB;EAAA;EAAA,MAMnCyB,OAAO3B,WAAW4B,cAAcC,cAAcC,OAAO5B,SAAS;IAClE,MAAM6B,QAAQ7B,QAAQ6B;IACtB,MAAMC,SAAS;IAEf9B,UAAUC,mBAAKD;IAEf,IAAI,CAACP,MAAMsC,aAAaH,QAAQ;MAC9BE,OAAOE,KAAKJ;IAAA;IAId,IAAIK,UAAUC,OAAOC,OAAON,MAAMO,YAAYC,IAAIC,QAAQA,KAAKC;IAC/DN,UAAUA,QAAQO,OAAON,OAAOC,OAAON,MAAMY,UAAUC,OAAOJ,QAAQA,KAAKK,QAAQN,IAAIC,QAAQA,KAAKC;IAEpG,MAAMK,aAAaV,OAAOW,KAAKnB;IAC/B,WAAWoB,SAASb,SAAS;MAC3B,IAAI1C,EAAEwD,aAAaH,YAAYE,OAAOrC,WAAWqC,MAAMrC,QAAQ;QAC7DmB,QAAQ;QACR,WAAWoB,SAASF,OAAO;UACzBlB,MAAMoB,SAAStB,aAAasB;QAAA;QAE9BlB,OAAOE,KAAKJ;MAAA;IAAA;IAIhBA,QAAQ;MAAA,CAAGjC,GAAGsD,KAAKnB;IAAA;IAEnB9B,QAAQkD,OAAOxD,WAAWyD;IAC1BnD,QAAQE,MAAM;IAEd,MAAMkD,MAAM,KAAKhD,eAAeiD,YAAYvD,WAAW4B,cAAcC,cAAcC,OAAOC,OAAO7B;IACjG,OAAO,MAAM,KAAKO,UAAUC,MAAM4C,KAAKpD;EAAA;AAAA;AAI3CsD,QAAQC,sBAAsBA","names":["_","require","Utils","QueryTypes","Op","QueryInterface","removeColumn","tableName","attributeName","options","__spreadValues","raw","findConstraintSql","queryGenerator","getDefaultConstraintQuery","results0","sequelize","query","length","dropConstraintSql","dropConstraintQuery","name","findForeignKeySql","getForeignKeyQuery","results","dropForeignKeySql","dropForeignKeyQuery","constraint_name","primaryKeyConstraintSql","getPrimaryKeyConstraintQuery","result","constraintName","removeSql","removeColumnQuery","upsert","insertValues","updateValues","where","model","wheres","isWhereEmpty","push","indexes","Object","values","uniqueKeys","map","item","fields","concat","_indexes","filter","unique","attributes","keys","index","intersection","field","or","type","UPSERT","sql","upsertQuery","exports","MSSqlQueryInterface"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mssql\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}