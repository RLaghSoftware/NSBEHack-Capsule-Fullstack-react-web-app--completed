{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst Op = require(\"../operators\");\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"HasMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.options.through) {\n      throw new Error(\"N:M associations are not supported with hasMany. Use belongsToMany instead\");\n    }\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n    if (this.as) {\n      this.isAliased = true;\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.source.options.name.singular, this.source.primaryKeyAttribute].join(\"_\"));\n    }\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    const constraintOptions = __spreadValues({}, this.options);\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? \"SET NULL\" : \"CASCADE\");\n      constraintOptions.onUpdate = constraintOptions.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n  async get(instances) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const where = {};\n    let Model = this.target;\n    let instance;\n    let values;\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    options = __spreadValues({}, options);\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, {\n        raw: true\n      }));\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this,\n          values\n        };\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, {\n        raw: true\n      });\n    }\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n    const results = await Model.findAll(options);\n    if (instance) return results;\n    const result = {};\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, {\n        raw: true\n      })] = [];\n    }\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, {\n        raw: true\n      })].push(_instance);\n    }\n    return result;\n  }\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n    options.attributes = [[this.sequelize.fn(\"COUNT\", this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)), \"count\"]];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n    options = __spreadProps(__spreadValues({}, options), {\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    });\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [where, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return associatedObjects.length === targetInstances.length;\n  }\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n    const oldAssociations = await this.get(sourceInstance, __spreadProps(__spreadValues({}, options), {\n      scope: false,\n      raw: true\n    }));\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old => !targetInstances.find(obj => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    const unassociatedObjects = targetInstances.filter(obj => !oldAssociations.find(old => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    let updateWhere;\n    let update;\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject => associatedObject[this.target.primaryKeyAttribute])\n      };\n      promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n        where: updateWhere\n      })));\n    }\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject => unassociatedObject[this.target.primaryKeyAttribute]);\n      promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n        where: updateWhere\n      })));\n    }\n    await Promise.all(promises);\n    return sourceInstance;\n  }\n  async add(sourceInstance, targetInstances) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!targetInstances) return Promise.resolve();\n    targetInstances = this.toInstanceArray(targetInstances);\n    const update = __spreadValues({\n      [this.foreignKey]: sourceInstance.get(this.sourceKey)\n    }, this.scope);\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject => unassociatedObject.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n      where\n    }));\n    return sourceInstance;\n  }\n  async remove(sourceInstance, targetInstances) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const update = {\n      [this.foreignKey]: null\n    };\n    targetInstances = this.toInstanceArray(targetInstances);\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance => targetInstance.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n      where\n    }));\n    return this;\n  }\n  async create(sourceInstance, values) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n    if (values === void 0) {\n      values = {};\n    }\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;","map":{"version":3,"mappings":"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","names":["Utils","require","Helpers","_","Association","Op","constructor","source","target","options","associationType","targetAssociation","sequelize","isMultiAssociation","foreignKeyAttribute","through","Error","isSelfAssociation","as","isAliased","isPlainObject","name","plural","singular","singularize","isObject","foreignKey","fieldName","camelize","primaryKeyAttribute","join","rawAttributes","identifierField","field","foreignKeyField","sourceKey","sourceKeyAttribute","sourceKeyField","primaryKeyField","upperFirst","associationAccessor","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","_injectAttributes","newAttributes","__spreadValues","type","keyType","allowNull","constraintOptions","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","aliases","mixinMethods","instances","where","Model","instance","values","Array","isArray","scope","Object","assign","map","_instance","raw","limit","length","groupedLimit","on","in","and","prototype","hasOwnProperty","call","unscoped","schema","schemaDelimiter","results","findAll","result","push","cloneDeep","attributes","fn","col","plain","parseInt","has","sourceInstance","targetInstances","__spreadProps","or","associatedObjects","toInstanceArray","oldAssociations","promises","obsoleteAssociations","filter","old","find","unassociatedObjects","updateWhere","update","associatedObject","unassociatedObject","Promise","all","resolve","targetInstance","fields","attribute","keys","verifyAssociationAlias","alias","module","exports","HasMany","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\associations\\has-many.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n\n    /*\n    * If self association, this is the target association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    /*\n     * Foreign key setup\n     */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    /*\n     * Source key setup\n     */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n\n    // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n    const constraintOptions = { ...this.options };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instances, options = {}) {\n    const where = {};\n\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = { ...options };\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, { raw: true }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this, // association\n          values\n        };\n\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, { raw: true });\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    const results = await Model.findAll(options);\n    if (instance) return results;\n\n    const result = {};\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, { raw: true })] = [];\n    }\n\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, { raw: true })].push(_instance);\n    }\n\n    return result;\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {object}         [options] find & count options\n   * @param {object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n\n    options.attributes = [\n      [\n        this.sequelize.fn(\n          'COUNT',\n          this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)\n        ),\n        'count'\n      ]\n    ];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = {\n      ...options,\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    };\n\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        where,\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return associatedObjects.length === targetInstances.length;\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {object} [options] Options passed to `target.findAll` and `update`.\n   * @param {object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old =>\n      !targetInstances.find(obj =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    const unassociatedObjects = targetInstances.filter(obj =>\n      !oldAssociations.find(old =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    let updateWhere;\n    let update;\n\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject =>\n          associatedObject[this.target.primaryKeyAttribute]\n        )\n      };\n\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject =>\n        unassociatedObject[this.target.primaryKeyAttribute]\n      );\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    await Promise.all(promises);\n\n    return sourceInstance;\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) return Promise.resolve();\n\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const update = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      ...this.scope\n    };\n\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject =>\n        unassociatedObject.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return sourceInstance;\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n  async remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance =>\n        targetInstance.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return this;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model instance\n   * @param {object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}