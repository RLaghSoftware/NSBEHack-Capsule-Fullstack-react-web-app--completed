{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").mysql;\nconst momentTz = require(\"moment-timezone\");\nconst debug = logger.debugContext(\"connection:mysql\");\nconst parserStore = require(\"../parserStore\")(\"mysql\");\nconst {\n  promisify\n} = require(\"util\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mysql2\");\n    this.refreshTypeParser(DataTypes);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: \"-FOUND_ROWS\",\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    }, config.dialectOptions);\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection2 = this.lib.createConnection(connectionConfig);\n        const errorHandler = e => {\n          connection2.removeListener(\"connect\", connectHandler);\n          connection2.removeListener(\"error\", connectHandler);\n          reject(e);\n        };\n        const connectHandler = () => {\n          connection2.removeListener(\"error\", errorHandler);\n          resolve(connection2);\n        };\n        connection2.on(\"error\", errorHandler);\n        connection2.once(\"connect\", connectHandler);\n      });\n      debug(\"connection acquired\");\n      connection.on(\"error\", error => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case \"EHOSTUNREACH\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (connection._closing) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return await promisify(callback => connection.end(callback))();\n  }\n  validate(connection) {\n    return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["AbstractConnectionManager","require","SequelizeErrors","logger","DataTypes","mysql","momentTz","debug","debugContext","parserStore","promisify","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","_typecast","field","next","get","type","options","connect","connectionConfig","__spreadValues","host","user","username","flags","password","database","timezone","typeCast","ConnectionManager","bind","bigNumberStrings","supportBigNumbers","dialectOptions","connection","Promise","resolve","reject","connection2","createConnection","errorHandler","e","removeListener","connectHandler","on","once","error","code","pool","destroy","keepDefaultTimezone","tzOffset","test","tz","format","cb","query","err","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","disconnect","_closing","callback","end","validate","_fatalError","_protocolError","stream","destroyed","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mysql\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\nconst { promisify } = require('util');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        };\n\n        // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      });\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}