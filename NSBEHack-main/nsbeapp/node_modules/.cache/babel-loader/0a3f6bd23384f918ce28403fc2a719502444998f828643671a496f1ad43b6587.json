{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\nconst QueryTypes = require(\"../../query-types\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"sql:pg\");\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values2) => {\n        if (seen[key] !== void 0) {\n          return seen[key];\n        }\n        if (values2[key] !== void 0) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values2[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return void 0;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n  async run(sql, parameters) {\n    const {\n      connection\n    } = this;\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length).forEach(_ref => {\n        let [alias, original] = _ref;\n        const reg = new RegExp(_.escapeRegExp(original), \"g\");\n        sql = sql.replace(reg, alias);\n      });\n    }\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n    const complete = this._logQuery(sql, debug, parameters);\n    let queryResult;\n    const errForStack = new Error();\n    try {\n      queryResult = await query;\n    } catch (error) {\n      if (error.code === \"ECONNRESET\" || /Unable to set non-blocking to true/i.test(error) || /SSL SYSCALL error: EOF detected/i.test(error) || /Local: Authentication failure/i.test(error) || error.message === \"Query read timeout\") {\n        connection._invalid = true;\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row => _.toPairs(row).reduce((acc, _ref2) => {\n        let [key, value] = _ref2;\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n    const isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    const isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split(\"_\")[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: \"23505\",\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute;\n        row.fields = row.indkey.split(\" \").map((indKey, index) => {\n          field = columns[indKey];\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n            order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n            length: void 0\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === \"YES\",\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === \"PRIMARY KEY\"\n        };\n        if (result[row.Field].type === \"BOOLEAN\") {\n          result[row.Field].defaultValue = {\n            \"false\": false,\n            \"true\": true\n          }[result[row.Field].defaultValue];\n          if (result[row.Field].defaultValue === void 0) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n        if (typeof result[row.Field].defaultValue === \"string\") {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, \"\");\n          if (result[row.Field].defaultValue.includes(\"::\")) {\n            const split = result[row.Field].defaultValue.split(\"::\");\n            if (split[1].toLowerCase() !== \"regclass)\") {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n      return [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n    switch (code) {\n      case \"23503\":\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : void 0;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case \"23505\":\n        if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          errors = [];\n          message = \"Validation error\";\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n      case \"23P01\":\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n        if (match) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n        }\n        message = \"Exclusion constraint error\";\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n      case \"42704\":\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = \"Unknown constraint error\";\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : void 0;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n  getInsertIdField() {\n    return \"id\";\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","QueryTypes","sequelizeErrors","_","logger","debug","debugContext","formatBindParameters","sql","values","dialect","stringReplaceFunc","value","replace","bindParam","Array","isArray","map","skipValueReplace","i","seen","replacementFunc","match","key","values2","push","run","parameters","connection","isEmpty","options","searchPath","sequelize","getQueryInterface","queryGenerator","setSearchPath","minifyAliases","includeAliases","toPairs","sort","a","b","length","forEach","alias","original","reg","RegExp","escapeRegExp","query","Promise","resolve","reject","error","result","complete","_logQuery","queryResult","errForStack","Error","code","test","message","_invalid","formatError","stack","rows","reduce","allRows","r","concat","rowCount","count","Number","isFinite","aliasesMapping","row","acc","mapping","get","isTableNameQuery","startsWith","isRelNameQuery","name","relname","tableName","split","Object","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","includes","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","toLowerCase","isSelectQuery","raw","quoteIdentifiers","attrsMap","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isInsertQuery","isUpdateQuery","isUpsertQuery","instance","dataValues","EmptyResultError","prototype","hasOwnProperty","call","record","attr","find","fieldName","plain","isRawQuery","err","errStack","errors","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","Query","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\postgres\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (error.code === 'ECONNRESET'\n        // https://github.com/sequelize/sequelize/pull/14090\n        // pg-native throws custom exception or libpq formatted errors\n        || /Unable to set non-blocking to true/i.test(error)\n        || /SSL SYSCALL error: EOF detected/i.test(error)\n        || /Local: Authentication failure/i.test(error)\n        // https://github.com/sequelize/sequelize/pull/15144\n        || error.message === 'Query read timeout'\n      ) {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}