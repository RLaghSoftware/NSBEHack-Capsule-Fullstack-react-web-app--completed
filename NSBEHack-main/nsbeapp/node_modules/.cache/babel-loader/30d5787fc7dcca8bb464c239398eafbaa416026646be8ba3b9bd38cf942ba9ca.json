{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst sequelizeErrors = require(\"../../errors\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nconst QueryTypes = require(\"../../query-types\");\nclass SnowflakeQueryInterface extends QueryInterface {\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), __spreadValues({\n      raw: true\n    }, options));\n    if (results.length && results[0].constraint_name !== \"PRIMARY\") {\n      await Promise.all(results.map(constraint => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({\n        raw: true\n      }, options))));\n    }\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({\n      raw: true\n    }, options));\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    }));\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n    return await this.sequelize.query(query, options);\n  }\n}\nexports.SnowflakeQueryInterface = SnowflakeQueryInterface;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,kBAAkBC,QAAQ;AAChC,MAAM;EAAEC;AAAA,IAAmBD,QAAQ;AACnC,MAAME,aAAaF,QAAQ;AAK3B,sCAAsCC,eAAe;EAAA,MAM7CE,aAAaC,WAAWC,YAAYC,SAAS;IACjDA,UAAUA,WAAW;IAErB,MAAM,CAACC,WAAW,MAAM,KAAKC,UAAUC,MACrC,KAAKC,eAAeC,mBAAmBP,UAAUA,YAAYA,YAAY;MACvEA;MACAQ,QAAQ,KAAKJ,UAAUK,OAAOC;IAAA,GAC7BT,aACHU;MAAEC,KAAK;IAAA,GAASV;IAIlB,IAAIC,QAAQU,UAAUV,QAAQ,GAAGW,oBAAoB,WAAW;MAC9D,MAAMC,QAAQC,IAAIb,QAAQc,IAAIC,cAAc,KAAKd,UAAUC,MACzD,KAAKC,eAAea,oBAAoBnB,WAAWkB,WAAWJ,kBAC9DH;QAAEC,KAAK;MAAA,GAASV;IAAA;IAIpB,OAAO,MAAM,KAAKE,UAAUC,MAC1B,KAAKC,eAAec,kBAAkBpB,WAAWC,aACjDU;MAAEC,KAAK;IAAA,GAASV;EAAA;EAAA,MAKdmB,OAAOrB,WAAWsB,cAAcC,cAAcC,OAAOtB,SAAS;IAClEA,UAAUS,mBAAKT;IAEfA,QAAQuB,OAAO3B,WAAW4B;IAC1BxB,QAAQyB,oBAAoBC,OAAOC,KAAKN;IAExC,MAAMO,QAAQ5B,QAAQ4B;IACtB,MAAMC,MAAM,KAAKzB,eAAe0B,YAAYhC,WAAWsB,cAAcQ,MAAMG,eAAe/B;IAC1F,OAAO,MAAM,KAAKE,UAAUC,MAAM0B,KAAK7B;EAAA;EAAA,MAInCgC,iBAAiBlC,WAAWmC,gBAAgBjC,SAAS;IACzD,MAAM6B,MAAM,KAAKzB,eAAe8B,qBAC9BpC,UAAUA,YAAYA,YAAY;MAChCA;MACAQ,QAAQ,KAAKJ,UAAUK,OAAOC;IAAA,GAC7ByB;IAEL,MAAME,cAAc,MAAM,KAAKjC,UAAUC,MAAM0B,KAAKO,iCAAKpC,UAAL;MAClDuB,MAAM,KAAKrB,UAAUN,WAAWyC;IAAA;IAElC,MAAMrB,aAAamB,YAAY;IAC/B,IAAIhC;IACJ,IAAI,CAACa,cAAc,CAACA,WAAWsB,gBAAgB;MAC7C,MAAM,IAAI7C,gBAAgB8C,uBACxB;QACEC,SAAS,cAAcP,2BAA2BnC;QAClDkB,YAAYiB;QACZQ,OAAO3C;MAAA;IAAA;IAIb,IAAIkB,WAAWsB,mBAAmB,eAAe;MAC/CnC,QAAQ,KAAKC,eAAea,oBAAoBnB,WAAWmC;IAAA,OACtD;MACL9B,QAAQ,KAAKC,eAAesC,iBAAiB1B,WAAWlB,WAAWkB,WAAWiB;IAAA;IAGhF,OAAO,MAAM,KAAK/B,UAAUC,MAAMA,OAAOH;EAAA;AAAA;AAI7C2C,QAAQC,0BAA0BA","names":["sequelizeErrors","require","QueryInterface","QueryTypes","removeColumn","tableName","columnName","options","results","sequelize","query","queryGenerator","getForeignKeyQuery","schema","config","database","__spreadValues","raw","length","constraint_name","Promise","all","map","constraint","dropForeignKeyQuery","removeColumnQuery","upsert","insertValues","updateValues","where","type","UPSERT","updateOnDuplicate","Object","keys","model","sql","insertQuery","rawAttributes","removeConstraint","constraintName","showConstraintsQuery","constraints","__spreadProps","SHOWCONSTRAINTS","constraintType","UnknownConstraintError","message","table","removeIndexQuery","exports","SnowflakeQueryInterface"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with Snowflake database\n */\nclass SnowflakeQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes Snowflake's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /** @override */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /** @override */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.SnowflakeQueryInterface = SnowflakeQueryInterface;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}