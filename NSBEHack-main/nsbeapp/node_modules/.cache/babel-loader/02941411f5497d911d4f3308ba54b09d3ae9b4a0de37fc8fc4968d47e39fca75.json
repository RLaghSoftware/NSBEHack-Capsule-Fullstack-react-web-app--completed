{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst DataTypes = require(\"../../data-types\");\nconst QueryTypes = require(\"../../query-types\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nconst Utils = require(\"../../utils\");\nconst Deferrable = require(\"../../deferrable\");\nclass PostgresQueryInterface extends QueryInterface {\n  async ensureEnums(tableName, attributes, options, model) {\n    var _this = this;\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = \"\";\n    let promises = [];\n    let i = 0;\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          plain: true,\n          raw: true,\n          type: QueryTypes.SELECT\n        })));\n      }\n    }\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n    const addEnumValue = function (field, value, relativeValue) {\n      let position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"before\";\n      let spliceStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : promises.length;\n      const valueOptions = __spreadValues({}, options);\n      valueOptions.before = null;\n      valueOptions.after = null;\n      switch (position) {\n        case \"after\":\n          valueOptions.after = relativeValue;\n          break;\n        case \"before\":\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n      promises.splice(spliceStart, 0, () => {\n        return _this.sequelize.query(_this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n      });\n    };\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), {\n              raw: true\n            }));\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n            if (newIdx === -1) {\n              continue;\n            }\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\n            }\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, \"after\");\n            }\n          }\n          enumIdx++;\n        }\n      }\n    }\n    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(fkMeta => {\n      const _a = Utils.camelizeObjectKeys(fkMeta),\n        {\n          initiallyDeferred,\n          isDeferrable\n        } = _a,\n        remaining = __objRest(_a, [\"initiallyDeferred\", \"isDeferrable\"]);\n      return __spreadProps(__spreadValues({}, remaining), {\n        deferrable: isDeferrable === \"NO\" ? Deferrable.NOT : initiallyDeferred === \"NO\" ? Deferrable.INITIALLY_IMMEDIATE : Deferrable.INITIALLY_DEFERRED\n      });\n    });\n  }\n  async dropEnum(enumName, options) {\n    options = options || {};\n    return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }));\n  }\n  async dropAllEnums(options) {\n    options = options || {};\n    const enums = await this.pgListEnums(null, options);\n    return await Promise.all(enums.map(result => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }))));\n  }\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      plain: false,\n      raw: true,\n      type: QueryTypes.SELECT\n    }));\n  }\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, {\n      attribute: \"tableName\"\n    });\n    if (!instanceTable) {\n      return;\n    }\n    const getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : `${options.schema}_`) + tableName;\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          raw: true\n        })));\n      }\n    }\n    await Promise.all(promises);\n  }\n}\nexports.PostgresQueryInterface = PostgresQueryInterface;","map":{"version":3,"mappings":"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","names":["DataTypes","require","QueryTypes","QueryInterface","Utils","Deferrable","ensureEnums","tableName","attributes","options","model","keys","Object","keyLen","length","sql","promises","i","attribute","type","ENUM","ARRAY","queryGenerator","pgListEnums","field","push","sequelize","query","__spreadProps","plain","raw","SELECT","results","Promise","all","enumIdx","addEnumValue","value","relativeValue","position","spliceStart","valueOptions","__spreadValues","before","after","splice","pgEnumAdd","enumType","pgEnum","enumVals","fromArray","enum_value","vals","values","lastOldEnumValue","rightestPosition","oldIndex","enumVal","newIdx","indexOf","newValuesBefore","slice","promisesLength","reverseIdx","remainingEnumValues","result","reduce","promise","asyncFunction","resolve","dialect","connectionManager","_refreshDynamicOIDs","getForeignKeyReferencesForTable","table","queryOptions","FOREIGNKEYS","getForeignKeyReferencesQuery","config","database","map","fkMeta","_a","camelizeObjectKeys","initiallyDeferred","isDeferrable","remaining","deferrable","NOT","INITIALLY_IMMEDIATE","INITIALLY_DEFERRED","dropEnum","enumName","pgEnumDrop","pgEscapeAndQuote","dropAllEnums","enums","enum_name","dropTable","instanceTable","modelManager","getModel","getTableName","schema","rawAttributes","supportsSearchPath","exports","PostgresQueryInterface"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\postgres\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\nconst Deferrable = require('../../deferrable');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n\n    return result.map(fkMeta => {\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\n\n      return {\n        ...remaining,\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.INITIALLY_DEFERRED\n      };\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}