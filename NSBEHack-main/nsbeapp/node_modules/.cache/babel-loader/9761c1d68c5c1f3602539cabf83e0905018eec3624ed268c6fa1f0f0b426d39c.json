{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst util = require(\"util\");\nconst _ = require(\"lodash\");\nconst uuidv4 = require(\"uuid\").v4;\nconst Utils = require(\"../../utils\");\nconst deprecations = require(\"../../utils/deprecations\");\nconst SqlString = require(\"../../sql-string\");\nconst DataTypes = require(\"../../data-types\");\nconst Model = require(\"../../model\");\nconst Association = require(\"../../associations/base\");\nconst BelongsTo = require(\"../../associations/belongs-to\");\nconst BelongsToMany = require(\"../../associations/belongs-to-many\");\nconst HasMany = require(\"../../associations/has-many\");\nconst Op = require(\"../../operators\");\nconst sequelizeError = require(\"../../errors\");\nconst IndexHints = require(\"../../index-hints\");\nclass QueryGenerator {\n  constructor(options) {\n    if (!options.sequelize) throw new Error(\"QueryGenerator initialized without options.sequelize\");\n    if (!options._dialect) throw new Error(\"QueryGenerator initialized without options._dialect\");\n    this.sequelize = options.sequelize;\n    this.options = options.sequelize.options;\n    this.dialect = options._dialect.name;\n    this._dialect = options._dialect;\n    this._initQuoteIdentifier();\n  }\n  extractTableDetails(tableName, options) {\n    options = options || {};\n    tableName = tableName || {};\n    return {\n      schema: tableName.schema || options.schema || this.options.schema || \"public\",\n      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,\n      delimiter: tableName.delimiter || options.delimiter || \".\"\n    };\n  }\n  addSchema(param) {\n    if (!param._schema) return param.tableName || param;\n    const self = this;\n    return {\n      tableName: param.tableName || param,\n      table: param.tableName || param,\n      name: param.name || param,\n      schema: param._schema,\n      delimiter: param._schemaDelimiter || \".\",\n      toString() {\n        return self.quoteTable(this);\n      }\n    };\n  }\n  dropSchema(tableName, options) {\n    return this.dropTableQuery(tableName, options);\n  }\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(this.addSchema({\n      tableName,\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter\n    }));\n    return `DESCRIBE ${table};`;\n  }\n  dropTableQuery(tableName) {\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;\n  }\n  renameTableQuery(before, after) {\n    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;\n  }\n  populateInsertQueryReturnIntoBinds() {}\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n    const modelAttributeMap = {};\n    const bind = options.bind || [];\n    const fields = [];\n    const returningModelAttributes = [];\n    const returnTypes = [];\n    const values = [];\n    const quotedTable = this.quoteTable(table);\n    const bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;\n    const returnAttributes = [];\n    let query;\n    let valueQuery = \"\";\n    let emptyQuery = \"\";\n    let outputFragment = \"\";\n    let returningFragment = \"\";\n    let identityWrapperRequired = false;\n    let tmpTable = \"\";\n    if (modelAttributes) {\n      _.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n    if (this._dialect.supports[\"DEFAULT VALUES\"]) {\n      emptyQuery += \" DEFAULT VALUES\";\n    } else if (this._dialect.supports[\"VALUES ()\"]) {\n      emptyQuery += \" VALUES ()\";\n    }\n    if ((this._dialect.supports.returnValues || this._dialect.supports.returnIntoValues) && options.returning) {\n      const returnValues = this.generateReturnValues(modelAttributes, options);\n      returningModelAttributes.push(...returnValues.returnFields);\n      if (this._dialect.supports.returnIntoValues) {\n        returnTypes.push(...returnValues.returnTypes);\n      }\n      returningFragment = returnValues.returningFragment;\n      tmpTable = returnValues.tmpTable || \"\";\n      outputFragment = returnValues.outputFragment || \"\";\n    }\n    if (_.get(this, [\"sequelize\", \"options\", \"dialectOptions\", \"prependSearchPath\"]) || options.searchPath) {\n      options.bindParam = false;\n    }\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      options.bindParam = false;\n    }\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (const key in valueHash) {\n      if (Object.prototype.hasOwnProperty.call(valueHash, key)) {\n        const value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && value == null) {\n          if (!this._dialect.supports.autoIncrement.defaultValue) {\n            fields.splice(-1, 1);\n          } else if (this._dialect.supports.DEFAULT) {\n            values.push(\"DEFAULT\");\n          } else {\n            values.push(this.escape(null));\n          }\n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {\n            identityWrapperRequired = true;\n          }\n          if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n            values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n              context: \"INSERT\"\n            }));\n          } else {\n            values.push(this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n              context: \"INSERT\"\n            }, bindParam));\n          }\n        }\n      }\n    }\n    let onDuplicateKeyUpdate = \"\";\n    if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {\n      if (this._dialect.supports.inserts.updateOnDuplicate == \" ON CONFLICT DO UPDATE SET\") {\n        const conflictKeys = options.upsertKeys.map(attr => this.quoteIdentifier(attr));\n        const updateKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);\n        onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(\",\")})`;\n        onDuplicateKeyUpdate += _.isEmpty(updateKeys) ? \" DO NOTHING \" : ` DO UPDATE SET ${updateKeys.join(\",\")}`;\n      } else {\n        const valueKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);\n        if (_.isEmpty(valueKeys) && options.upsertKeys) {\n          valueKeys.push(...options.upsertKeys.map(attr => `${this.quoteIdentifier(attr)}=${this.quoteIdentifier(attr)}`));\n        }\n        if (_.isEmpty(valueKeys)) {\n          throw new Error(\"No update values found for ON DUPLICATE KEY UPDATE clause, and no identifier fields could be found to use instead.\");\n        }\n        onDuplicateKeyUpdate += `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(\",\")}`;\n      }\n    }\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : \"\",\n      onConflictDoNothing: options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : \"\",\n      attributes: fields.join(\",\"),\n      output: outputFragment,\n      values: values.join(\",\"),\n      tmpTable\n    };\n    valueQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable} (${replacements.attributes})${replacements.output} VALUES (${replacements.values})${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${valueQuery}`;\n    emptyQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable}${replacements.output}${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${emptyQuery}`;\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      const dropFunction = \"DROP FUNCTION IF EXISTS pg_temp.testfunc()\";\n      if (returningModelAttributes.length === 0) {\n        returningModelAttributes.push(\"*\");\n      }\n      const delimiter = `$func_${uuidv4().replace(/-/g, \"\")}$`;\n      const selectQuery = `SELECT (testfunc.response).${returningModelAttributes.join(\", (testfunc.response).\")}, testfunc.sequelize_caught_exception FROM pg_temp.testfunc();`;\n      options.exception = \"WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;\";\n      valueQuery = `CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response ${quotedTable}, OUT sequelize_caught_exception text) RETURNS RECORD AS ${delimiter} BEGIN ${valueQuery} RETURNING * INTO response; EXCEPTION ${options.exception} END ${delimiter} LANGUAGE plpgsql; ${selectQuery} ${dropFunction}`;\n    } else {\n      valueQuery += returningFragment;\n      emptyQuery += returningFragment;\n    }\n    if (this._dialect.supports.returnIntoValues && options.returning) {\n      this.populateInsertQueryReturnIntoBinds(returningModelAttributes, returnTypes, bind.length, returnAttributes, options);\n    }\n    query = `${replacements.attributes.length ? valueQuery : emptyQuery}${returnAttributes.join(\",\")};`;\n    if (this._dialect.supports.finalTable) {\n      query = `SELECT * FROM FINAL TABLE(${replacements.attributes.length ? valueQuery : emptyQuery});`;\n    }\n    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {\n      query = `SET IDENTITY_INSERT ${quotedTable} ON; ${query} SET IDENTITY_INSERT ${quotedTable} OFF;`;\n    }\n    const result = {\n      query\n    };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n    return result;\n  }\n  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {\n    options = options || {};\n    fieldMappedAttributes = fieldMappedAttributes || {};\n    const tuples = [];\n    const serials = {};\n    const allAttributes = [];\n    let onDuplicateKeyUpdate = \"\";\n    for (const fieldValueHash of fieldValueHashes) {\n      _.forOwn(fieldValueHash, (value, key) => {\n        if (!allAttributes.includes(key)) {\n          allAttributes.push(key);\n        }\n        if (fieldMappedAttributes[key] && fieldMappedAttributes[key].autoIncrement === true) {\n          serials[key] = true;\n        }\n      });\n    }\n    for (const fieldValueHash of fieldValueHashes) {\n      const values = allAttributes.map(key => {\n        if (this._dialect.supports.bulkDefault && serials[key] === true) {\n          return fieldValueHash[key] != null ? fieldValueHash[key] : \"DEFAULT\";\n        }\n        return this.escape(fieldValueHash[key], fieldMappedAttributes[key], {\n          context: \"INSERT\"\n        });\n      });\n      tuples.push(`(${values.join(\",\")})`);\n    }\n    if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {\n      if (this._dialect.supports.inserts.updateOnDuplicate == \" ON CONFLICT DO UPDATE SET\") {\n        const conflictKeys = options.upsertKeys.map(attr => this.quoteIdentifier(attr));\n        const updateKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);\n        onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(\",\")}) DO UPDATE SET ${updateKeys.join(\",\")}`;\n      } else {\n        const valueKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);\n        onDuplicateKeyUpdate = `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(\",\")}`;\n      }\n    }\n    const ignoreDuplicates = options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : \"\";\n    const attributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(\",\");\n    const onConflictDoNothing = options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : \"\";\n    let returning = \"\";\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(fieldMappedAttributes, options);\n      returning += returnValues.returningFragment;\n    }\n    return Utils.joinSQLFragments([\"INSERT\", ignoreDuplicates, \"INTO\", this.quoteTable(tableName), `(${attributes})`, \"VALUES\", tuples.join(\",\"), onDuplicateKeyUpdate, onConflictDoNothing, returning, \";\"]);\n  }\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n    const values = [];\n    const bind = [];\n    const modelAttributeMap = {};\n    let outputFragment = \"\";\n    let tmpTable = \"\";\n    let suffix = \"\";\n    if (_.get(this, [\"sequelize\", \"options\", \"dialectOptions\", \"prependSearchPath\"]) || options.searchPath) {\n      options.bindParam = false;\n    }\n    const bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;\n    if (this._dialect.supports[\"LIMIT ON UPDATE\"] && options.limit) {\n      if (![\"mssql\", \"db2\", \"oracle\"].includes(this.dialect)) {\n        suffix = ` LIMIT ${this.escape(options.limit)} `;\n      } else if (this.dialect === \"oracle\") {\n        if (where && (where.length && where.length > 0 || Object.keys(where).length > 0)) {\n          suffix += \" AND \";\n        } else {\n          suffix += \" WHERE \";\n        }\n        suffix += `rownum <= ${this.escape(options.limit)} `;\n      }\n    }\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n      suffix += returnValues.returningFragment;\n      tmpTable = returnValues.tmpTable || \"\";\n      outputFragment = returnValues.outputFragment || \"\";\n      if (!this._dialect.supports.returnValues.output && options.returning) {\n        options.mapToModel = true;\n      }\n    }\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n    for (const key in attrValueHash) {\n      if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !this._dialect.supports.autoIncrement.update) {\n        continue;\n      }\n      const value = attrValueHash[key];\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n          context: \"UPDATE\"\n        })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n          context: \"UPDATE\"\n        }, bindParam)}`);\n      }\n    }\n    const whereOptions = __spreadProps(__spreadValues({}, options), {\n      bindParam\n    });\n    if (values.length === 0) {\n      return \"\";\n    }\n    const query = `${tmpTable}UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")}${outputFragment} ${this.whereQuery(where, whereOptions)}${suffix}`.trim();\n    const result = {\n      query\n    };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n    return result;\n  }\n  arithmeticQuery(operator, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = options || {};\n    _.defaults(options, {\n      returning: true\n    });\n    extraAttributesToBeUpdated = Utils.removeNullValuesFromHash(extraAttributesToBeUpdated, this.options.omitNull);\n    let outputFragment = \"\";\n    let returningFragment = \"\";\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(null, options);\n      outputFragment = returnValues.outputFragment;\n      returningFragment = returnValues.returningFragment;\n    }\n    const updateSetSqlFragments = [];\n    for (const field in incrementAmountsByField) {\n      const incrementAmount = incrementAmountsByField[field];\n      const quotedField = this.quoteIdentifier(field);\n      const escapedAmount = this.escape(incrementAmount);\n      updateSetSqlFragments.push(`${quotedField}=${quotedField}${operator} ${escapedAmount}`);\n    }\n    for (const field in extraAttributesToBeUpdated) {\n      const newValue = extraAttributesToBeUpdated[field];\n      const quotedField = this.quoteIdentifier(field);\n      const escapedValue = this.escape(newValue);\n      updateSetSqlFragments.push(`${quotedField}=${escapedValue}`);\n    }\n    return Utils.joinSQLFragments([\"UPDATE\", this.quoteTable(tableName), \"SET\", updateSetSqlFragments.join(\",\"), outputFragment, this.whereQuery(where), returningFragment]);\n  }\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    options = options || {};\n    if (!Array.isArray(attributes)) {\n      options = attributes;\n      attributes = void 0;\n    } else {\n      options.fields = attributes;\n    }\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && typeof options.prefix === \"string\") {\n      options.prefix = options.prefix.replace(/\\./g, \"_\");\n      options.prefix = options.prefix.replace(/(\"|')/g, \"\");\n    }\n    const fieldsSql = options.fields.map(field => {\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n      if (typeof field === \"string\") {\n        field = {\n          name: field\n        };\n      }\n      let result = \"\";\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${util.inspect(field)}`);\n      }\n      result += this.quoteIdentifier(field.name);\n      if (this._dialect.supports.index.collate && field.collate) {\n        result += ` COLLATE ${this.quoteIdentifier(field.collate)}`;\n      }\n      if (this._dialect.supports.index.operator) {\n        const operator = field.operator || options.operator;\n        if (operator) {\n          result += ` ${operator}`;\n        }\n      }\n      if (this._dialect.supports.index.length && field.length) {\n        result += `(${field.length})`;\n      }\n      if (field.order) {\n        result += ` ${field.order}`;\n      }\n      return result;\n    });\n    if (!options.name) {\n      options = Utils.nameIndex(options, options.prefix);\n    }\n    options = Model._conformIndex(options);\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n    if (typeof tableName === \"string\") {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n    const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? \"CONCURRENTLY\" : void 0;\n    let ind;\n    if (this._dialect.supports.indexViaAlter) {\n      ind = [\"ALTER TABLE\", tableName, concurrently, \"ADD\"];\n    } else {\n      ind = [\"CREATE\"];\n    }\n    ind = ind.concat(options.unique ? \"UNIQUE\" : \"\", options.type, \"INDEX\", !this._dialect.supports.indexViaAlter ? concurrently : void 0, this.quoteIdentifiers(options.name), this._dialect.supports.index.using === 1 && options.using ? `USING ${options.using}` : \"\", !this._dialect.supports.indexViaAlter ? `ON ${tableName}` : void 0, this._dialect.supports.index.using === 2 && options.using ? `USING ${options.using}` : \"\", `(${fieldsSql.join(\", \")})`, this._dialect.supports.index.parser && options.parser ? `WITH PARSER ${options.parser}` : void 0, this._dialect.supports.index.where && options.where ? options.where : void 0);\n    return _.compact(ind).join(\" \");\n  }\n  addConstraintQuery(tableName, options) {\n    if (typeof tableName === \"string\") {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n    return Utils.joinSQLFragments([\"ALTER TABLE\", tableName, \"ADD\", this.getConstraintSnippet(tableName, options || {}), \";\"]);\n  }\n  getConstraintSnippet(tableName, options) {\n    let constraintSnippet, constraintName;\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === \"string\") {\n        return this.quoteIdentifier(field);\n      }\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${field}`);\n      }\n      return this.quoteIdentifier(field.name);\n    });\n    const fieldsSqlQuotedString = fieldsSql.join(\", \");\n    const fieldsSqlString = fieldsSql.join(\"_\");\n    switch (options.type.toUpperCase()) {\n      case \"UNIQUE\":\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        break;\n      case \"CHECK\":\n        options.where = this.whereItemsQuery(options.where);\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;\n        break;\n      case \"DEFAULT\":\n        if (options.defaultValue === void 0) {\n          throw new Error(\"Default value must be specified for DEFAULT CONSTRAINT\");\n        }\n        if (this._dialect.name !== \"mssql\") {\n          throw new Error(\"Default constraints are supported only for MSSQL dialect.\");\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;\n        break;\n      case \"PRIMARY KEY\":\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        break;\n      case \"FOREIGN KEY\":\n        const references = options.references;\n        if (!references || !references.table || !(references.field || references.fields)) {\n          throw new Error(\"references object with table and field must be specified\");\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);\n        const quotedReferences = typeof references.field !== \"undefined\" ? this.quoteIdentifier(references.field) : references.fields.map(f => this.quoteIdentifier(f)).join(\", \");\n        const referencesSnippet = `${this.quoteTable(references.table)} (${quotedReferences})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n        break;\n      default:\n        throw new Error(`${options.type} is invalid.`);\n    }\n    if (options.deferrable && [\"UNIQUE\", \"PRIMARY KEY\", \"FOREIGN KEY\"].includes(options.type.toUpperCase())) {\n      constraintSnippet += ` ${this.deferConstraintsQuery(options)}`;\n    }\n    return constraintSnippet;\n  }\n  removeConstraintQuery(tableName, constraintName) {\n    if (typeof tableName === \"string\") {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n    return Utils.joinSQLFragments([\"ALTER TABLE\", tableName, \"DROP CONSTRAINT\", this.quoteIdentifiers(constraintName)]);\n  }\n  quote(collection, parent, connector) {\n    const validOrderOptions = [\"ASC\", \"DESC\", \"ASC NULLS LAST\", \"DESC NULLS LAST\", \"ASC NULLS FIRST\", \"DESC NULLS FIRST\", \"NULLS FIRST\", \"NULLS LAST\"];\n    connector = connector || \".\";\n    if (typeof collection === \"string\") {\n      return this.quoteIdentifiers(collection);\n    }\n    if (Array.isArray(collection)) {\n      collection.forEach((item2, index) => {\n        const previous = collection[index - 1];\n        let previousAssociation;\n        let previousModel;\n        if (!previous && parent !== void 0) {\n          previousModel = parent;\n        } else if (previous && previous instanceof Association) {\n          previousAssociation = previous;\n          previousModel = previous.target;\n        }\n        if (previousModel && previousModel.prototype instanceof Model) {\n          let model;\n          let as;\n          if (typeof item2 === \"function\" && item2.prototype instanceof Model) {\n            model = item2;\n          } else if (_.isPlainObject(item2) && item2.model && item2.model.prototype instanceof Model) {\n            model = item2.model;\n            as = item2.as;\n          }\n          if (model) {\n            if (!as && previousAssociation && previousAssociation instanceof Association && previousAssociation.through && previousAssociation.through.model === model) {\n              item2 = new Association(previousModel, model, {\n                as: model.name\n              });\n            } else {\n              item2 = previousModel.getAssociationForAlias(model, as);\n              if (!item2) {\n                item2 = previousModel.getAssociationForAlias(model, model.name);\n              }\n            }\n            if (!(item2 instanceof Association)) {\n              throw new Error(util.format(\"Unable to find a valid association for model, '%s'\", model.name));\n            }\n          }\n        }\n        if (typeof item2 === \"string\") {\n          const orderIndex = validOrderOptions.indexOf(item2.toUpperCase());\n          if (index > 0 && orderIndex !== -1) {\n            item2 = this.sequelize.literal(` ${validOrderOptions[orderIndex]}`);\n          } else if (previousModel && previousModel.prototype instanceof Model) {\n            if (previousModel.associations !== void 0 && previousModel.associations[item2]) {\n              item2 = previousModel.associations[item2];\n            } else if (previousModel.rawAttributes !== void 0 && previousModel.rawAttributes[item2] && item2 !== previousModel.rawAttributes[item2].field) {\n              item2 = previousModel.rawAttributes[item2].field;\n            } else if (item2.includes(\".\") && previousModel.rawAttributes !== void 0) {\n              const itemSplit = item2.split(\".\");\n              if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes.JSON) {\n                const identifier = this.quoteIdentifiers(`${previousModel.name}.${previousModel.rawAttributes[itemSplit[0]].field}`);\n                const path = itemSplit.slice(1);\n                item2 = this.jsonPathExtractionQuery(identifier, path);\n                item2 = this.sequelize.literal(item2);\n              }\n            }\n          }\n        }\n        collection[index] = item2;\n      }, this);\n      const collectionLength = collection.length;\n      const tableNames = [];\n      let item;\n      let i = 0;\n      for (i = 0; i < collectionLength - 1; i++) {\n        item = collection[i];\n        if (typeof item === \"string\" || item._modelAttribute || item instanceof Utils.SequelizeMethod) {\n          break;\n        } else if (item instanceof Association) {\n          tableNames[i] = item.as;\n        }\n      }\n      let sql = \"\";\n      if (i > 0) {\n        sql += `${this.quoteIdentifier(tableNames.join(connector))}.`;\n      } else if (typeof collection[0] === \"string\" && parent) {\n        sql += `${this.quoteIdentifier(parent.name)}.`;\n      }\n      collection.slice(i).forEach(collectionItem => {\n        sql += this.quote(collectionItem, parent, connector);\n      }, this);\n      return sql;\n    }\n    if (collection._modelAttribute) {\n      return `${this.quoteTable(collection.Model.name)}.${this.quoteIdentifier(collection.fieldName)}`;\n    }\n    if (collection instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(collection);\n    }\n    if (_.isPlainObject(collection) && collection.raw) {\n      throw new Error('The `{raw: \"...\"}` syntax is no longer supported.  Use `sequelize.literal` instead.');\n    }\n    throw new Error(`Unknown structure passed to order / group: ${util.inspect(collection)}`);\n  }\n  _initQuoteIdentifier() {\n    this._quoteIdentifier = this.quoteIdentifier;\n    this.quoteIdentifier = function (identifier, force) {\n      if (identifier === \"*\") return identifier;\n      return this._quoteIdentifier(identifier, force);\n    };\n  }\n  quoteIdentifier(identifier, force) {\n    throw new Error(`quoteIdentifier for Dialect \"${this.dialect}\" is not implemented`);\n  }\n  quoteIdentifiers(identifiers) {\n    if (identifiers.includes(\".\")) {\n      identifiers = identifiers.split(\".\");\n      const head = identifiers.slice(0, identifiers.length - 1).join(\"->\");\n      const tail = identifiers[identifiers.length - 1];\n      return `${this.quoteIdentifier(head)}.${this.quoteIdentifier(tail)}`;\n    }\n    return this.quoteIdentifier(identifiers);\n  }\n  quoteAttribute(attribute, model) {\n    if (model && attribute in model.rawAttributes) {\n      return this.quoteIdentifier(attribute);\n    }\n    return this.quoteIdentifiers(attribute);\n  }\n  getAliasToken() {\n    return \"AS\";\n  }\n  quoteTable(param, alias) {\n    let table = \"\";\n    if (alias === true) {\n      alias = param.as || param.name || param;\n    }\n    if (_.isObject(param)) {\n      if (this._dialect.supports.schemas) {\n        if (param.schema) {\n          table += `${this.quoteIdentifier(param.schema)}.`;\n        }\n        table += this.quoteIdentifier(param.tableName);\n      } else {\n        if (param.schema) {\n          table += param.schema + (param.delimiter || \".\");\n        }\n        table += param.tableName;\n        table = this.quoteIdentifier(table);\n      }\n    } else {\n      table = this.quoteIdentifier(param);\n    }\n    if (alias) {\n      table += ` ${this.getAliasToken()} ${this.quoteIdentifier(alias)}`;\n    }\n    return table;\n  }\n  escape(value, field, options) {\n    options = options || {};\n    if (value !== null && value !== void 0) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      }\n      if (field && field.type) {\n        this.validate(value, field, options);\n        if (field.type.stringify) {\n          const simpleEscape = escVal => SqlString.escape(escVal, this.options.timezone, this.dialect);\n          value = field.type.stringify(value, {\n            escape: simpleEscape,\n            field,\n            timezone: this.options.timezone,\n            operation: options.operation\n          });\n          if (field.type.escape === false) {\n            return value;\n          }\n        }\n      }\n    }\n    return SqlString.escape(value, this.options.timezone, this.dialect);\n  }\n  bindParam(bind) {\n    return value => {\n      bind.push(value);\n      return `$${bind.length}`;\n    };\n  }\n  format(value, field, options, bindParam) {\n    options = options || {};\n    if (value !== null && value !== void 0) {\n      if (value instanceof Utils.SequelizeMethod) {\n        throw new Error(\"Cannot pass SequelizeMethod as a bind parameter - use escape instead\");\n      }\n      if (field && field.type) {\n        this.validate(value, field, options);\n        if (field.type.bindParam) {\n          return field.type.bindParam(value, {\n            escape: _.identity,\n            field,\n            timezone: this.options.timezone,\n            operation: options.operation,\n            bindParam\n          });\n        }\n      }\n    }\n    return bindParam(value);\n  }\n  validate(value, field, options) {\n    if (this.typeValidation && field.type.validate && value) {\n      try {\n        if (options.isList && Array.isArray(value)) {\n          for (const item of value) {\n            field.type.validate(item, options);\n          }\n        } else {\n          field.type.validate(value, options);\n        }\n      } catch (error) {\n        if (error instanceof sequelizeError.ValidationError) {\n          error.errors.push(new sequelizeError.ValidationErrorItem(error.message, \"Validation error\", field.fieldName, value, null, `${field.type.key} validator`));\n        }\n        throw error;\n      }\n    }\n  }\n  isIdentifierQuoted(identifier) {\n    return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(identifier);\n  }\n  jsonPathExtractionQuery(column, path, isJson) {\n    let paths = _.toPath(path);\n    let pathStr;\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    switch (this.dialect) {\n      case \"mysql\":\n      case \"mariadb\":\n      case \"sqlite\":\n        if (this.dialect === \"mysql\") {\n          paths = paths.map(subPath => {\n            return /\\D/.test(subPath) ? Utils.addTicks(subPath, '\"') : subPath;\n          });\n        }\n        pathStr = this.escape([\"$\"].concat(paths).join(\".\").replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n        if (this.dialect === \"sqlite\") {\n          return `json_extract(${quotedColumn},${pathStr})`;\n        }\n        return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n      case \"postgres\":\n        const join = isJson ? \"#>\" : \"#>>\";\n        pathStr = this.escape(`{${paths.join(\",\")}}`);\n        return `(${quotedColumn}${join}${pathStr})`;\n      default:\n        throw new Error(`Unsupported ${this.dialect} for JSON operations`);\n    }\n  }\n  selectQuery(tableName, options, model) {\n    options = options || {};\n    const limit = options.limit;\n    const mainQueryItems = [];\n    const subQueryItems = [];\n    const subQuery = options.subQuery === void 0 ? limit && options.hasMultiAssociation : options.subQuery;\n    const attributes = {\n      main: options.attributes && options.attributes.slice(),\n      subQuery: null\n    };\n    const mainTable = {\n      name: tableName,\n      quotedName: null,\n      as: null,\n      model\n    };\n    const topLevelInfo = {\n      names: mainTable,\n      options,\n      subQuery\n    };\n    let mainJoinQueries = [];\n    let subJoinQueries = [];\n    let query;\n    if (this.options.minifyAliases && !options.aliasesMapping) {\n      options.aliasesMapping = /* @__PURE__ */new Map();\n      options.aliasesByTable = {};\n      options.includeAliases = /* @__PURE__ */new Map();\n    }\n    if (options.tableAs) {\n      mainTable.as = this.quoteIdentifier(options.tableAs);\n    } else if (!Array.isArray(mainTable.name) && mainTable.model) {\n      mainTable.as = this.quoteIdentifier(mainTable.model.name);\n    }\n    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map(t => {\n      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);\n    }).join(\", \");\n    if (subQuery && attributes.main) {\n      for (const keyAtt of mainTable.model.primaryKeyAttributes) {\n        if (!attributes.main.some(attr => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {\n          attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);\n        }\n      }\n    }\n    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);\n    attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : [\"*\"]);\n    if (subQuery || options.groupedLimit) {\n      attributes.subQuery = attributes.main;\n      attributes.main = [`${mainTable.as || mainTable.quotedName}.*`];\n    }\n    if (options.include) {\n      for (const include of options.include) {\n        if (include.separate) {\n          continue;\n        }\n        const joinQueries = this.generateInclude(include, {\n          externalAs: mainTable.as,\n          internalAs: mainTable.as\n        }, topLevelInfo);\n        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);\n        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        if (joinQueries.attributes.main.length > 0) {\n          attributes.main = _.uniq(attributes.main.concat(joinQueries.attributes.main));\n        }\n        if (joinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = _.uniq(attributes.subQuery.concat(joinQueries.attributes.subQuery));\n        }\n      }\n    }\n    if (subQuery) {\n      subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));\n      subQueryItems.push(subJoinQueries.join(\"\"));\n    } else {\n      if (options.groupedLimit) {\n        if (!mainTable.as) {\n          mainTable.as = mainTable.quotedName;\n        }\n        const where = __spreadValues({}, options.where);\n        let groupedLimitOrder,\n          whereKey,\n          include,\n          groupedTableName = mainTable.as;\n        if (typeof options.groupedLimit.on === \"string\") {\n          whereKey = options.groupedLimit.on;\n        } else if (options.groupedLimit.on instanceof HasMany) {\n          whereKey = options.groupedLimit.on.foreignKeyField;\n        }\n        if (options.groupedLimit.on instanceof BelongsToMany) {\n          groupedTableName = options.groupedLimit.on.manyFromSource.as;\n          const groupedLimitOptions = Model._validateIncludedElements({\n            include: [{\n              association: options.groupedLimit.on.manyFromSource,\n              duplicating: false,\n              required: true,\n              where: __spreadValues({\n                [Op.placeholder]: true\n              }, options.groupedLimit.through && options.groupedLimit.through.where)\n            }],\n            model\n          });\n          options.hasJoin = true;\n          options.hasMultiAssociation = true;\n          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);\n          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);\n          include = groupedLimitOptions.include;\n          if (Array.isArray(options.order)) {\n            options.order.forEach((order, i) => {\n              if (Array.isArray(order)) {\n                order = order[0];\n              }\n              let alias = `subquery_order_${i}`;\n              options.attributes.push([order, alias]);\n              alias = this.sequelize.literal(this.quote(alias));\n              if (Array.isArray(options.order[i])) {\n                options.order[i][0] = alias;\n              } else {\n                options.order[i] = alias;\n              }\n            });\n            groupedLimitOrder = options.order;\n          }\n        } else {\n          groupedLimitOrder = options.order;\n          if (!this._dialect.supports.topLevelOrderByRequired) {\n            delete options.order;\n          }\n          where[Op.placeholder] = true;\n        }\n        const baseQuery = `SELECT * FROM (${this.selectQuery(tableName, {\n          attributes: options.attributes,\n          offset: options.offset,\n          limit: options.groupedLimit.limit,\n          order: groupedLimitOrder,\n          aliasesMapping: options.aliasesMapping,\n          aliasesByTable: options.aliasesByTable,\n          where,\n          include,\n          model\n        }, model).replace(/;$/, \"\")}) ${this.getAliasToken()} sub`;\n        const placeHolder = this.whereItemQuery(Op.placeholder, true, {\n          model\n        });\n        const splicePos = baseQuery.indexOf(placeHolder);\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, `(${options.groupedLimit.values.map(value => {\n          let groupWhere;\n          if (whereKey) {\n            groupWhere = {\n              [whereKey]: value\n            };\n          }\n          if (include) {\n            groupWhere = {\n              [options.groupedLimit.on.foreignIdentifierField]: value\n            };\n          }\n          return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));\n        }).join(this._dialect.supports[\"UNION ALL\"] ? \" UNION ALL \" : \" UNION \")})`, mainTable.as));\n      } else {\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));\n      }\n      mainQueryItems.push(mainJoinQueries.join(\"\"));\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"where\") && !options.groupedLimit) {\n      options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);\n      if (options.where) {\n        if (subQuery) {\n          subQueryItems.push(` WHERE ${options.where}`);\n        } else {\n          mainQueryItems.push(` WHERE ${options.where}`);\n          mainQueryItems.forEach((value, key) => {\n            if (value.startsWith(\"SELECT\")) {\n              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);\n            }\n          });\n        }\n      }\n    }\n    if (options.group) {\n      options.group = Array.isArray(options.group) ? options.group.map(t => this.aliasGrouping(t, model, mainTable.as, options)).join(\", \") : this.aliasGrouping(options.group, model, mainTable.as, options);\n      if (subQuery && options.group) {\n        subQueryItems.push(` GROUP BY ${options.group}`);\n      } else if (options.group) {\n        mainQueryItems.push(` GROUP BY ${options.group}`);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"having\")) {\n      options.having = this.getWhereConditions(options.having, tableName, model, options, false);\n      if (options.having) {\n        if (subQuery) {\n          subQueryItems.push(` HAVING ${options.having}`);\n        } else {\n          mainQueryItems.push(` HAVING ${options.having}`);\n        }\n      }\n    }\n    if (options.order) {\n      const orders = this.getQueryOrders(options, model, subQuery);\n      if (orders.mainQueryOrder.length) {\n        mainQueryItems.push(` ORDER BY ${orders.mainQueryOrder.join(\", \")}`);\n      }\n      if (orders.subQueryOrder.length) {\n        subQueryItems.push(` ORDER BY ${orders.subQueryOrder.join(\", \")}`);\n      }\n    }\n    const limitOrder = this.addLimitAndOffset(options, mainTable.model);\n    if (limitOrder && !options.groupedLimit) {\n      if (subQuery) {\n        subQueryItems.push(limitOrder);\n      } else {\n        mainQueryItems.push(limitOrder);\n      }\n    }\n    if (subQuery) {\n      this._throwOnEmptyAttributes(attributes.main, {\n        modelName: model && model.name,\n        as: mainTable.as\n      });\n      query = `SELECT ${attributes.main.join(\", \")} FROM (${subQueryItems.join(\"\")}) ${this.getAliasToken()} ${mainTable.as}${mainJoinQueries.join(\"\")}${mainQueryItems.join(\"\")}`;\n    } else {\n      query = mainQueryItems.join(\"\");\n    }\n    if (options.lock && this._dialect.supports.lock) {\n      let lock = options.lock;\n      if (typeof options.lock === \"object\") {\n        lock = options.lock.level;\n      }\n      if (this._dialect.supports.lockKey && [\"KEY SHARE\", \"NO KEY UPDATE\"].includes(lock)) {\n        query += ` FOR ${lock}`;\n      } else if (lock === \"SHARE\") {\n        query += ` ${this._dialect.supports.forShare}`;\n      } else {\n        query += \" FOR UPDATE\";\n      }\n      if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model) {\n        query += ` OF ${this.quoteTable(options.lock.of.name)}`;\n      }\n      if (this._dialect.supports.skipLocked && options.skipLocked) {\n        query += \" SKIP LOCKED\";\n      }\n    }\n    return `${query};`;\n  }\n  aliasGrouping(field, model, tableName, options) {\n    const src = Array.isArray(field) ? field[0] : field;\n    return this.quote(this._getAliasForField(tableName, src, options) || src, model);\n  }\n  escapeAttributes(attributes, options, mainTableAs) {\n    return attributes && attributes.map(attr => {\n      let addTable = true;\n      if (attr instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(attr);\n      }\n      if (Array.isArray(attr)) {\n        if (attr.length !== 2) {\n          throw new Error(`${JSON.stringify(attr)} is not a valid attribute definition. Please use the following format: ['attribute definition', 'alias']`);\n        }\n        attr = attr.slice();\n        if (attr[0] instanceof Utils.SequelizeMethod) {\n          attr[0] = this.handleSequelizeMethod(attr[0]);\n          addTable = false;\n        } else if (!attr[0].includes(\"(\") && !attr[0].includes(\")\")) {\n          attr[0] = this.quoteIdentifier(attr[0]);\n        } else {\n          deprecations.noRawAttributes();\n        }\n        let alias = attr[1];\n        if (this.options.minifyAliases) {\n          alias = this._getMinifiedAlias(alias, mainTableAs, options);\n        }\n        attr = [attr[0], this.quoteIdentifier(alias)].join(\" AS \");\n      } else {\n        attr = !attr.includes(Utils.TICK_CHAR) && !attr.includes('\"') ? this.quoteAttribute(attr, options.model) : this.escape(attr);\n      }\n      if (!_.isEmpty(options.include) && (!attr.includes(\".\") || options.dotNotation) && addTable) {\n        attr = `${mainTableAs}.${attr}`;\n      }\n      return attr;\n    });\n  }\n  generateInclude(include, parentTableName, topLevelInfo) {\n    const joinQueries = {\n      mainQuery: [],\n      subQuery: []\n    };\n    const mainChildIncludes = [];\n    const subChildIncludes = [];\n    let requiredMismatch = false;\n    const includeAs = {\n      internalAs: include.as,\n      externalAs: include.as\n    };\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let joinQuery;\n    topLevelInfo.options.keysEscaped = true;\n    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {\n      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;\n      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;\n    }\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      include.model._expandAttributes(include);\n      Utils.mapFinderOptions(include, include.model);\n      const includeAttributes = include.attributes.map(attr => {\n        let attrAs = attr;\n        let verbatim = false;\n        if (Array.isArray(attr) && attr.length === 2) {\n          if (attr[0] instanceof Utils.SequelizeMethod && (attr[0] instanceof Utils.Literal || attr[0] instanceof Utils.Cast || attr[0] instanceof Utils.Fn)) {\n            verbatim = true;\n          }\n          attr = attr.map(attr2 => attr2 instanceof Utils.SequelizeMethod ? this.handleSequelizeMethod(attr2) : attr2);\n          attrAs = attr[1];\n          attr = attr[0];\n        }\n        if (attr instanceof Utils.Literal) {\n          return attr.val;\n        }\n        if (attr instanceof Utils.Cast || attr instanceof Utils.Fn) {\n          throw new Error(\"Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. This means the attribute will not be added to the returned instance\");\n        }\n        let prefix;\n        if (verbatim === true) {\n          prefix = attr;\n        } else if (/#>>|->>/.test(attr)) {\n          prefix = `(${this.quoteIdentifier(includeAs.internalAs)}.${attr.replace(/\\(|\\)/g, \"\")})`;\n        } else if (/json_extract\\(/.test(attr)) {\n          prefix = attr.replace(/json_extract\\(/i, `json_extract(${this.quoteIdentifier(includeAs.internalAs)}.`);\n        } else if (/json_value\\(/.test(attr)) {\n          prefix = attr.replace(/json_value\\(/i, `json_value(${this.quoteIdentifier(includeAs.internalAs)}.`);\n        } else {\n          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;\n        }\n        let alias = `${includeAs.externalAs}.${attrAs}`;\n        if (this.options.minifyAliases) {\n          alias = this._getMinifiedAlias(alias, includeAs.internalAs, topLevelInfo.options);\n        }\n        return Utils.joinSQLFragments([prefix, \"AS\", this.quoteIdentifier(alias, true)]);\n      });\n      if (include.subQuery && topLevelInfo.subQuery) {\n        for (const attr of includeAttributes) {\n          attributes.subQuery.push(attr);\n        }\n      } else {\n        for (const attr of includeAttributes) {\n          attributes.main.push(attr);\n        }\n      }\n    }\n    if (include.through) {\n      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);\n    } else {\n      this._generateSubQueryFilter(include, includeAs, topLevelInfo);\n      joinQuery = this.generateJoin(include, topLevelInfo);\n    }\n    if (joinQuery.attributes.main.length > 0) {\n      attributes.main = attributes.main.concat(joinQuery.attributes.main);\n    }\n    if (joinQuery.attributes.subQuery.length > 0) {\n      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);\n    }\n    if (include.include) {\n      for (const childInclude of include.include) {\n        if (childInclude.separate || childInclude._pseudo) {\n          continue;\n        }\n        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);\n        if (include.required === false && childInclude.required === true) {\n          requiredMismatch = true;\n        }\n        if (childInclude.subQuery && topLevelInfo.subQuery) {\n          subChildIncludes.push(childJoinQueries.subQuery);\n        }\n        if (childJoinQueries.mainQuery) {\n          mainChildIncludes.push(childJoinQueries.mainQuery);\n        }\n        if (childJoinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);\n        }\n        if (childJoinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);\n        }\n      }\n    }\n    if (include.subQuery && topLevelInfo.subQuery) {\n      if (requiredMismatch && subChildIncludes.length > 0) {\n        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join(\"\")} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (subChildIncludes.length > 0) {\n          joinQueries.subQuery.push(subChildIncludes.join(\"\"));\n        }\n      }\n      joinQueries.mainQuery.push(mainChildIncludes.join(\"\"));\n    } else {\n      if (requiredMismatch && mainChildIncludes.length > 0) {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join(\"\")} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (mainChildIncludes.length > 0) {\n          joinQueries.mainQuery.push(mainChildIncludes.join(\"\"));\n        }\n      }\n      joinQueries.subQuery.push(subChildIncludes.join(\"\"));\n    }\n    return {\n      mainQuery: joinQueries.mainQuery.join(\"\"),\n      subQuery: joinQueries.subQuery.join(\"\"),\n      attributes\n    };\n  }\n  _getMinifiedAlias(alias, tableName, options) {\n    if (options.aliasesByTable[`${tableName}${alias}`]) {\n      return options.aliasesByTable[`${tableName}${alias}`];\n    }\n    if (alias.match(/subquery_order_[0-9]/)) {\n      return alias;\n    }\n    const minifiedAlias = `_${options.aliasesMapping.size}`;\n    options.aliasesMapping.set(minifiedAlias, alias);\n    options.aliasesByTable[`${tableName}${alias}`] = minifiedAlias;\n    return minifiedAlias;\n  }\n  _getAliasForField(tableName, field, options) {\n    if (this.options.minifyAliases) {\n      if (options.aliasesByTable[`${tableName}${field}`]) {\n        return options.aliasesByTable[`${tableName}${field}`];\n      }\n    }\n    return null;\n  }\n  generateJoin(include, topLevelInfo) {\n    const association = include.association;\n    const parent = include.parent;\n    const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    let $parent;\n    let joinWhere;\n    const left = association.source;\n    const attrLeft = association instanceof BelongsTo ? association.identifier : association.sourceKeyAttribute || left.primaryKeyAttribute;\n    const fieldLeft = association instanceof BelongsTo ? association.identifierField : left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;\n    let asLeft;\n    const right = include.model;\n    const tableRight = right.getTableName();\n    const fieldRight = association instanceof BelongsTo ? right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field : association.identifierField;\n    let asRight = include.as;\n    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {\n      if (asLeft) {\n        asLeft = `${$parent.as}->${asLeft}`;\n      } else {\n        asLeft = $parent.as;\n      }\n    }\n    if (!asLeft) asLeft = parent.as || parent.model.name;else asRight = `${asLeft}->${asRight}`;\n    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;\n    const subqueryAttributes = [];\n    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {\n      if (parentIsTop) {\n        const tableName = this.quoteTable(parent.as || parent.model.name);\n        joinOn = this._getAliasForField(tableName, attrLeft, topLevelInfo.options) || `${tableName}.${this.quoteIdentifier(attrLeft)}`;\n        if (topLevelInfo.subQuery) {\n          const dbIdentifier = `${tableName}.${this.quoteIdentifier(fieldLeft)}`;\n          subqueryAttributes.push(dbIdentifier !== joinOn ? `${dbIdentifier} AS ${this.quoteIdentifier(attrLeft)}` : dbIdentifier);\n        }\n      } else {\n        const joinSource = `${asLeft.replace(/->/g, \".\")}.${attrLeft}`;\n        joinOn = this._getAliasForField(asLeft, joinSource, topLevelInfo.options) || this.quoteIdentifier(joinSource);\n      }\n    }\n    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;\n    if (include.on) {\n      joinOn = this.whereItemsQuery(include.on, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n    }\n    if (include.where) {\n      joinWhere = this.whereItemsQuery(include.where, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n      if (joinWhere) {\n        if (include.or) {\n          joinOn += ` OR ${joinWhere}`;\n        } else {\n          joinOn += ` AND ${joinWhere}`;\n        }\n      }\n    }\n    if (this.options.minifyAliases && asRight.length > 63) {\n      const alias = `%${topLevelInfo.options.includeAliases.size}`;\n      topLevelInfo.options.includeAliases.set(alias, asRight);\n    }\n    return {\n      join: include.required ? \"INNER JOIN\" : include.right && this._dialect.supports[\"RIGHT JOIN\"] ? \"RIGHT OUTER JOIN\" : \"LEFT OUTER JOIN\",\n      body: this.quoteTable(tableRight, asRight),\n      condition: joinOn,\n      attributes: {\n        main: [],\n        subQuery: subqueryAttributes\n      }\n    };\n  }\n  generateReturnValues(modelAttributes, options) {\n    const returnFields = [];\n    const returnTypes = [];\n    let outputFragment = \"\";\n    let returningFragment = \"\";\n    let tmpTable = \"\";\n    if (Array.isArray(options.returning)) {\n      returnFields.push(...options.returning.map(field => this.quoteIdentifier(field)));\n    } else if (modelAttributes) {\n      _.each(modelAttributes, attribute => {\n        if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n          returnFields.push(this.quoteIdentifier(attribute.field));\n          returnTypes.push(attribute.type);\n        }\n      });\n    }\n    if (_.isEmpty(returnFields)) {\n      returnFields.push(\"*\");\n    }\n    if (this._dialect.supports.returnValues.returning) {\n      returningFragment = ` RETURNING ${returnFields.join(\",\")}`;\n    } else if (this._dialect.supports.returnIntoValues) {\n      returningFragment = ` RETURNING ${returnFields.join(\",\")} INTO `;\n    } else if (this._dialect.supports.returnValues.output) {\n      outputFragment = ` OUTPUT ${returnFields.map(field => `INSERTED.${field}`).join(\",\")}`;\n      if (options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n        const tmpColumns = returnFields.map((field, i) => `${field} ${returnTypes[i].toSql()}`);\n        tmpTable = `DECLARE @tmp TABLE (${tmpColumns.join(\",\")}); `;\n        outputFragment += \" INTO @tmp\";\n        returningFragment = \"; SELECT * FROM @tmp\";\n      }\n    }\n    return {\n      outputFragment,\n      returnFields,\n      returnTypes,\n      returningFragment,\n      tmpTable\n    };\n  }\n  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {\n    const through = include.through;\n    const throughTable = through.model.getTableName();\n    const throughAs = `${includeAs.internalAs}->${through.as}`;\n    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;\n    const throughAttributes = through.attributes.map(attr => {\n      let alias = `${externalThroughAs}.${Array.isArray(attr) ? attr[1] : attr}`;\n      if (this.options.minifyAliases) {\n        alias = this._getMinifiedAlias(alias, throughAs, topLevelInfo.options);\n      }\n      return Utils.joinSQLFragments([`${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)}`, \"AS\", this.quoteIdentifier(alias)]);\n    });\n    const association = include.association;\n    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    const tableSource = parentTableName;\n    const identSource = association.identifierField;\n    const tableTarget = includeAs.internalAs;\n    const identTarget = association.foreignIdentifierField;\n    const attrTarget = association.targetKeyField;\n    const joinType = include.required ? \"INNER JOIN\" : include.right && this._dialect.supports[\"RIGHT JOIN\"] ? \"RIGHT OUTER JOIN\" : \"LEFT OUTER JOIN\";\n    let joinBody;\n    let joinCondition;\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let attrSource = association.sourceKey;\n    let sourceJoinOn;\n    let targetJoinOn;\n    let throughWhere;\n    let targetWhere;\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      for (const attr of throughAttributes) {\n        attributes.main.push(attr);\n      }\n    }\n    if (!topLevelInfo.subQuery) {\n      attrSource = association.sourceKeyField;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {\n      attrSource = association.sourceKeyField;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {\n      const joinSource = this._getAliasForField(tableSource, `${tableSource}.${attrSource}`, topLevelInfo.options) || `${tableSource}.${attrSource}`;\n      sourceJoinOn = `${this.quoteIdentifier(joinSource)} = `;\n    } else {\n      const aliasedSource = this._getAliasForField(tableSource, attrSource, topLevelInfo.options) || attrSource;\n      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(aliasedSource)} = `;\n    }\n    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;\n    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;\n    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;\n    if (through.where) {\n      throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);\n    }\n    joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;\n    if (throughWhere) {\n      joinBody += ` AND ${throughWhere}`;\n    }\n    joinBody += \")\";\n    joinCondition = sourceJoinOn;\n    if (include.where || include.through.where) {\n      if (include.where) {\n        targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);\n        if (targetWhere) {\n          joinCondition += ` AND ${targetWhere}`;\n        }\n      }\n    }\n    this._generateSubQueryFilter(include, includeAs, topLevelInfo);\n    return {\n      join: joinType,\n      body: joinBody,\n      condition: joinCondition,\n      attributes\n    };\n  }\n  _generateSubQueryFilter(include, includeAs, topLevelInfo) {\n    if (!topLevelInfo.subQuery || !include.subQueryFilter) {\n      return;\n    }\n    if (!topLevelInfo.options.where) {\n      topLevelInfo.options.where = {};\n    }\n    let parent = include;\n    let child = include;\n    let nestedIncludes = this._getRequiredClosure(include).include;\n    let query;\n    while (parent = parent.parent) {\n      if (parent.parent && !parent.required) {\n        return;\n      }\n      if (parent.subQueryFilter) {\n        return;\n      }\n      nestedIncludes = [__spreadProps(__spreadValues({}, child), {\n        include: nestedIncludes,\n        attributes: []\n      })];\n      child = parent;\n    }\n    const topInclude = nestedIncludes[0];\n    const topParent = topInclude.parent;\n    const topAssociation = topInclude.association;\n    topInclude.association = void 0;\n    if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {\n      query = this.selectQuery(topInclude.through.model.getTableName(), {\n        attributes: [topInclude.through.model.primaryKeyField],\n        include: Model._validateIncludedElements({\n          model: topInclude.through.model,\n          include: [{\n            association: topAssociation.toTarget,\n            required: true,\n            where: topInclude.where,\n            include: topInclude.include\n          }]\n        }).include,\n        model: topInclude.through.model,\n        where: {\n          [Op.and]: [this.sequelize.literal([`${this.quoteTable(topParent.model.name)}.${this.quoteIdentifier(topParent.model.primaryKeyField)}`, `${this.quoteIdentifier(topInclude.through.model.name)}.${this.quoteIdentifier(topAssociation.identifierField)}`].join(\" = \")), topInclude.through.where]\n        },\n        limit: 1,\n        includeIgnoreAttributes: false\n      }, topInclude.through.model);\n    } else {\n      const isBelongsTo = topAssociation.associationType === \"BelongsTo\";\n      const sourceField = isBelongsTo ? topAssociation.identifierField : topAssociation.sourceKeyField || topParent.model.primaryKeyField;\n      const targetField = isBelongsTo ? topAssociation.sourceKeyField || topInclude.model.primaryKeyField : topAssociation.identifierField;\n      const join = [`${this.quoteIdentifier(topInclude.as)}.${this.quoteIdentifier(targetField)}`, `${this.quoteTable(topParent.as || topParent.model.name)}.${this.quoteIdentifier(sourceField)}`].join(\" = \");\n      query = this.selectQuery(topInclude.model.getTableName(), {\n        attributes: [targetField],\n        include: Model._validateIncludedElements(topInclude).include,\n        model: topInclude.model,\n        where: {\n          [Op.and]: [topInclude.where, {\n            [Op.join]: this.sequelize.literal(join)\n          }]\n        },\n        limit: 1,\n        tableAs: topInclude.as,\n        includeIgnoreAttributes: false\n      }, topInclude.model);\n    }\n    if (!topLevelInfo.options.where[Op.and]) {\n      topLevelInfo.options.where[Op.and] = [];\n    }\n    topLevelInfo.options.where[`__${includeAs.internalAs}`] = this.sequelize.literal([\"(\", query.replace(/;$/, \"\"), \")\", \"IS NOT NULL\"].join(\" \"));\n  }\n  _getRequiredClosure(include) {\n    const copy = __spreadProps(__spreadValues({}, include), {\n      attributes: [],\n      include: []\n    });\n    if (Array.isArray(include.include)) {\n      copy.include = include.include.filter(i => i.required).map(inc => this._getRequiredClosure(inc));\n    }\n    return copy;\n  }\n  getQueryOrders(options, model, subQuery) {\n    const mainQueryOrder = [];\n    const subQueryOrder = [];\n    if (Array.isArray(options.order)) {\n      for (let order of options.order) {\n        if (!Array.isArray(order)) {\n          order = [order];\n        }\n        if (subQuery && Array.isArray(order) && order[0] && !(order[0] instanceof Association) && !(typeof order[0] === \"function\" && order[0].prototype instanceof Model) && !(typeof order[0].model === \"function\" && order[0].model.prototype instanceof Model) && !(typeof order[0] === \"string\" && model && model.associations !== void 0 && model.associations[order[0]])) {\n          const field = model.rawAttributes[order[0]] ? model.rawAttributes[order[0]].field : order[0];\n          const subQueryAlias = this._getAliasForField(this.quoteIdentifier(model.name), field, options);\n          let parent = null;\n          let orderToQuote = [];\n          if (subQueryAlias === null) {\n            orderToQuote = order;\n            parent = model;\n          } else {\n            orderToQuote = [subQueryAlias, order.length > 1 ? order[1] : \"ASC\"];\n            parent = null;\n          }\n          subQueryOrder.push(this.quote(orderToQuote, parent, \"->\"));\n        }\n        if (options.attributes && model) {\n          const aliasedAttribute = options.attributes.find(attr => Array.isArray(attr) && attr[1] && (attr[0] === order[0] || attr[1] === order[0]));\n          if (aliasedAttribute) {\n            const modelName = this.quoteIdentifier(model.name);\n            const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);\n            order[0] = new Utils.Col(alias || aliasedAttribute[1]);\n          }\n        }\n        mainQueryOrder.push(this.quote(order, model, \"->\"));\n      }\n    } else if (options.order instanceof Utils.SequelizeMethod) {\n      const sql = this.quote(options.order, model, \"->\");\n      if (subQuery) {\n        subQueryOrder.push(sql);\n      }\n      mainQueryOrder.push(sql);\n    } else {\n      throw new Error(\"Order must be type of array or instance of a valid sequelize method.\");\n    }\n    return {\n      mainQueryOrder,\n      subQueryOrder\n    };\n  }\n  _throwOnEmptyAttributes(attributes) {\n    let extraInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (attributes.length > 0) return;\n    const asPart = extraInfo.as && `as ${extraInfo.as}` || \"\";\n    const namePart = extraInfo.modelName && `for model '${extraInfo.modelName}'` || \"\";\n    const message = `Attempted a SELECT query ${namePart} ${asPart} without selecting any columns`;\n    throw new sequelizeError.QueryError(message.replace(/ +/g, \" \"));\n  }\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    this._throwOnEmptyAttributes(attributes, {\n      modelName: model && model.name,\n      as: mainTableAs\n    });\n    let fragment = `SELECT ${attributes.join(\", \")} FROM ${tables}`;\n    if (mainTableAs) {\n      fragment += ` ${this.getAliasToken()} ${mainTableAs}`;\n    }\n    if (options.indexHints && this._dialect.supports.indexHints) {\n      for (const hint of options.indexHints) {\n        if (IndexHints[hint.type]) {\n          fragment += ` ${IndexHints[hint.type]} INDEX (${hint.values.map(indexName => this.quoteIdentifiers(indexName)).join(\",\")})`;\n        }\n      }\n    }\n    return fragment;\n  }\n  addLimitAndOffset(options) {\n    let fragment = \"\";\n    if (options.offset != null && options.limit == null) {\n      fragment += \" LIMIT \" + this.escape(options.offset) + \", \" + 1e13;\n    } else if (options.limit != null) {\n      if (options.offset != null) {\n        fragment += \" LIMIT \" + this.escape(options.offset) + \", \" + this.escape(options.limit);\n      } else {\n        fragment += \" LIMIT \" + this.escape(options.limit);\n      }\n    }\n    return fragment;\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let result;\n    if (Object.prototype.hasOwnProperty.call(this.OperatorMap, smth.comparator)) {\n      smth.comparator = this.OperatorMap[smth.comparator];\n    }\n    if (smth instanceof Utils.Where) {\n      let value = smth.logic;\n      let key;\n      if (smth.attribute instanceof Utils.SequelizeMethod) {\n        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);\n      } else {\n        key = `${this.quoteTable(smth.attribute.Model.name)}.${this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName)}`;\n      }\n      if (value && value instanceof Utils.SequelizeMethod) {\n        value = this.getWhereConditions(value, tableName, factory, options, prepend);\n        if (value === \"NULL\") {\n          if (smth.comparator === \"=\") {\n            smth.comparator = \"IS\";\n          }\n          if (smth.comparator === \"!=\") {\n            smth.comparator = \"IS NOT\";\n          }\n        }\n        return [key, value].join(` ${smth.comparator} `);\n      }\n      if (_.isPlainObject(value)) {\n        return this.whereItemQuery(smth.attribute, value, {\n          model: factory\n        });\n      }\n      if ([this.OperatorMap[Op.between], this.OperatorMap[Op.notBetween]].includes(smth.comparator)) {\n        value = `${this.escape(value[0])} AND ${this.escape(value[1])}`;\n      } else if (typeof value === \"boolean\") {\n        value = this.booleanValue(value);\n      } else {\n        value = this.escape(value);\n      }\n      if (value === \"NULL\") {\n        if (smth.comparator === \"=\") {\n          smth.comparator = \"IS\";\n        }\n        if (smth.comparator === \"!=\") {\n          smth.comparator = \"IS NOT\";\n        }\n      }\n      return [key, value].join(` ${smth.comparator} `);\n    }\n    if (smth instanceof Utils.Literal) {\n      return smth.val;\n    }\n    if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n      } else if (_.isPlainObject(smth.val)) {\n        result = this.whereItemsQuery(smth.val);\n      } else {\n        result = this.escape(smth.val);\n      }\n      return `CAST(${result} AS ${smth.type.toUpperCase()})`;\n    }\n    if (smth instanceof Utils.Fn) {\n      return `${smth.fn}(${smth.args.map(arg => {\n        if (arg instanceof Utils.SequelizeMethod) {\n          return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);\n        }\n        if (_.isPlainObject(arg)) {\n          return this.whereItemsQuery(arg);\n        }\n        return this.escape(typeof arg === \"string\" ? arg.replace(/\\$/g, \"$$$\") : arg);\n      }).join(\", \")})`;\n    }\n    if (smth instanceof Utils.Col) {\n      if (Array.isArray(smth.col) && !factory) {\n        throw new Error(\"Cannot call Sequelize.col() with array outside of order / group clause\");\n      }\n      if (smth.col.startsWith(\"*\")) {\n        return \"*\";\n      }\n      return this.quote(smth.col, factory);\n    }\n    return smth.toString(this, factory);\n  }\n  whereQuery(where, options) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length) {\n      return `WHERE ${query}`;\n    }\n    return \"\";\n  }\n  whereItemsQuery(where, options, binding) {\n    if (where === null || where === void 0 || Utils.getComplexSize(where) === 0) {\n      return \"\";\n    }\n    if (typeof where === \"string\") {\n      throw new Error(\"Support for `{where: 'raw query'}` has been removed.\");\n    }\n    const items = [];\n    binding = binding || \"AND\";\n    if (binding[0] !== \" \") binding = ` ${binding} `;\n    if (_.isPlainObject(where)) {\n      Utils.getComplexKeys(where).forEach(prop => {\n        const item = where[prop];\n        items.push(this.whereItemQuery(prop, item, options));\n      });\n    } else {\n      items.push(this.whereItemQuery(void 0, where, options));\n    }\n    return items.length && items.filter(item => item && item.length).join(binding) || \"\";\n  }\n  whereItemQuery(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (value === void 0) {\n      throw new Error(`WHERE parameter \"${key}\" has invalid \"undefined\" value`);\n    }\n    if (typeof key === \"string\" && key.includes(\".\") && options.model) {\n      const keyParts = key.split(\".\");\n      if (options.model.rawAttributes[keyParts[0]] && options.model.rawAttributes[keyParts[0]].type instanceof DataTypes.JSON) {\n        const tmp = {};\n        const field2 = options.model.rawAttributes[keyParts[0]];\n        _.set(tmp, keyParts.slice(1), value);\n        return this.whereItemQuery(field2.field || keyParts[0], tmp, __spreadValues({\n          field: field2\n        }, options));\n      }\n    }\n    const field = this._findField(key, options);\n    const fieldType = field && field.type || options.type;\n    const isPlainObject = _.isPlainObject(value);\n    const isArray = !isPlainObject && Array.isArray(value);\n    key = this.OperatorsAliasMap && this.OperatorsAliasMap[key] || key;\n    if (isPlainObject) {\n      value = this._replaceAliases(value);\n    }\n    const valueKeys = isPlainObject && Utils.getComplexKeys(value);\n    if (key === void 0) {\n      if (typeof value === \"string\") {\n        return value;\n      }\n      if (isPlainObject && valueKeys.length === 1) {\n        return this.whereItemQuery(valueKeys[0], value[valueKeys[0]], options);\n      }\n    }\n    if (value === null) {\n      const opValue2 = options.bindParam ? \"NULL\" : this.escape(value, field);\n      return this._joinKeyValue(key, opValue2, this.OperatorMap[Op.is], options.prefix);\n    }\n    if (!value) {\n      const opValue2 = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(key, opValue2, this.OperatorMap[Op.eq], options.prefix);\n    }\n    if (value instanceof Utils.SequelizeMethod && !(key !== void 0 && value instanceof Utils.Fn)) {\n      return this.handleSequelizeMethod(value);\n    }\n    if (key === void 0 && isArray) {\n      if (Utils.canTreatArrayAsAnd(value)) {\n        key = Op.and;\n      } else {\n        throw new Error(\"Support for literal replacements in the `where` object has been removed.\");\n      }\n    }\n    if (key === Op.or || key === Op.and || key === Op.not) {\n      return this._whereGroupBind(key, value, options);\n    }\n    if (value[Op.or]) {\n      return this._whereBind(this.OperatorMap[Op.or], key, value[Op.or], options);\n    }\n    if (value[Op.and]) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value[Op.and], options);\n    }\n    if (isArray && fieldType instanceof DataTypes.ARRAY) {\n      const opValue2 = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(key, opValue2, this.OperatorMap[Op.eq], options.prefix);\n    }\n    if (isPlainObject && fieldType instanceof DataTypes.JSON && options.json !== false) {\n      return this._whereJSON(key, value, options);\n    }\n    if (isPlainObject && valueKeys.length > 1) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value, options);\n    }\n    if (isArray) {\n      return this._whereParseSingleValueObject(key, field, Op.in, value, options);\n    }\n    if (isPlainObject) {\n      if (this.OperatorMap[valueKeys[0]]) {\n        return this._whereParseSingleValueObject(key, field, valueKeys[0], value[valueKeys[0]], options);\n      }\n      return this._whereParseSingleValueObject(key, field, this.OperatorMap[Op.eq], value, options);\n    }\n    if (key === Op.placeholder) {\n      const opValue2 = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(this.OperatorMap[key], opValue2, this.OperatorMap[Op.eq], options.prefix);\n    }\n    const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n    return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n  }\n  _findField(key, options) {\n    if (options.field) {\n      return options.field;\n    }\n    if (options.model && options.model.rawAttributes && options.model.rawAttributes[key]) {\n      return options.model.rawAttributes[key];\n    }\n    if (options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]) {\n      return options.model.fieldRawAttributesMap[key];\n    }\n  }\n  _whereGroupBind(key, value, options) {\n    const binding = key === Op.or ? this.OperatorMap[Op.or] : this.OperatorMap[Op.and];\n    const outerBinding = key === Op.not ? \"NOT \" : \"\";\n    if (Array.isArray(value)) {\n      value = value.map(item => {\n        let itemQuery = this.whereItemsQuery(item, options, this.OperatorMap[Op.and]);\n        if (itemQuery && itemQuery.length && (Array.isArray(item) || _.isPlainObject(item)) && Utils.getComplexSize(item) > 1) {\n          itemQuery = `(${itemQuery})`;\n        }\n        return itemQuery;\n      }).filter(item => item && item.length);\n      value = value.length && value.join(binding);\n    } else {\n      value = this.whereItemsQuery(value, options, binding);\n    }\n    if ((key === Op.or || key === Op.not) && !value) {\n      return \"0 = 1\";\n    }\n    return value ? `${outerBinding}(${value})` : void 0;\n  }\n  _whereBind(binding, key, value, options) {\n    if (_.isPlainObject(value)) {\n      value = Utils.getComplexKeys(value).map(prop => {\n        const item = value[prop];\n        return this.whereItemQuery(key, {\n          [prop]: item\n        }, options);\n      });\n    } else {\n      value = value.map(item => this.whereItemQuery(key, item, options));\n    }\n    value = value.filter(item => item && item.length);\n    return value.length ? `(${value.join(binding)})` : void 0;\n  }\n  _whereJSON(key, value, options) {\n    const items = [];\n    let baseKey = this.quoteIdentifier(key);\n    if (options.prefix) {\n      if (options.prefix instanceof Utils.Literal) {\n        baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;\n      } else {\n        baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;\n      }\n    }\n    Utils.getOperators(value).forEach(op => {\n      const where = {\n        [op]: value[op]\n      };\n      items.push(this.whereItemQuery(key, where, __spreadProps(__spreadValues({}, options), {\n        json: false\n      })));\n    });\n    _.forOwn(value, (item, prop) => {\n      this._traverseJSON(items, baseKey, prop, item, [prop]);\n    });\n    const result = items.join(this.OperatorMap[Op.and]);\n    return items.length > 1 ? `(${result})` : result;\n  }\n  _traverseJSON(items, baseKey, prop, item, path) {\n    let cast;\n    if (path[path.length - 1].includes(\"::\")) {\n      const tmp = path[path.length - 1].split(\"::\");\n      cast = tmp[1];\n      path[path.length - 1] = tmp[0];\n    }\n    let pathKey = this.jsonPathExtractionQuery(baseKey, path);\n    if (_.isPlainObject(item)) {\n      Utils.getOperators(item).forEach(op => {\n        const value = this._toJSONValue(item[op]);\n        let isJson = false;\n        if (typeof value === \"string\" && op === Op.contains) {\n          try {\n            JSON.stringify(value);\n            isJson = true;\n          } catch (e) {}\n        }\n        pathKey = this.jsonPathExtractionQuery(baseKey, path, isJson);\n        items.push(this.whereItemQuery(this._castKey(pathKey, value, cast), {\n          [op]: value\n        }));\n      });\n      _.forOwn(item, (value, itemProp) => {\n        this._traverseJSON(items, baseKey, itemProp, value, path.concat([itemProp]));\n      });\n      return;\n    }\n    item = this._toJSONValue(item);\n    items.push(this.whereItemQuery(this._castKey(pathKey, item, cast), {\n      [Op.eq]: item\n    }));\n  }\n  _toJSONValue(value) {\n    return value;\n  }\n  _castKey(key, value, cast, json) {\n    cast = cast || this._getJsonCast(Array.isArray(value) ? value[0] : value);\n    if (cast) {\n      return new Utils.Literal(this.handleSequelizeMethod(new Utils.Cast(new Utils.Literal(key), cast, json)));\n    }\n    return new Utils.Literal(key);\n  }\n  _getJsonCast(value) {\n    if (typeof value === \"number\") {\n      return \"double precision\";\n    }\n    if (value instanceof Date) {\n      return \"timestamptz\";\n    }\n    if (typeof value === \"boolean\") {\n      return \"boolean\";\n    }\n    return;\n  }\n  _joinKeyValue(key, value, comparator, prefix) {\n    if (!key) {\n      return value;\n    }\n    if (comparator === void 0) {\n      throw new Error(`${key} and ${value} has no comparator`);\n    }\n    key = this._getSafeKey(key, prefix);\n    return [key, value].join(` ${comparator} `);\n  }\n  _getSafeKey(key, prefix) {\n    if (key instanceof Utils.SequelizeMethod) {\n      key = this.handleSequelizeMethod(key);\n      return this._prefixKey(this.handleSequelizeMethod(key), prefix);\n    }\n    if (Utils.isColString(key)) {\n      key = key.substr(1, key.length - 2).split(\".\");\n      if (key.length > 2) {\n        key = [key.slice(0, -1).join(\"->\"), key[key.length - 1]];\n      }\n      return key.map(identifier => this.quoteIdentifier(identifier)).join(\".\");\n    }\n    return this._prefixKey(this.quoteIdentifier(key), prefix);\n  }\n  _prefixKey(key, prefix) {\n    if (prefix) {\n      if (prefix instanceof Utils.Literal) {\n        return [this.handleSequelizeMethod(prefix), key].join(\".\");\n      }\n      return [this.quoteTable(prefix), key].join(\".\");\n    }\n    return key;\n  }\n  _whereParseSingleValueObject(key, field, prop, value, options) {\n    if (prop === Op.not) {\n      if (Array.isArray(value)) {\n        prop = Op.notIn;\n      } else if (value !== null && value !== true && value !== false) {\n        prop = Op.ne;\n      }\n    }\n    let comparator = this.OperatorMap[prop] || this.OperatorMap[Op.eq];\n    switch (prop) {\n      case Op.in:\n      case Op.notIn:\n        if (value instanceof Utils.Literal) {\n          return this._joinKeyValue(key, value.val, comparator, options.prefix);\n        }\n        if (value.length) {\n          return this._joinKeyValue(key, `(${value.map(item => this.escape(item, field)).join(\", \")})`, comparator, options.prefix);\n        }\n        if (comparator === this.OperatorMap[Op.in]) {\n          return this._joinKeyValue(key, \"(NULL)\", comparator, options.prefix);\n        }\n        return \"\";\n      case Op.any:\n      case Op.all:\n        comparator = `${this.OperatorMap[Op.eq]} ${comparator}`;\n        if (value[Op.values]) {\n          return this._joinKeyValue(key, `(VALUES ${value[Op.values].map(item => `(${this.escape(item)})`).join(\", \")})`, comparator, options.prefix);\n        }\n        return this._joinKeyValue(key, `(${this.escape(value, field)})`, comparator, options.prefix);\n      case Op.between:\n      case Op.notBetween:\n        return this._joinKeyValue(key, `${this.escape(value[0], field)} AND ${this.escape(value[1], field)}`, comparator, options.prefix);\n      case Op.raw:\n        throw new Error(\"The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.\");\n      case Op.col:\n        comparator = this.OperatorMap[Op.eq];\n        value = value.split(\".\");\n        if (value.length > 2) {\n          value = [value.slice(0, -1).join(\"->\"), value[value.length - 1]];\n        }\n        return this._joinKeyValue(key, value.map(identifier => this.quoteIdentifier(identifier)).join(\".\"), comparator, options.prefix);\n      case Op.startsWith:\n      case Op.endsWith:\n      case Op.substring:\n        comparator = this.OperatorMap[Op.like];\n        if (value instanceof Utils.Literal) {\n          value = value.val;\n        }\n        let pattern = `${value}%`;\n        if (prop === Op.endsWith) pattern = `%${value}`;\n        if (prop === Op.substring) pattern = `%${value}%`;\n        return this._joinKeyValue(key, this.escape(pattern), comparator, options.prefix);\n    }\n    const escapeOptions = {\n      acceptStrings: comparator.includes(this.OperatorMap[Op.like])\n    };\n    if (_.isPlainObject(value)) {\n      if (value[Op.col]) {\n        return this._joinKeyValue(key, this.whereItemQuery(null, value), comparator, options.prefix);\n      }\n      if (value[Op.any]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.any], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.any]}`, options.prefix);\n      }\n      if (value[Op.all]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.all], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.all]}`, options.prefix);\n      }\n    }\n    if (value === null && comparator === this.OperatorMap[Op.eq]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.is], options.prefix);\n    }\n    if (value === null && comparator === this.OperatorMap[Op.ne]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.not], options.prefix);\n    }\n    return this._joinKeyValue(key, this.escape(value, field, escapeOptions), comparator, options.prefix);\n  }\n  getWhereConditions(smth, tableName, factory, options, prepend) {\n    const where = {};\n    if (Array.isArray(tableName)) {\n      tableName = tableName[0];\n      if (Array.isArray(tableName)) {\n        tableName = tableName[1];\n      }\n    }\n    options = options || {};\n    if (prepend === void 0) {\n      prepend = true;\n    }\n    if (smth && smth instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n    if (_.isPlainObject(smth)) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName,\n        type: options.type\n      });\n    }\n    if (typeof smth === \"number\" || typeof smth === \"bigint\") {\n      let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];\n      if (primaryKeys.length > 0) {\n        primaryKeys = primaryKeys[0];\n      } else {\n        primaryKeys = \"id\";\n      }\n      where[primaryKeys] = smth;\n      return this.whereItemsQuery(where, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    if (typeof smth === \"string\") {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    if (Buffer.isBuffer(smth)) {\n      return this.escape(smth);\n    }\n    if (Array.isArray(smth)) {\n      if (smth.length === 0 || smth.length > 0 && smth[0].length === 0) return \"1=1\";\n      if (Utils.canTreatArrayAsAnd(smth)) {\n        const _smth = {\n          [Op.and]: smth\n        };\n        return this.getWhereConditions(_smth, tableName, factory, options, prepend);\n      }\n      throw new Error(\"Support for literal replacements in the `where` object has been removed.\");\n    }\n    if (smth === null) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    return \"1=1\";\n  }\n  parseConditionObject(conditions, path) {\n    path = path || [];\n    return _.reduce(conditions, (result, value, key) => {\n      if (_.isObject(value)) {\n        return result.concat(this.parseConditionObject(value, path.concat(key)));\n      }\n      result.push({\n        path: path.concat(key),\n        value\n      });\n      return result;\n    }, []);\n  }\n  booleanValue(value) {\n    return value;\n  }\n  authTestQuery() {\n    return \"SELECT 1+1 AS result\";\n  }\n}\nObject.assign(QueryGenerator.prototype, require(\"./query-generator/operators\"));\nObject.assign(QueryGenerator.prototype, require(\"./query-generator/transaction\"));\nmodule.exports = QueryGenerator;","map":{"version":3,"mappings":"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","names":["util","require","_","uuidv4","v4","Utils","deprecations","SqlString","DataTypes","Model","Association","BelongsTo","BelongsToMany","HasMany","Op","sequelizeError","IndexHints","constructor","options","sequelize","Error","_dialect","dialect","name","_initQuoteIdentifier","extractTableDetails","tableName","schema","isPlainObject","delimiter","addSchema","param","_schema","self","table","_schemaDelimiter","toString","quoteTable","dropSchema","dropTableQuery","describeTableQuery","schemaDelimiter","renameTableQuery","before","after","populateInsertQueryReturnIntoBinds","insertQuery","valueHash","modelAttributes","defaults","modelAttributeMap","bind","fields","returningModelAttributes","returnTypes","values","quotedTable","bindParam","returnAttributes","query","valueQuery","emptyQuery","outputFragment","returningFragment","identityWrapperRequired","tmpTable","each","attribute","key","field","supports","returnValues","returnIntoValues","returning","generateReturnValues","push","returnFields","get","searchPath","EXCEPTION","exception","removeNullValuesFromHash","omitNull","Object","prototype","hasOwnProperty","call","value","quoteIdentifier","autoIncrement","defaultValue","splice","DEFAULT","escape","SequelizeMethod","context","format","onDuplicateKeyUpdate","inserts","updateOnDuplicate","conflictKeys","upsertKeys","map","attr","updateKeys","join","isEmpty","valueKeys","replacements","ignoreDuplicates","onConflictDoNothing","attributes","output","dropFunction","length","replace","selectQuery","finalTable","identityInsert","result","bulkInsertQuery","fieldValueHashes","fieldMappedAttributes","tuples","serials","allAttributes","fieldValueHash","forOwn","includes","bulkDefault","joinSQLFragments","updateQuery","attrValueHash","where","suffix","limit","keys","mapToModel","update","whereOptions","__spreadProps","whereQuery","trim","arithmeticQuery","operator","incrementAmountsByField","extraAttributesToBeUpdated","updateSetSqlFragments","incrementAmount","quotedField","escapedAmount","newValue","escapedValue","addIndexQuery","rawTablename","Array","isArray","prefix","fieldsSql","handleSequelizeMethod","inspect","index","collate","order","nameIndex","_conformIndex","type","quoteIdentifiers","concurrently","ind","indexViaAlter","concat","unique","using","parser","compact","addConstraintQuery","getConstraintSnippet","constraintSnippet","constraintName","fieldsSqlQuotedString","fieldsSqlString","toUpperCase","whereItemsQuery","references","quotedReferences","f","referencesSnippet","onUpdate","onDelete","deferrable","deferConstraintsQuery","removeConstraintQuery","quote","collection","parent","connector","validOrderOptions","forEach","item2","previous","previousAssociation","previousModel","target","model","as","through","getAssociationForAlias","orderIndex","indexOf","literal","associations","rawAttributes","itemSplit","split","JSON","identifier","path","slice","jsonPathExtractionQuery","collectionLength","tableNames","item","i","_modelAttribute","sql","collectionItem","fieldName","raw","_quoteIdentifier","force","identifiers","head","tail","quoteAttribute","getAliasToken","alias","isObject","schemas","validate","stringify","simpleEscape","escVal","timezone","operation","identity","typeValidation","isList","error","ValidationError","errors","ValidationErrorItem","message","isIdentifierQuoted","test","column","isJson","paths","toPath","pathStr","quotedColumn","subPath","addTicks","__","digit","mainQueryItems","subQueryItems","subQuery","hasMultiAssociation","main","mainTable","quotedName","topLevelInfo","names","mainJoinQueries","subJoinQueries","minifyAliases","aliasesMapping","Map","aliasesByTable","includeAliases","tableAs","t","keyAtt","primaryKeyAttributes","some","escapeAttributes","include","groupedLimit","separate","joinQueries","generateInclude","externalAs","internalAs","mainQuery","uniq","selectFromTableFragment","__spreadValues","groupedLimitOrder","whereKey","groupedTableName","on","foreignKeyField","manyFromSource","groupedLimitOptions","_validateIncludedElements","association","duplicating","required","placeholder","hasJoin","includeMap","assign","includeNames","topLevelOrderByRequired","baseQuery","offset","placeHolder","whereItemQuery","splicePos","groupWhere","foreignIdentifierField","spliceStr","getWhereConditions","startsWith","group","aliasGrouping","having","orders","getQueryOrders","mainQueryOrder","subQueryOrder","limitOrder","addLimitAndOffset","_throwOnEmptyAttributes","modelName","lock","level","lockKey","forShare","lockOf","of","skipLocked","src","_getAliasForField","mainTableAs","addTable","noRawAttributes","_getMinifiedAlias","TICK_CHAR","dotNotation","parentTableName","mainChildIncludes","subChildIncludes","requiredMismatch","includeAs","joinQuery","keysEscaped","includeIgnoreAttributes","_expandAttributes","mapFinderOptions","includeAttributes","attrAs","verbatim","Literal","Cast","Fn","attr2","val","generateThroughJoin","_generateSubQueryFilter","generateJoin","childInclude","_pseudo","childJoinQueries","body","condition","match","minifiedAlias","size","set","parentIsTop","$parent","joinWhere","left","source","attrLeft","sourceKeyAttribute","primaryKeyAttribute","fieldLeft","identifierField","asLeft","right","tableRight","getTableName","fieldRight","targetIdentifier","asRight","joinOn","subqueryAttributes","dbIdentifier","joinSource","or","VIRTUAL","hasTrigger","tmpTableTrigger","tmpColumns","toSql","throughTable","throughAs","externalThroughAs","throughAttributes","tableSource","identSource","tableTarget","identTarget","attrTarget","targetKeyField","joinType","joinBody","joinCondition","attrSource","sourceKey","sourceJoinOn","targetJoinOn","throughWhere","targetWhere","sourceKeyField","mainModel","aliasedSource","subQueryFilter","child","nestedIncludes","_getRequiredClosure","topInclude","topParent","topAssociation","primaryKeyField","toTarget","and","isBelongsTo","associationType","sourceField","targetField","copy","filter","inc","subQueryAlias","orderToQuote","aliasedAttribute","find","Col","extraInfo","asPart","namePart","QueryError","tables","fragment","indexHints","hint","indexName","smth","factory","prepend","OperatorMap","comparator","Where","logic","between","notBetween","booleanValue","fn","args","arg","col","binding","getComplexSize","items","getComplexKeys","prop","keyParts","tmp","field2","_findField","fieldType","OperatorsAliasMap","_replaceAliases","opValue2","_joinKeyValue","is","eq","canTreatArrayAsAnd","not","_whereGroupBind","_whereBind","ARRAY","json","_whereJSON","_whereParseSingleValueObject","in","opValue","fieldRawAttributesMap","outerBinding","itemQuery","baseKey","getOperators","op","_traverseJSON","cast","pathKey","_toJSONValue","contains","e","_castKey","itemProp","_getJsonCast","Date","_getSafeKey","_prefixKey","isColString","substr","notIn","ne","any","all","endsWith","substring","like","pattern","escapeOptions","acceptStrings","primaryKeys","Buffer","isBuffer","_smth","parseConditionObject","conditions","reduce","authTestQuery","QueryGenerator","module","exports"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\abstract\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst uuidv4 = require('uuid').v4;\n\nconst Utils = require('../../utils');\nconst deprecations = require('../../utils/deprecations');\nconst SqlString = require('../../sql-string');\nconst DataTypes = require('../../data-types');\nconst Model = require('../../model');\nconst Association = require('../../associations/base');\nconst BelongsTo = require('../../associations/belongs-to');\nconst BelongsToMany = require('../../associations/belongs-to-many');\nconst HasMany = require('../../associations/has-many');\nconst Op = require('../../operators');\nconst sequelizeError = require('../../errors');\nconst IndexHints = require('../../index-hints');\n\n\n/**\n * Abstract Query Generator\n *\n * @private\n */\nclass QueryGenerator {\n  constructor(options) {\n    if (!options.sequelize) throw new Error('QueryGenerator initialized without options.sequelize');\n    if (!options._dialect) throw new Error('QueryGenerator initialized without options._dialect');\n\n    this.sequelize = options.sequelize;\n    this.options = options.sequelize.options;\n\n    // dialect name\n    this.dialect = options._dialect.name;\n    this._dialect = options._dialect;\n\n    // wrap quoteIdentifier with common logic\n    this._initQuoteIdentifier();\n  }\n\n  extractTableDetails(tableName, options) {\n    options = options || {};\n    tableName = tableName || {};\n    return {\n      schema: tableName.schema || options.schema || this.options.schema || 'public',\n      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,\n      delimiter: tableName.delimiter || options.delimiter || '.'\n    };\n  }\n\n  addSchema(param) {\n    if (!param._schema) return param.tableName || param;\n    const self = this;\n    return {\n      tableName: param.tableName || param,\n      table: param.tableName || param,\n      name: param.name || param,\n      schema: param._schema,\n      delimiter: param._schemaDelimiter || '.',\n      toString() {\n        return self.quoteTable(this);\n      }\n    };\n  }\n\n  dropSchema(tableName, options) {\n    return this.dropTableQuery(tableName, options);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `DESCRIBE ${table};`;\n  }\n\n  dropTableQuery(tableName) {\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;\n  }\n\n  renameTableQuery(before, after) {\n    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;\n  }\n\n  /**\n   * Helper method for populating the returning into bind information\n   * that is needed by some dialects (currently Oracle)\n   *\n   * @private\n   */\n  populateInsertQueryReturnIntoBinds() {\n    // noop by default\n  }\n\n  /**\n   * Returns an insert into command\n   *\n   * @param {string} table\n   * @param {object} valueHash       attribute value pairs\n   * @param {object} modelAttributes\n   * @param {object} [options]\n   *\n   * @private\n   */\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    const modelAttributeMap = {};\n    const bind = options.bind || [];\n    const fields = [];\n    const returningModelAttributes = [];\n    const returnTypes = [];\n    const values = [];\n    const quotedTable = this.quoteTable(table);\n    const bindParam = options.bindParam === undefined ? this.bindParam(bind) : options.bindParam;\n    const returnAttributes = [];\n    let query;\n    let valueQuery = '';\n    let emptyQuery = '';\n    let outputFragment = '';\n    let returningFragment = '';\n    let identityWrapperRequired = false;\n    let tmpTable = ''; //tmpTable declaration for trigger\n\n    if (modelAttributes) {\n      _.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    if (this._dialect.supports['DEFAULT VALUES']) {\n      emptyQuery += ' DEFAULT VALUES';\n    } else if (this._dialect.supports['VALUES ()']) {\n      emptyQuery += ' VALUES ()';\n    }\n\n    if ((this._dialect.supports.returnValues || this._dialect.supports.returnIntoValues) && options.returning) {\n      const returnValues = this.generateReturnValues(modelAttributes, options);\n\n      returningModelAttributes.push(...returnValues.returnFields);\n      // Storing the returnTypes for dialects that need to have returning into bind information for outbinds\n      if (this._dialect.supports.returnIntoValues) {\n        returnTypes.push(...returnValues.returnTypes);\n      }\n      returningFragment = returnValues.returningFragment;\n      tmpTable = returnValues.tmpTable || '';\n      outputFragment = returnValues.outputFragment || '';\n    }\n\n    if (_.get(this, ['sequelize', 'options', 'dialectOptions', 'prependSearchPath']) || options.searchPath) {\n      // Not currently supported with search path (requires output of multiple queries)\n      options.bindParam = false;\n    }\n\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      // Not currently supported with bind parameters (requires output of multiple queries)\n      options.bindParam = false;\n    }\n\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (const key in valueHash) {\n      if (Object.prototype.hasOwnProperty.call(valueHash, key)) {\n        const value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n\n        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && value == null) {\n          if (!this._dialect.supports.autoIncrement.defaultValue) {\n            fields.splice(-1, 1);\n          } else if (this._dialect.supports.DEFAULT) {\n            values.push('DEFAULT');\n          } else {\n            values.push(this.escape(null));\n          }\n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {\n            identityWrapperRequired = true;\n          }\n\n          if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n            values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));\n          } else {\n            values.push(this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }, bindParam));\n          }\n        }\n      }\n    }\n\n    let onDuplicateKeyUpdate = '';\n\n    // `options.updateOnDuplicate` is the list of field names to update if a duplicate key is hit during the insert.  It\n    // contains just the field names.  This option is _usually_ explicitly set by the corresponding query-interface\n    // upsert function.\n    if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {\n      if (this._dialect.supports.inserts.updateOnDuplicate == ' ON CONFLICT DO UPDATE SET') { // postgres / sqlite\n        // If no conflict target columns were specified, use the primary key names from options.upsertKeys\n        const conflictKeys = options.upsertKeys.map(attr => this.quoteIdentifier(attr));\n        const updateKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);\n        onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(',')})`;\n        // if update keys are provided, then apply them here.  if there are no updateKeys provided, then do not try to\n        // do an update.  Instead, fall back to DO NOTHING.\n        onDuplicateKeyUpdate += _.isEmpty(updateKeys) ? ' DO NOTHING ' : ` DO UPDATE SET ${updateKeys.join(',')}`;\n      } else {\n        const valueKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);\n        // the rough equivalent to ON CONFLICT DO NOTHING in mysql, etc is ON DUPLICATE KEY UPDATE id = id\n        // So, if no update values were provided, fall back to the identifier columns provided in the upsertKeys array.\n        // This will be the primary key in most cases, but it could be some other constraint.\n        if (_.isEmpty(valueKeys) && options.upsertKeys) {\n          valueKeys.push(...options.upsertKeys.map(attr => `${this.quoteIdentifier(attr)}=${this.quoteIdentifier(attr)}`));\n        }\n\n        // edge case... but if for some reason there were no valueKeys, and there were also no upsertKeys... then we\n        // can no longer build the requested query without a syntax error.  Let's throw something more graceful here\n        // so the devs know what the problem is.\n        if (_.isEmpty(valueKeys)) {\n          throw new Error('No update values found for ON DUPLICATE KEY UPDATE clause, and no identifier fields could be found to use instead.');\n        }\n        onDuplicateKeyUpdate += `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(',')}`;\n      }\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : '',\n      onConflictDoNothing: options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : '',\n      attributes: fields.join(','),\n      output: outputFragment,\n      values: values.join(','),\n      tmpTable\n    };\n\n    valueQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable} (${replacements.attributes})${replacements.output} VALUES (${replacements.values})${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${valueQuery}`;\n    emptyQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable}${replacements.output}${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${emptyQuery}`;\n\n    // Mostly for internal use, so we expect the user to know what he's doing!\n    // pg_temp functions are private per connection, so we never risk this function interfering with another one.\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      const dropFunction = 'DROP FUNCTION IF EXISTS pg_temp.testfunc()';\n\n      if (returningModelAttributes.length === 0) {\n        returningModelAttributes.push('*');\n      }\n\n      const delimiter = `$func_${uuidv4().replace(/-/g, '')}$`;\n      const selectQuery = `SELECT (testfunc.response).${returningModelAttributes.join(', (testfunc.response).')}, testfunc.sequelize_caught_exception FROM pg_temp.testfunc();`;\n\n      options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';\n      valueQuery = `CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response ${quotedTable}, OUT sequelize_caught_exception text) RETURNS RECORD AS ${delimiter} BEGIN ${valueQuery} RETURNING * INTO response; EXCEPTION ${options.exception} END ${delimiter} LANGUAGE plpgsql; ${selectQuery} ${dropFunction}`;\n    } else {\n      valueQuery += returningFragment;\n      emptyQuery += returningFragment;\n    }\n\n    if (this._dialect.supports.returnIntoValues && options.returning) {\n      // Populating the returnAttributes array and performing operations needed for output binds of insertQuery\n      this.populateInsertQueryReturnIntoBinds(returningModelAttributes, returnTypes, bind.length, returnAttributes, options);\n    }\n\n    query = `${replacements.attributes.length ? valueQuery : emptyQuery}${returnAttributes.join(',')};`;\n    if (this._dialect.supports.finalTable) {\n      query = `SELECT * FROM FINAL TABLE(${ replacements.attributes.length ? valueQuery : emptyQuery });`;\n    }\n    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {\n      query = `SET IDENTITY_INSERT ${quotedTable} ON; ${query} SET IDENTITY_INSERT ${quotedTable} OFF;`;\n    }\n\n    // Used by Postgres upsertQuery and calls to here with options.exception set to true\n    const result = { query };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns an insert into command for multiple values.\n   *\n   * @param {string} tableName\n   * @param {object} fieldValueHashes\n   * @param {object} options\n   * @param {object} fieldMappedAttributes\n   *\n   * @private\n   */\n  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {\n    options = options || {};\n    fieldMappedAttributes = fieldMappedAttributes || {};\n\n    const tuples = [];\n    const serials = {};\n    const allAttributes = [];\n    let onDuplicateKeyUpdate = '';\n\n    for (const fieldValueHash of fieldValueHashes) {\n      _.forOwn(fieldValueHash, (value, key) => {\n        if (!allAttributes.includes(key)) {\n          allAttributes.push(key);\n        }\n        if (\n          fieldMappedAttributes[key]\n          && fieldMappedAttributes[key].autoIncrement === true\n        ) {\n          serials[key] = true;\n        }\n      });\n    }\n\n    for (const fieldValueHash of fieldValueHashes) {\n      const values = allAttributes.map(key => {\n        if (\n          this._dialect.supports.bulkDefault\n          && serials[key] === true\n        ) {\n          // fieldValueHashes[key] ?? 'DEFAULT'\n          return fieldValueHash[key] != null ? fieldValueHash[key] : 'DEFAULT';\n        }\n\n        return this.escape(fieldValueHash[key], fieldMappedAttributes[key], { context: 'INSERT' });\n      });\n\n      tuples.push(`(${values.join(',')})`);\n    }\n\n    // `options.updateOnDuplicate` is the list of field names to update if a duplicate key is hit during the insert.  It\n    // contains just the field names.  This option is _usually_ explicitly set by the corresponding query-interface\n    // upsert function.\n    if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {\n      if (this._dialect.supports.inserts.updateOnDuplicate == ' ON CONFLICT DO UPDATE SET') { // postgres / sqlite\n        // If no conflict target columns were specified, use the primary key names from options.upsertKeys\n        const conflictKeys = options.upsertKeys.map(attr => this.quoteIdentifier(attr));\n        const updateKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);\n        onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(',')}) DO UPDATE SET ${updateKeys.join(',')}`;\n      } else { // mysql / maria\n        const valueKeys = options.updateOnDuplicate.map(attr => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);\n        onDuplicateKeyUpdate = `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(',')}`;\n      }\n    }\n\n    const ignoreDuplicates = options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : '';\n    const attributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n    const onConflictDoNothing = options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : '';\n    let returning = '';\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(fieldMappedAttributes, options);\n\n      returning += returnValues.returningFragment;\n    }\n\n    return Utils.joinSQLFragments([\n      'INSERT',\n      ignoreDuplicates,\n      'INTO',\n      this.quoteTable(tableName),\n      `(${attributes})`,\n      'VALUES',\n      tuples.join(','),\n      onDuplicateKeyUpdate,\n      onConflictDoNothing,\n      returning,\n      ';'\n    ]);\n  }\n\n  /**\n   * Returns an update query\n   *\n   * @param {string} tableName\n   * @param {object} attrValueHash\n   * @param {object} where A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer\n   * @param {object} options\n   * @param {object} attributes\n   *\n   * @private\n   */\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const values = [];\n    const bind = [];\n    const modelAttributeMap = {};\n    let outputFragment = '';\n    let tmpTable = ''; // tmpTable declaration for trigger\n    let suffix = '';\n\n    if (_.get(this, ['sequelize', 'options', 'dialectOptions', 'prependSearchPath']) || options.searchPath) {\n      // Not currently supported with search path (requires output of multiple queries)\n      options.bindParam = false;\n    }\n\n    const bindParam = options.bindParam === undefined ? this.bindParam(bind) : options.bindParam;\n\n    if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {\n      if (!['mssql', 'db2', 'oracle'].includes(this.dialect)) {\n        suffix = ` LIMIT ${this.escape(options.limit)} `;\n      } else if (this.dialect === 'oracle') {\n        // This cannot be setted in where because rownum will be quoted\n        if (where && (where.length && where.length > 0 || Object.keys(where).length > 0)) {\n          // If we have a where clause, we add AND\n          suffix += ' AND ';\n        } else {\n          // No where clause, we add where\n          suffix += ' WHERE ';\n        }\n        suffix += `rownum <= ${this.escape(options.limit)} `;\n      }\n    }\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      suffix += returnValues.returningFragment;\n      tmpTable = returnValues.tmpTable || '';\n      outputFragment = returnValues.outputFragment || '';\n\n      // ensure that the return output is properly mapped to model fields.\n      if (!this._dialect.supports.returnValues.output && options.returning) {\n        options.mapToModel = true;\n      }\n    }\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      if (modelAttributeMap && modelAttributeMap[key] &&\n        modelAttributeMap[key].autoIncrement === true &&\n        !this._dialect.supports.autoIncrement.update) {\n        // not allowed to update identity column\n        continue;\n      }\n\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    const whereOptions = { ...options, bindParam };\n\n    if (values.length === 0) {\n      return '';\n    }\n\n    const query = `${tmpTable}UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')}${outputFragment} ${this.whereQuery(where, whereOptions)}${suffix}`.trim();\n    // Used by Postgres upsertQuery and calls to here with options.exception set to true\n    const result = { query };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n    return result;\n  }\n\n  /**\n   * Returns an update query using arithmetic operator\n   *\n   * @param {string} operator                    String with the arithmetic operator (e.g. '+' or '-')\n   * @param {string} tableName                   Name of the table\n   * @param {object} where                       A plain-object with conditions (e.g. {name: 'foo'}) OR an ID as integer\n   * @param {object} incrementAmountsByField     A plain-object with attribute-value-pairs\n   * @param {object} extraAttributesToBeUpdated  A plain-object with attribute-value-pairs\n   * @param {object} options\n   *\n   * @private\n   */\n  arithmeticQuery(operator, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = options || {};\n    _.defaults(options, { returning: true });\n\n    extraAttributesToBeUpdated = Utils.removeNullValuesFromHash(extraAttributesToBeUpdated, this.options.omitNull);\n\n    let outputFragment = '';\n    let returningFragment = '';\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      const returnValues = this.generateReturnValues(null, options);\n\n      outputFragment = returnValues.outputFragment;\n      returningFragment = returnValues.returningFragment;\n    }\n\n    const updateSetSqlFragments = [];\n    for (const field in incrementAmountsByField) {\n      const incrementAmount = incrementAmountsByField[field];\n      const quotedField = this.quoteIdentifier(field);\n      const escapedAmount = this.escape(incrementAmount);\n      updateSetSqlFragments.push(`${quotedField}=${quotedField}${operator} ${escapedAmount}`);\n    }\n    for (const field in extraAttributesToBeUpdated) {\n      const newValue = extraAttributesToBeUpdated[field];\n      const quotedField = this.quoteIdentifier(field);\n      const escapedValue = this.escape(newValue);\n      updateSetSqlFragments.push(`${quotedField}=${escapedValue}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'UPDATE',\n      this.quoteTable(tableName),\n      'SET',\n      updateSetSqlFragments.join(','),\n      outputFragment,\n      this.whereQuery(where),\n      returningFragment\n    ]);\n  }\n\n  /*\n    Returns an add index query.\n    Parameters:\n      - tableName -> Name of an existing table, possibly with schema.\n      - options:\n        - type: UNIQUE|FULLTEXT|SPATIAL\n        - name: The name of the index. Default is <table>_<attr1>_<attr2>\n        - fields: An array of attributes as string or as hash.\n                  If the attribute is a hash, it must have the following content:\n                  - name: The name of the attribute/column\n                  - length: An integer. Optional\n                  - order: 'ASC' or 'DESC'. Optional\n        - parser\n        - using\n        - operator\n        - concurrently: Pass CONCURRENT so other operations run while the index is created\n      - rawTablename, the name of the table, without schema. Used to create the name of the index\n   @private\n  */\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    options = options || {};\n\n    if (!Array.isArray(attributes)) {\n      options = attributes;\n      attributes = undefined;\n    } else {\n      options.fields = attributes;\n    }\n\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && typeof options.prefix === 'string') {\n      options.prefix = options.prefix.replace(/\\./g, '_');\n      options.prefix = options.prefix.replace(/(\"|')/g, '');\n    }\n\n    const fieldsSql = options.fields.map(field => {\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n      if (typeof field === 'string') {\n        field = {\n          name: field\n        };\n      }\n      let result = '';\n\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${util.inspect(field)}`);\n      }\n\n      result += this.quoteIdentifier(field.name);\n\n      if (this._dialect.supports.index.collate && field.collate) {\n        result += ` COLLATE ${this.quoteIdentifier(field.collate)}`;\n      }\n\n      if (this._dialect.supports.index.operator) {\n        const operator = field.operator || options.operator;\n        if (operator) {\n          result += ` ${operator}`;\n        }\n      }\n\n      if (this._dialect.supports.index.length && field.length) {\n        result += `(${field.length})`;\n      }\n\n      if (field.order) {\n        result += ` ${field.order}`;\n      }\n\n      return result;\n    });\n\n    if (!options.name) {\n      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)\n      // All calls that go through sequelize should already have a name\n      options = Utils.nameIndex(options, options.prefix);\n    }\n\n    options = Model._conformIndex(options);\n\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? 'CONCURRENTLY' : undefined;\n    let ind;\n    if (this._dialect.supports.indexViaAlter) {\n      ind = [\n        'ALTER TABLE',\n        tableName,\n        concurrently,\n        'ADD'\n      ];\n    } else {\n      ind = ['CREATE'];\n    }\n\n    ind = ind.concat(\n      options.unique ? 'UNIQUE' : '',\n      options.type, 'INDEX',\n      !this._dialect.supports.indexViaAlter ? concurrently : undefined,\n      this.quoteIdentifiers(options.name),\n      this._dialect.supports.index.using === 1 && options.using ? `USING ${options.using}` : '',\n      !this._dialect.supports.indexViaAlter ? `ON ${tableName}` : undefined,\n      this._dialect.supports.index.using === 2 && options.using ? `USING ${options.using}` : '',\n      `(${fieldsSql.join(', ')})`,\n      this._dialect.supports.index.parser && options.parser ? `WITH PARSER ${options.parser}` : undefined,\n      this._dialect.supports.index.where && options.where ? options.where : undefined\n    );\n\n    return _.compact(ind).join(' ');\n  }\n\n  addConstraintQuery(tableName, options) {\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      tableName,\n      'ADD',\n      this.getConstraintSnippet(tableName, options || {}),\n      ';'\n    ]);\n  }\n\n  getConstraintSnippet(tableName, options) {\n    let constraintSnippet, constraintName;\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      }\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${field}`);\n      }\n\n      return this.quoteIdentifier(field.name);\n    });\n\n    const fieldsSqlQuotedString = fieldsSql.join(', ');\n    const fieldsSqlString = fieldsSql.join('_');\n\n    switch (options.type.toUpperCase()) {\n      case 'UNIQUE':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        break;\n      case 'CHECK':\n        options.where = this.whereItemsQuery(options.where);\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;\n        break;\n      case 'DEFAULT':\n        if (options.defaultValue === undefined) {\n          throw new Error('Default value must be specified for DEFAULT CONSTRAINT');\n        }\n\n        if (this._dialect.name !== 'mssql') {\n          throw new Error('Default constraints are supported only for MSSQL dialect.');\n        }\n\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;\n        break;\n      case 'PRIMARY KEY':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        break;\n      case 'FOREIGN KEY':\n        const references = options.references;\n        if (!references || !references.table || !(references.field || references.fields)) {\n          throw new Error('references object with table and field must be specified');\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);\n        const quotedReferences =\n          typeof references.field !== 'undefined'\n            ? this.quoteIdentifier(references.field)\n            : references.fields.map(f => this.quoteIdentifier(f)).join(', ');\n        const referencesSnippet = `${this.quoteTable(references.table)} (${quotedReferences})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n        break;\n      default: throw new Error(`${options.type} is invalid.`);\n    }\n\n    if (options.deferrable && ['UNIQUE', 'PRIMARY KEY', 'FOREIGN KEY'].includes(options.type.toUpperCase())) {\n      constraintSnippet += ` ${this.deferConstraintsQuery(options)}`;\n    }\n\n    return constraintSnippet;\n  }\n\n  removeConstraintQuery(tableName, constraintName) {\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      tableName,\n      'DROP CONSTRAINT',\n      this.quoteIdentifiers(constraintName)\n    ]);\n  }\n\n  /*\n    Quote an object based on its type. This is a more general version of quoteIdentifiers\n    Strings: should proxy to quoteIdentifiers\n    Arrays:\n      * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]\n        Each <model> can be a model, or an object {model: Model, as: String}, matching include, or an\n        association object, or the name of an association.\n      * Zero or more models can be included in the array and are used to trace a path through the tree of\n        included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL\n        and quotes it.\n      * If a single string is appended to end of array, it is quoted.\n        If two strings appended, the 1st string is quoted, the 2nd string unquoted.\n    Objects:\n      * If raw is set, that value should be returned verbatim, without quoting\n      * If fn is set, the string should start with the value of fn, starting paren, followed by\n        the values of cols (which is assumed to be an array), quoted and joined with ', ',\n        unless they are themselves objects\n      * If direction is set, should be prepended\n\n    Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could\n    potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)\n   @private\n  */\n  quote(collection, parent, connector) {\n    // init\n    const validOrderOptions = [\n      'ASC',\n      'DESC',\n      'ASC NULLS LAST',\n      'DESC NULLS LAST',\n      'ASC NULLS FIRST',\n      'DESC NULLS FIRST',\n      'NULLS FIRST',\n      'NULLS LAST'\n    ];\n\n    // default\n    connector = connector || '.';\n\n    // just quote as identifiers if string\n    if (typeof collection === 'string') {\n      return this.quoteIdentifiers(collection);\n    }\n    if (Array.isArray(collection)) {\n      // iterate through the collection and mutate objects into associations\n      collection.forEach((item, index) => {\n        const previous = collection[index - 1];\n        let previousAssociation;\n        let previousModel;\n\n        // set the previous as the parent when previous is undefined or the target of the association\n        if (!previous && parent !== undefined) {\n          previousModel = parent;\n        } else if (previous && previous instanceof Association) {\n          previousAssociation = previous;\n          previousModel = previous.target;\n        }\n\n        // if the previous item is a model, then attempt getting an association\n        if (previousModel && previousModel.prototype instanceof Model) {\n          let model;\n          let as;\n\n          if (typeof item === 'function' && item.prototype instanceof Model) {\n            // set\n            model = item;\n          } else if (_.isPlainObject(item) && item.model && item.model.prototype instanceof Model) {\n            // set\n            model = item.model;\n            as = item.as;\n          }\n\n          if (model) {\n            // set the as to either the through name or the model name\n            if (!as && previousAssociation && previousAssociation instanceof Association && previousAssociation.through && previousAssociation.through.model === model) {\n              // get from previous association\n              item = new Association(previousModel, model, {\n                as: model.name\n              });\n            } else {\n              // get association from previous model\n              item = previousModel.getAssociationForAlias(model, as);\n\n              // attempt to use the model name if the item is still null\n              if (!item) {\n                item = previousModel.getAssociationForAlias(model, model.name);\n              }\n            }\n\n            // make sure we have an association\n            if (!(item instanceof Association)) {\n              throw new Error(util.format('Unable to find a valid association for model, \\'%s\\'', model.name));\n            }\n          }\n        }\n\n        if (typeof item === 'string') {\n          // get order index\n          const orderIndex = validOrderOptions.indexOf(item.toUpperCase());\n\n          // see if this is an order\n          if (index > 0 && orderIndex !== -1) {\n            item = this.sequelize.literal(` ${validOrderOptions[orderIndex]}`);\n          } else if (previousModel && previousModel.prototype instanceof Model) {\n            // only go down this path if we have preivous model and check only once\n            if (previousModel.associations !== undefined && previousModel.associations[item]) {\n              // convert the item to an association\n              item = previousModel.associations[item];\n            } else if (previousModel.rawAttributes !== undefined && previousModel.rawAttributes[item] && item !== previousModel.rawAttributes[item].field) {\n              // convert the item attribute from its alias\n              item = previousModel.rawAttributes[item].field;\n            } else if (\n              item.includes('.')\n              && previousModel.rawAttributes !== undefined\n            ) {\n              const itemSplit = item.split('.');\n\n              if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes.JSON) {\n                // just quote identifiers for now\n                const identifier = this.quoteIdentifiers(`${previousModel.name}.${previousModel.rawAttributes[itemSplit[0]].field}`);\n\n                // get path\n                const path = itemSplit.slice(1);\n\n                // extract path\n                item = this.jsonPathExtractionQuery(identifier, path);\n\n                // literal because we don't want to append the model name when string\n                item = this.sequelize.literal(item);\n              }\n            }\n          }\n        }\n\n        collection[index] = item;\n      }, this);\n\n      // loop through array, adding table names of models to quoted\n      const collectionLength = collection.length;\n      const tableNames = [];\n      let item;\n      let i = 0;\n\n      for (i = 0; i < collectionLength - 1; i++) {\n        item = collection[i];\n        if (typeof item === 'string' || item._modelAttribute || item instanceof Utils.SequelizeMethod) {\n          break;\n        } else if (item instanceof Association) {\n          tableNames[i] = item.as;\n        }\n      }\n\n      // start building sql\n      let sql = '';\n\n      if (i > 0) {\n        sql += `${this.quoteIdentifier(tableNames.join(connector))}.`;\n      } else if (typeof collection[0] === 'string' && parent) {\n        sql += `${this.quoteIdentifier(parent.name)}.`;\n      }\n\n      // loop through everything past i and append to the sql\n      collection.slice(i).forEach(collectionItem => {\n        sql += this.quote(collectionItem, parent, connector);\n      }, this);\n\n      return sql;\n    }\n    if (collection._modelAttribute) {\n      return `${this.quoteTable(collection.Model.name)}.${this.quoteIdentifier(collection.fieldName)}`;\n    }\n    if (collection instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(collection);\n    }\n    if (_.isPlainObject(collection) && collection.raw) {\n      // simple objects with raw is no longer supported\n      throw new Error('The `{raw: \"...\"}` syntax is no longer supported.  Use `sequelize.literal` instead.');\n    }\n    throw new Error(`Unknown structure passed to order / group: ${util.inspect(collection)}`);\n  }\n\n  _initQuoteIdentifier() {\n    this._quoteIdentifier = this.quoteIdentifier;\n    this.quoteIdentifier = function(identifier, force) {\n      if (identifier === '*') return identifier;\n      return this._quoteIdentifier(identifier, force);\n    };\n  }\n\n  /**\n   * Adds quotes to identifier\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    throw new Error(`quoteIdentifier for Dialect \"${this.dialect}\" is not implemented`);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part.\n   *\n   * @param {string} identifiers\n   *\n   * @returns {string}\n   */\n  quoteIdentifiers(identifiers) {\n    if (identifiers.includes('.')) {\n      identifiers = identifiers.split('.');\n\n      const head = identifiers.slice(0, identifiers.length - 1).join('->');\n      const tail = identifiers[identifiers.length - 1];\n\n      return `${this.quoteIdentifier(head)}.${this.quoteIdentifier(tail)}`;\n    }\n\n    return this.quoteIdentifier(identifiers);\n  }\n\n  quoteAttribute(attribute, model) {\n    if (model && attribute in model.rawAttributes) {\n      return this.quoteIdentifier(attribute);\n    }\n    return this.quoteIdentifiers(attribute);\n  }\n\n  /**\n   * Returns the alias token\n   *\n   * @returns {string}\n   */\n  getAliasToken() {\n    return 'AS';\n  }\n\n  /**\n   * Quote table name with optional alias and schema attribution\n   *\n   * @param {string|object}  param table string or object\n   * @param {string|boolean} alias alias name\n   *\n   * @returns {string}\n   */\n  quoteTable(param, alias) {\n    let table = '';\n\n    if (alias === true) {\n      alias = param.as || param.name || param;\n    }\n\n    if (_.isObject(param)) {\n      if (this._dialect.supports.schemas) {\n        if (param.schema) {\n          table += `${this.quoteIdentifier(param.schema)}.`;\n        }\n\n        table += this.quoteIdentifier(param.tableName);\n      } else {\n        if (param.schema) {\n          table += param.schema + (param.delimiter || '.');\n        }\n\n        table += param.tableName;\n        table = this.quoteIdentifier(table);\n      }\n    } else {\n      table = this.quoteIdentifier(param);\n    }\n\n    if (alias) {\n      table += ` ${this.getAliasToken()} ${this.quoteIdentifier(alias)}`;\n    }\n\n    return table;\n  }\n\n  /*\n    Escape a value (e.g. a string, number or date)\n    @private\n  */\n  escape(value, field, options) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      }\n      if (field && field.type) {\n        this.validate(value, field, options);\n\n        if (field.type.stringify) {\n          // Users shouldn't have to worry about these args - just give them a function that takes a single arg\n          const simpleEscape = escVal => SqlString.escape(escVal, this.options.timezone, this.dialect);\n\n          value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone, operation: options.operation });\n\n          if (field.type.escape === false) {\n            // The data-type already did the required escaping\n            return value;\n          }\n        }\n      }\n    }\n    return SqlString.escape(value, this.options.timezone, this.dialect);\n  }\n\n  bindParam(bind) {\n    return value => {\n      bind.push(value);\n      return `$${bind.length}`;\n    };\n  }\n\n  /*\n    Returns a bind parameter representation of a value (e.g. a string, number or date)\n    @private\n  */\n  format(value, field, options, bindParam) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        throw new Error('Cannot pass SequelizeMethod as a bind parameter - use escape instead');\n      }\n      if (field && field.type) {\n        this.validate(value, field, options);\n\n        if (field.type.bindParam) {\n          return field.type.bindParam(value, { escape: _.identity, field, timezone: this.options.timezone, operation: options.operation, bindParam });\n        }\n      }\n    }\n\n    return bindParam(value);\n  }\n\n  /*\n    Validate a value against a field specification\n    @private\n  */\n  validate(value, field, options) {\n    if (this.typeValidation && field.type.validate && value) {\n      try {\n        if (options.isList && Array.isArray(value)) {\n          for (const item of value) {\n            field.type.validate(item, options);\n          }\n        } else {\n          field.type.validate(value, options);\n        }\n      } catch (error) {\n        if (error instanceof sequelizeError.ValidationError) {\n          error.errors.push(new sequelizeError.ValidationErrorItem(\n            error.message,\n            'Validation error',\n            field.fieldName,\n            value,\n            null,\n            `${field.type.key} validator`\n          ));\n        }\n\n        throw error;\n      }\n    }\n  }\n\n  isIdentifierQuoted(identifier) {\n    return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(identifier);\n  }\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {string}               column   The JSON column\n   * @param   {string|Array<string>} [path]   The path to extract (optional)\n   * @param   {boolean}              [isJson] The value is JSON use alt symbols (optional)\n   * @returns {string}                        The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path, isJson) {\n    let paths = _.toPath(path);\n    let pathStr;\n    const quotedColumn = this.isIdentifierQuoted(column)\n      ? column\n      : this.quoteIdentifier(column);\n\n    switch (this.dialect) {\n      case 'mysql':\n      case 'mariadb':\n      case 'sqlite':\n        /**\n         * Non digit sub paths need to be quoted as ECMAScript identifiers\n         * https://bugs.mysql.com/bug.php?id=81896\n         */\n        if (this.dialect === 'mysql') {\n          paths = paths.map(subPath => {\n            return /\\D/.test(subPath)\n              ? Utils.addTicks(subPath, '\"')\n              : subPath;\n          });\n        }\n\n        pathStr = this.escape(['$']\n          .concat(paths)\n          .join('.')\n          .replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n\n        if (this.dialect === 'sqlite') {\n          return `json_extract(${quotedColumn},${pathStr})`;\n        }\n\n        return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n\n      case 'postgres':\n        const join = isJson ? '#>' : '#>>';\n        pathStr = this.escape(`{${paths.join(',')}}`);\n        return `(${quotedColumn}${join}${pathStr})`;\n\n      default:\n        throw new Error(`Unsupported ${this.dialect} for JSON operations`);\n    }\n  }\n\n  /*\n    Returns a query for selecting elements in the table <tableName>.\n    Options:\n      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n      - order -> e.g. 'id DESC'\n      - group\n      - limit -> The maximum count you want to get.\n      - offset -> An offset value to start from. Only useable with limit!\n   @private\n  */\n  selectQuery(tableName, options, model) {\n    options = options || {};\n    const limit = options.limit;\n    const mainQueryItems = [];\n    const subQueryItems = [];\n    const subQuery = options.subQuery === undefined ? limit && options.hasMultiAssociation : options.subQuery;\n    const attributes = {\n      main: options.attributes && options.attributes.slice(),\n      subQuery: null\n    };\n    const mainTable = {\n      name: tableName,\n      quotedName: null,\n      as: null,\n      model\n    };\n    const topLevelInfo = {\n      names: mainTable,\n      options,\n      subQuery\n    };\n    let mainJoinQueries = [];\n    let subJoinQueries = [];\n    let query;\n\n    // Aliases can be passed through subqueries and we don't want to reset them\n    if (this.options.minifyAliases && !options.aliasesMapping) {\n      options.aliasesMapping = new Map();\n      options.aliasesByTable = {};\n      options.includeAliases = new Map();\n    }\n\n    // resolve table name options\n    if (options.tableAs) {\n      mainTable.as = this.quoteIdentifier(options.tableAs);\n    } else if (!Array.isArray(mainTable.name) && mainTable.model) {\n      mainTable.as = this.quoteIdentifier(mainTable.model.name);\n    }\n\n    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map(t => {\n      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);\n    }).join(', ');\n\n    if (subQuery && attributes.main) {\n      for (const keyAtt of mainTable.model.primaryKeyAttributes) {\n        // Check if mainAttributes contain the primary key of the model either as a field or an aliased field\n        if (!attributes.main.some(attr => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {\n          attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);\n        }\n      }\n    }\n\n    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);\n    attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : ['*']);\n\n    // If subquery, we add the mainAttributes to the subQuery and set the mainAttributes to select * from subquery\n    if (subQuery || options.groupedLimit) {\n      // We need primary keys\n      attributes.subQuery = attributes.main;\n      attributes.main = [`${mainTable.as || mainTable.quotedName}.*`];\n    }\n\n    if (options.include) {\n      for (const include of options.include) {\n        if (include.separate) {\n          continue;\n        }\n        const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo);\n\n        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);\n        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n\n        if (joinQueries.attributes.main.length > 0) {\n          attributes.main = _.uniq(attributes.main.concat(joinQueries.attributes.main));\n        }\n        if (joinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = _.uniq(attributes.subQuery.concat(joinQueries.attributes.subQuery));\n        }\n      }\n    }\n\n    if (subQuery) {\n      subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));\n      subQueryItems.push(subJoinQueries.join(''));\n    } else {\n      if (options.groupedLimit) {\n        if (!mainTable.as) {\n          mainTable.as = mainTable.quotedName;\n        }\n        const where = { ...options.where };\n        let groupedLimitOrder,\n          whereKey,\n          include,\n          groupedTableName = mainTable.as;\n\n        if (typeof options.groupedLimit.on === 'string') {\n          whereKey = options.groupedLimit.on;\n        } else if (options.groupedLimit.on instanceof HasMany) {\n          whereKey = options.groupedLimit.on.foreignKeyField;\n        }\n\n        if (options.groupedLimit.on instanceof BelongsToMany) {\n          // BTM includes needs to join the through table on to check ID\n          groupedTableName = options.groupedLimit.on.manyFromSource.as;\n          const groupedLimitOptions = Model._validateIncludedElements({\n            include: [{\n              association: options.groupedLimit.on.manyFromSource,\n              duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot\n              required: true,\n              where: {\n                [Op.placeholder]: true,\n                ...options.groupedLimit.through && options.groupedLimit.through.where\n              }\n            }],\n            model\n          });\n\n          // Make sure attributes from the join table are mapped back to models\n          options.hasJoin = true;\n          options.hasMultiAssociation = true;\n          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);\n          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);\n          include = groupedLimitOptions.include;\n\n          if (Array.isArray(options.order)) {\n            // We need to make sure the order by attributes are available to the parent query\n            options.order.forEach((order, i) => {\n              if (Array.isArray(order)) {\n                order = order[0];\n              }\n\n              let alias = `subquery_order_${i}`;\n              options.attributes.push([order, alias]);\n\n              // We don't want to prepend model name when we alias the attributes, so quote them here\n              alias = this.sequelize.literal(this.quote(alias));\n\n              if (Array.isArray(options.order[i])) {\n                options.order[i][0] = alias;\n              } else {\n                options.order[i] = alias;\n              }\n            });\n            groupedLimitOrder = options.order;\n          }\n        } else {\n          // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed\n          groupedLimitOrder = options.order;\n\n          // For the Oracle dialect, the result of a select is a set, not a sequence, and so is the result of UNION.\n          // So the top level ORDER BY is required\n          if (!this._dialect.supports.topLevelOrderByRequired) {\n            delete options.order;\n          }\n          where[Op.placeholder] = true;\n        }\n\n        // Caching the base query and splicing the where part into it is consistently > twice\n        // as fast than generating from scratch each time for values.length >= 5\n        const baseQuery = `SELECT * FROM (${this.selectQuery(\n          tableName,\n          {\n            attributes: options.attributes,\n            offset: options.offset,\n            limit: options.groupedLimit.limit,\n            order: groupedLimitOrder,\n            aliasesMapping: options.aliasesMapping,\n            aliasesByTable: options.aliasesByTable,\n            where,\n            include,\n            model\n          },\n          model\n        ).replace(/;$/, '')}) ${this.getAliasToken()} sub`; // Every derived table must have its own alias\n        const placeHolder = this.whereItemQuery(Op.placeholder, true, { model });\n        const splicePos = baseQuery.indexOf(placeHolder);\n\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, `(${\n          options.groupedLimit.values.map(value => {\n            let groupWhere;\n            if (whereKey) {\n              groupWhere = {\n                [whereKey]: value\n              };\n            }\n            if (include) {\n              groupWhere = {\n                [options.groupedLimit.on.foreignIdentifierField]: value\n              };\n            }\n\n            return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));\n          }).join(\n            this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '\n          )\n        })`, mainTable.as));\n      } else {\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));\n      }\n\n      mainQueryItems.push(mainJoinQueries.join(''));\n    }\n\n    // Add WHERE to sub or main query\n    if (Object.prototype.hasOwnProperty.call(options, 'where') && !options.groupedLimit) {\n      options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);\n      if (options.where) {\n        if (subQuery) {\n          subQueryItems.push(` WHERE ${options.where}`);\n        } else {\n          mainQueryItems.push(` WHERE ${options.where}`);\n          // Walk the main query to update all selects\n          mainQueryItems.forEach((value, key) => {\n            if (value.startsWith('SELECT')) {\n              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);\n            }\n          });\n        }\n      }\n    }\n\n    // Add GROUP BY to sub or main query\n    if (options.group) {\n      options.group = Array.isArray(options.group) ? options.group.map(t => this.aliasGrouping(t, model, mainTable.as, options)).join(', ') : this.aliasGrouping(options.group, model, mainTable.as, options);\n\n      if (subQuery && options.group) {\n        subQueryItems.push(` GROUP BY ${options.group}`);\n      } else if (options.group) {\n        mainQueryItems.push(` GROUP BY ${options.group}`);\n      }\n    }\n\n    // Add HAVING to sub or main query\n    if (Object.prototype.hasOwnProperty.call(options, 'having')) {\n      options.having = this.getWhereConditions(options.having, tableName, model, options, false);\n      if (options.having) {\n        if (subQuery) {\n          subQueryItems.push(` HAVING ${options.having}`);\n        } else {\n          mainQueryItems.push(` HAVING ${options.having}`);\n        }\n      }\n    }\n\n    // Add ORDER to sub or main query\n    if (options.order) {\n      const orders = this.getQueryOrders(options, model, subQuery);\n      if (orders.mainQueryOrder.length) {\n        mainQueryItems.push(` ORDER BY ${orders.mainQueryOrder.join(', ')}`);\n      }\n      if (orders.subQueryOrder.length) {\n        subQueryItems.push(` ORDER BY ${orders.subQueryOrder.join(', ')}`);\n      }\n    }\n\n    // Add LIMIT, OFFSET to sub or main query\n    const limitOrder = this.addLimitAndOffset(options, mainTable.model);\n    if (limitOrder && !options.groupedLimit) {\n      if (subQuery) {\n        subQueryItems.push(limitOrder);\n      } else {\n        mainQueryItems.push(limitOrder);\n      }\n    }\n\n    if (subQuery) {\n      this._throwOnEmptyAttributes(attributes.main, { modelName: model && model.name, as: mainTable.as });\n      query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')}) ${this.getAliasToken()} ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;\n    } else {\n      query = mainQueryItems.join('');\n    }\n\n    if (options.lock && this._dialect.supports.lock) {\n      let lock = options.lock;\n      if (typeof options.lock === 'object') {\n        lock = options.lock.level;\n      }\n      if (this._dialect.supports.lockKey && ['KEY SHARE', 'NO KEY UPDATE'].includes(lock)) {\n        query += ` FOR ${lock}`;\n      } else if (lock === 'SHARE') {\n        query += ` ${this._dialect.supports.forShare}`;\n      } else {\n        query += ' FOR UPDATE';\n      }\n      if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model) {\n        query += ` OF ${this.quoteTable(options.lock.of.name)}`;\n      }\n      if (this._dialect.supports.skipLocked && options.skipLocked) {\n        query += ' SKIP LOCKED';\n      }\n    }\n\n    return `${query};`;\n  }\n\n  aliasGrouping(field, model, tableName, options) {\n    const src = Array.isArray(field) ? field[0] : field;\n\n    return this.quote(this._getAliasForField(tableName, src, options) || src, model);\n  }\n\n  escapeAttributes(attributes, options, mainTableAs) {\n    return attributes && attributes.map(attr => {\n      let addTable = true;\n\n      if (attr instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(attr);\n      }\n      if (Array.isArray(attr)) {\n        if (attr.length !== 2) {\n          throw new Error(`${JSON.stringify(attr)} is not a valid attribute definition. Please use the following format: ['attribute definition', 'alias']`);\n        }\n        attr = attr.slice();\n\n        if (attr[0] instanceof Utils.SequelizeMethod) {\n          attr[0] = this.handleSequelizeMethod(attr[0]);\n          addTable = false;\n        } else if (!attr[0].includes('(') && !attr[0].includes(')')) {\n          attr[0] = this.quoteIdentifier(attr[0]);\n        } else {\n          deprecations.noRawAttributes();\n        }\n        let alias = attr[1];\n\n        if (this.options.minifyAliases) {\n          alias = this._getMinifiedAlias(alias, mainTableAs, options);\n        }\n\n        attr = [attr[0], this.quoteIdentifier(alias)].join(' AS ');\n      } else {\n        attr = !attr.includes(Utils.TICK_CHAR) && !attr.includes('\"')\n          ? this.quoteAttribute(attr, options.model)\n          : this.escape(attr);\n      }\n      if (!_.isEmpty(options.include) && (!attr.includes('.') || options.dotNotation) && addTable) {\n        attr = `${mainTableAs}.${attr}`;\n      }\n\n      return attr;\n    });\n  }\n\n  generateInclude(include, parentTableName, topLevelInfo) {\n    const joinQueries = {\n      mainQuery: [],\n      subQuery: []\n    };\n    const mainChildIncludes = [];\n    const subChildIncludes = [];\n    let requiredMismatch = false;\n    const includeAs = {\n      internalAs: include.as,\n      externalAs: include.as\n    };\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let joinQuery;\n\n    topLevelInfo.options.keysEscaped = true;\n\n    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {\n      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;\n      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;\n    }\n\n    // includeIgnoreAttributes is used by aggregate functions\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      include.model._expandAttributes(include);\n      Utils.mapFinderOptions(include, include.model);\n\n      const includeAttributes = include.attributes.map(attr => {\n        let attrAs = attr;\n        let verbatim = false;\n\n        if (Array.isArray(attr) && attr.length === 2) {\n          if (attr[0] instanceof Utils.SequelizeMethod && (\n            attr[0] instanceof Utils.Literal ||\n            attr[0] instanceof Utils.Cast ||\n            attr[0] instanceof Utils.Fn\n          )) {\n            verbatim = true;\n          }\n\n          attr = attr.map(attr => attr instanceof Utils.SequelizeMethod ? this.handleSequelizeMethod(attr) : attr);\n\n          attrAs = attr[1];\n          attr = attr[0];\n        }\n        if (attr instanceof Utils.Literal) {\n          return attr.val; // We trust the user to rename the field correctly\n        }\n        if (attr instanceof Utils.Cast || attr instanceof Utils.Fn) {\n          throw new Error(\n            'Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. ' +\n            'This means the attribute will not be added to the returned instance'\n          );\n        }\n\n        let prefix;\n        if (verbatim === true) {\n          prefix = attr;\n        } else if (/#>>|->>/.test(attr)) {\n          prefix = `(${this.quoteIdentifier(includeAs.internalAs)}.${attr.replace(/\\(|\\)/g, '')})`;\n        } else if (/json_extract\\(/.test(attr)) {\n          prefix = attr.replace(/json_extract\\(/i, `json_extract(${this.quoteIdentifier(includeAs.internalAs)}.`);\n        } else if (/json_value\\(/.test(attr)) {\n          prefix = attr.replace(/json_value\\(/i, `json_value(${this.quoteIdentifier(includeAs.internalAs)}.`);\n        } else {\n          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;\n        }\n        let alias = `${includeAs.externalAs}.${attrAs}`;\n\n        if (this.options.minifyAliases) {\n          alias = this._getMinifiedAlias(alias, includeAs.internalAs, topLevelInfo.options);\n        }\n\n        return Utils.joinSQLFragments([\n          prefix,\n          'AS',\n          this.quoteIdentifier(alias, true)\n        ]);\n      });\n      if (include.subQuery && topLevelInfo.subQuery) {\n        for (const attr of includeAttributes) {\n          attributes.subQuery.push(attr);\n        }\n      } else {\n        for (const attr of includeAttributes) {\n          attributes.main.push(attr);\n        }\n      }\n    }\n\n    //through\n    if (include.through) {\n      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);\n    } else {\n      this._generateSubQueryFilter(include, includeAs, topLevelInfo);\n      joinQuery = this.generateJoin(include, topLevelInfo);\n    }\n\n    // handle possible new attributes created in join\n    if (joinQuery.attributes.main.length > 0) {\n      attributes.main = attributes.main.concat(joinQuery.attributes.main);\n    }\n\n    if (joinQuery.attributes.subQuery.length > 0) {\n      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);\n    }\n\n    if (include.include) {\n      for (const childInclude of include.include) {\n        if (childInclude.separate || childInclude._pseudo) {\n          continue;\n        }\n\n        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);\n\n        if (include.required === false && childInclude.required === true) {\n          requiredMismatch = true;\n        }\n        // if the child is a sub query we just give it to the\n        if (childInclude.subQuery && topLevelInfo.subQuery) {\n          subChildIncludes.push(childJoinQueries.subQuery);\n        }\n        if (childJoinQueries.mainQuery) {\n          mainChildIncludes.push(childJoinQueries.mainQuery);\n        }\n        if (childJoinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);\n        }\n        if (childJoinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (include.subQuery && topLevelInfo.subQuery) {\n      if (requiredMismatch && subChildIncludes.length > 0) {\n        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (subChildIncludes.length > 0) {\n          joinQueries.subQuery.push(subChildIncludes.join(''));\n        }\n      }\n      joinQueries.mainQuery.push(mainChildIncludes.join(''));\n    } else {\n      if (requiredMismatch && mainChildIncludes.length > 0) {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (mainChildIncludes.length > 0) {\n          joinQueries.mainQuery.push(mainChildIncludes.join(''));\n        }\n      }\n      joinQueries.subQuery.push(subChildIncludes.join(''));\n    }\n\n    return {\n      mainQuery: joinQueries.mainQuery.join(''),\n      subQuery: joinQueries.subQuery.join(''),\n      attributes\n    };\n  }\n\n  _getMinifiedAlias(alias, tableName, options) {\n    // We do not want to re-alias in case of a subquery\n    if (options.aliasesByTable[`${tableName}${alias}`]) {\n      return options.aliasesByTable[`${tableName}${alias}`];\n    }\n\n    // Do not alias custom suquery_orders\n    if (alias.match(/subquery_order_[0-9]/)) {\n      return alias;\n    }\n\n    const minifiedAlias = `_${options.aliasesMapping.size}`;\n\n    options.aliasesMapping.set(minifiedAlias, alias);\n    options.aliasesByTable[`${tableName}${alias}`] = minifiedAlias;\n\n    return minifiedAlias;\n  }\n\n  _getAliasForField(tableName, field, options) {\n    if (this.options.minifyAliases) {\n      if (options.aliasesByTable[`${tableName}${field}`]) {\n        return options.aliasesByTable[`${tableName}${field}`];\n      }\n    }\n    return null;\n  }\n\n  generateJoin(include, topLevelInfo) {\n    const association = include.association;\n    const parent = include.parent;\n    const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    let $parent;\n    let joinWhere;\n    /* Attributes for the left side */\n    const left = association.source;\n    const attrLeft = association instanceof BelongsTo ?\n      association.identifier :\n      association.sourceKeyAttribute || left.primaryKeyAttribute;\n    const fieldLeft = association instanceof BelongsTo ?\n      association.identifierField :\n      left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;\n    let asLeft;\n    /* Attributes for the right side */\n    const right = include.model;\n    const tableRight = right.getTableName();\n    const fieldRight = association instanceof BelongsTo ?\n      right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field :\n      association.identifierField;\n    let asRight = include.as;\n\n    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {\n      if (asLeft) {\n        asLeft = `${$parent.as}->${asLeft}`;\n      } else {\n        asLeft = $parent.as;\n      }\n    }\n\n    if (!asLeft) asLeft = parent.as || parent.model.name;\n    else asRight = `${asLeft}->${asRight}`;\n\n    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;\n    const subqueryAttributes = [];\n\n    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {\n      if (parentIsTop) {\n        // The main model attributes is not aliased to a prefix\n        const tableName = this.quoteTable(parent.as || parent.model.name);\n\n        // Check for potential aliased JOIN condition\n        joinOn = this._getAliasForField(tableName, attrLeft, topLevelInfo.options) || `${tableName}.${this.quoteIdentifier(attrLeft)}`;\n\n        if (topLevelInfo.subQuery) {\n          const dbIdentifier = `${tableName}.${this.quoteIdentifier(fieldLeft)}`;\n          subqueryAttributes.push(dbIdentifier !== joinOn ? `${dbIdentifier} AS ${this.quoteIdentifier(attrLeft)}` : dbIdentifier);\n        }\n      } else {\n        const joinSource = `${asLeft.replace(/->/g, '.')}.${attrLeft}`;\n\n        // Check for potential aliased JOIN condition\n        joinOn = this._getAliasForField(asLeft, joinSource, topLevelInfo.options) || this.quoteIdentifier(joinSource);\n      }\n    }\n\n    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;\n\n    if (include.on) {\n      joinOn = this.whereItemsQuery(include.on, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n    }\n\n    if (include.where) {\n      joinWhere = this.whereItemsQuery(include.where, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n      if (joinWhere) {\n        if (include.or) {\n          joinOn += ` OR ${joinWhere}`;\n        } else {\n          joinOn += ` AND ${joinWhere}`;\n        }\n      }\n    }\n\n    if (this.options.minifyAliases && asRight.length > 63) {\n      const alias = `%${topLevelInfo.options.includeAliases.size}`;\n\n      topLevelInfo.options.includeAliases.set(alias, asRight);\n    }\n\n    return {\n      join: include.required ? 'INNER JOIN' : include.right && this._dialect.supports['RIGHT JOIN'] ? 'RIGHT OUTER JOIN' : 'LEFT OUTER JOIN',\n      body: this.quoteTable(tableRight, asRight),\n      condition: joinOn,\n      attributes: {\n        main: [],\n        subQuery: subqueryAttributes\n      }\n    };\n  }\n\n  /**\n   * Returns the SQL fragments to handle returning the attributes from an insert/update query.\n   *\n   * @param  {object} modelAttributes An object with the model attributes.\n   * @param  {object} options         An object with options.\n   *\n   * @private\n   */\n  generateReturnValues(modelAttributes, options) {\n    const returnFields = [];\n    const returnTypes = [];\n    let outputFragment = '';\n    let returningFragment = '';\n    let tmpTable = '';\n\n    if (Array.isArray(options.returning)) {\n      returnFields.push(...options.returning.map(field => this.quoteIdentifier(field)));\n    } else if (modelAttributes) {\n      _.each(modelAttributes, attribute => {\n        if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n          returnFields.push(this.quoteIdentifier(attribute.field));\n          returnTypes.push(attribute.type);\n        }\n      });\n    }\n\n    if (_.isEmpty(returnFields)) {\n      returnFields.push('*');\n    }\n\n    if (this._dialect.supports.returnValues.returning) {\n      returningFragment = ` RETURNING ${returnFields.join(',')}`;\n    } else if (this._dialect.supports.returnIntoValues) {\n      returningFragment = ` RETURNING ${returnFields.join(',')} INTO `;\n    } else if (this._dialect.supports.returnValues.output) {\n      outputFragment = ` OUTPUT ${returnFields.map(field => `INSERTED.${field}`).join(',')}`;\n\n      //To capture output rows when there is a trigger on MSSQL DB\n      if (options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n        const tmpColumns = returnFields.map((field, i) => `${field} ${returnTypes[i].toSql()}`);\n\n        tmpTable = `DECLARE @tmp TABLE (${tmpColumns.join(',')}); `;\n        outputFragment += ' INTO @tmp';\n        returningFragment = '; SELECT * FROM @tmp';\n      }\n    }\n\n    return { outputFragment, returnFields, returnTypes, returningFragment, tmpTable };\n  }\n\n  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {\n    const through = include.through;\n    const throughTable = through.model.getTableName();\n    const throughAs = `${includeAs.internalAs}->${through.as}`;\n    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;\n    const throughAttributes = through.attributes.map(attr => {\n      let alias = `${externalThroughAs}.${Array.isArray(attr) ? attr[1] : attr}`;\n\n      if (this.options.minifyAliases) {\n        alias = this._getMinifiedAlias(alias, throughAs, topLevelInfo.options);\n      }\n\n      return Utils.joinSQLFragments([\n        `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)}`,\n        'AS',\n        this.quoteIdentifier(alias)\n      ]);\n    });\n    const association = include.association;\n    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    const tableSource = parentTableName;\n    const identSource = association.identifierField;\n    const tableTarget = includeAs.internalAs;\n    const identTarget = association.foreignIdentifierField;\n    const attrTarget = association.targetKeyField;\n\n    const joinType = include.required ? 'INNER JOIN' : include.right && this._dialect.supports['RIGHT JOIN'] ? 'RIGHT OUTER JOIN' : 'LEFT OUTER JOIN';\n    let joinBody;\n    let joinCondition;\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let attrSource = association.sourceKey;\n    let sourceJoinOn;\n    let targetJoinOn;\n    let throughWhere;\n    let targetWhere;\n\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      // Through includes are always hasMany, so we need to add the attributes to the mainAttributes no matter what (Real join will never be executed in subquery)\n      for (const attr of throughAttributes) {\n        attributes.main.push(attr);\n      }\n    }\n\n    // Figure out if we need to use field or attribute\n    if (!topLevelInfo.subQuery) {\n      attrSource = association.sourceKeyField;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {\n      attrSource = association.sourceKeyField;\n    }\n\n    // Filter statement for left side of through\n    // Used by both join and subquery where\n    // If parent include was in a subquery need to join on the aliased attribute\n    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {\n      // If we are minifying aliases and our JOIN target has been minified, we need to use the alias instead of the original column name\n      const joinSource = this._getAliasForField(tableSource, `${tableSource}.${attrSource}`, topLevelInfo.options) || `${tableSource}.${attrSource}`;\n\n      sourceJoinOn = `${this.quoteIdentifier(joinSource)} = `;\n    } else {\n      // If we are minifying aliases and our JOIN target has been minified, we need to use the alias instead of the original column name\n      const aliasedSource = this._getAliasForField(tableSource, attrSource, topLevelInfo.options) || attrSource;\n\n      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(aliasedSource)} = `;\n    }\n    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;\n\n    // Filter statement for right side of through\n    // Used by both join and subquery where\n    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;\n    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;\n\n    if (through.where) {\n      throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);\n    }\n\n    // Generate a wrapped join so that the through table join can be dependent on the target join\n    joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;\n    if (throughWhere) {\n      joinBody += ` AND ${throughWhere}`;\n    }\n    joinBody += ')';\n    joinCondition = sourceJoinOn;\n\n    if (include.where || include.through.where) {\n      if (include.where) {\n        targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);\n        if (targetWhere) {\n          joinCondition += ` AND ${targetWhere}`;\n        }\n      }\n    }\n\n    this._generateSubQueryFilter(include, includeAs, topLevelInfo);\n\n    return {\n      join: joinType,\n      body: joinBody,\n      condition: joinCondition,\n      attributes\n    };\n  }\n\n  /*\n   * Generates subQueryFilter - a select nested in the where clause of the subQuery.\n   * For a given include a query is generated that contains all the way from the subQuery\n   * table to the include table plus everything that's in required transitive closure of the\n   * given include.\n   */\n  _generateSubQueryFilter(include, includeAs, topLevelInfo) {\n    if (!topLevelInfo.subQuery || !include.subQueryFilter) {\n      return;\n    }\n\n    if (!topLevelInfo.options.where) {\n      topLevelInfo.options.where = {};\n    }\n    let parent = include;\n    let child = include;\n    let nestedIncludes = this._getRequiredClosure(include).include;\n    let query;\n\n    while ((parent = parent.parent)) { // eslint-disable-line\n      if (parent.parent && !parent.required) {\n        return; // only generate subQueryFilter if all the parents of this include are required\n      }\n\n      if (parent.subQueryFilter) {\n        // the include is already handled as this parent has the include on its required closure\n        // skip to prevent duplicate subQueryFilter\n        return;\n      }\n\n      nestedIncludes = [{ ...child, include: nestedIncludes, attributes: [] }];\n      child = parent;\n    }\n\n    const topInclude = nestedIncludes[0];\n    const topParent = topInclude.parent;\n    const topAssociation = topInclude.association;\n    topInclude.association = undefined;\n\n    if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {\n      query = this.selectQuery(topInclude.through.model.getTableName(), {\n        attributes: [topInclude.through.model.primaryKeyField],\n        include: Model._validateIncludedElements({\n          model: topInclude.through.model,\n          include: [{\n            association: topAssociation.toTarget,\n            required: true,\n            where: topInclude.where,\n            include: topInclude.include\n          }]\n        }).include,\n        model: topInclude.through.model,\n        where: {\n          [Op.and]: [\n            this.sequelize.literal([\n              `${this.quoteTable(topParent.model.name)}.${this.quoteIdentifier(topParent.model.primaryKeyField)}`,\n              `${this.quoteIdentifier(topInclude.through.model.name)}.${this.quoteIdentifier(topAssociation.identifierField)}`\n            ].join(' = ')),\n            topInclude.through.where\n          ]\n        },\n        limit: 1,\n        includeIgnoreAttributes: false\n      }, topInclude.through.model);\n    } else {\n      const isBelongsTo = topAssociation.associationType === 'BelongsTo';\n      const sourceField = isBelongsTo ? topAssociation.identifierField : topAssociation.sourceKeyField || topParent.model.primaryKeyField;\n      const targetField = isBelongsTo ? topAssociation.sourceKeyField || topInclude.model.primaryKeyField : topAssociation.identifierField;\n\n      const join = [\n        `${this.quoteIdentifier(topInclude.as)}.${this.quoteIdentifier(targetField)}`,\n        `${this.quoteTable(topParent.as || topParent.model.name)}.${this.quoteIdentifier(sourceField)}`\n      ].join(' = ');\n\n      query = this.selectQuery(topInclude.model.getTableName(), {\n        attributes: [targetField],\n        include: Model._validateIncludedElements(topInclude).include,\n        model: topInclude.model,\n        where: {\n          [Op.and]: [\n            topInclude.where,\n            { [Op.join]: this.sequelize.literal(join) }\n          ]\n        },\n        limit: 1,\n        tableAs: topInclude.as,\n        includeIgnoreAttributes: false\n      }, topInclude.model);\n    }\n\n    if (!topLevelInfo.options.where[Op.and]) {\n      topLevelInfo.options.where[Op.and] = [];\n    }\n\n    topLevelInfo.options.where[`__${includeAs.internalAs}`] = this.sequelize.literal([\n      '(',\n      query.replace(/;$/, ''),\n      ')',\n      'IS NOT NULL'\n    ].join(' '));\n  }\n\n  /*\n   * For a given include hierarchy creates a copy of it where only the required includes\n   * are preserved.\n   */\n  _getRequiredClosure(include) {\n    const copy = { ...include, attributes: [], include: [] };\n\n    if (Array.isArray(include.include)) {\n      copy.include = include.include\n        .filter(i => i.required)\n        .map(inc => this._getRequiredClosure(inc));\n    }\n\n    return copy;\n  }\n\n  getQueryOrders(options, model, subQuery) {\n    const mainQueryOrder = [];\n    const subQueryOrder = [];\n\n    if (Array.isArray(options.order)) {\n      for (let order of options.order) {\n\n        // wrap if not array\n        if (!Array.isArray(order)) {\n          order = [order];\n        }\n\n        if (\n          subQuery\n          && Array.isArray(order)\n          && order[0]\n          && !(order[0] instanceof Association)\n          && !(typeof order[0] === 'function' && order[0].prototype instanceof Model)\n          && !(typeof order[0].model === 'function' && order[0].model.prototype instanceof Model)\n          && !(typeof order[0] === 'string' && model && model.associations !== undefined && model.associations[order[0]])\n        ) {\n          const field = model.rawAttributes[order[0]] ? model.rawAttributes[order[0]].field : order[0];\n          const subQueryAlias = this._getAliasForField(this.quoteIdentifier(model.name), field, options);\n\n          let parent = null;\n          let orderToQuote = [];\n\n          // we need to ensure that the parent is null if we use the subquery alias, else we'll get an exception since\n          // \"model_name\".\"alias\" doesn't exist - only \"alias\" does. we also need to ensure that we preserve order direction\n          // by pushing order[1] to the subQueryOrder as well - in case it doesn't exist, we want to push \"ASC\"\n          if (subQueryAlias === null) {\n            orderToQuote = order;\n            parent = model;\n          } else {\n            orderToQuote = [subQueryAlias, order.length > 1 ? order[1] : 'ASC'];\n            parent = null;\n          }\n\n          subQueryOrder.push(this.quote(orderToQuote, parent, '->'));\n        }\n\n        // Handle case where renamed attributes are used to order by,\n        // see https://github.com/sequelize/sequelize/issues/8739\n        // need to check if either of the attribute options match the order\n        if (options.attributes && model) {\n          const aliasedAttribute = options.attributes.find(attr => Array.isArray(attr)\n              && attr[1]\n              && (attr[0] === order[0] || attr[1] === order[0]));\n\n          if (aliasedAttribute) {\n            const modelName = this.quoteIdentifier(model.name);\n            const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);\n\n            order[0] = new Utils.Col(alias || aliasedAttribute[1]);\n          }\n        }\n\n        mainQueryOrder.push(this.quote(order, model, '->'));\n      }\n    } else if (options.order instanceof Utils.SequelizeMethod) {\n      const sql = this.quote(options.order, model, '->');\n      if (subQuery) {\n        subQueryOrder.push(sql);\n      }\n      mainQueryOrder.push(sql);\n    } else {\n      throw new Error('Order must be type of array or instance of a valid sequelize method.');\n    }\n\n    return { mainQueryOrder, subQueryOrder };\n  }\n\n  _throwOnEmptyAttributes(attributes, extraInfo = {}) {\n    if (attributes.length > 0) return;\n    const asPart = extraInfo.as && `as ${extraInfo.as}` || '';\n    const namePart = extraInfo.modelName && `for model '${extraInfo.modelName}'` || '';\n    const message = `Attempted a SELECT query ${namePart} ${asPart} without selecting any columns`;\n    throw new sequelizeError.QueryError(message.replace(/ +/g, ' '));\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    let fragment = `SELECT ${attributes.join(', ')} FROM ${tables}`;\n\n    if (mainTableAs) {\n      fragment += ` ${this.getAliasToken()} ${mainTableAs}`;\n    }\n\n    if (options.indexHints && this._dialect.supports.indexHints) {\n      for (const hint of options.indexHints) {\n        if (IndexHints[hint.type]) {\n          fragment += ` ${IndexHints[hint.type]} INDEX (${hint.values.map(indexName => this.quoteIdentifiers(indexName)).join(',')})`;\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Returns an SQL fragment for adding result constraints.\n   *\n   * @param  {object} options An object with selectQuery options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  addLimitAndOffset(options) {\n    let fragment = '';\n\n    /* eslint-disable */\n    if (options.offset != null && options.limit == null) {\n      fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + 10000000000000;\n    } else if (options.limit != null) {\n      if (options.offset != null) {\n        fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + this.escape(options.limit);\n      } else {\n        fragment += ' LIMIT ' + this.escape(options.limit);\n      }\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let result;\n\n    if (Object.prototype.hasOwnProperty.call(this.OperatorMap, smth.comparator)) {\n      smth.comparator = this.OperatorMap[smth.comparator];\n    }\n\n    if (smth instanceof Utils.Where) {\n      let value = smth.logic;\n      let key;\n\n      if (smth.attribute instanceof Utils.SequelizeMethod) {\n        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);\n      } else {\n        key = `${this.quoteTable(smth.attribute.Model.name)}.${this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName)}`;\n      }\n\n      if (value && value instanceof Utils.SequelizeMethod) {\n        value = this.getWhereConditions(value, tableName, factory, options, prepend);\n\n        if (value === 'NULL') {\n          if (smth.comparator === '=') {\n            smth.comparator = 'IS';\n          }\n          if (smth.comparator === '!=') {\n            smth.comparator = 'IS NOT';\n          }\n        }\n\n        return [key, value].join(` ${smth.comparator} `);\n      }\n      if (_.isPlainObject(value)) {\n        return this.whereItemQuery(smth.attribute, value, {\n          model: factory\n        });\n      }\n      if ([this.OperatorMap[Op.between], this.OperatorMap[Op.notBetween]].includes(smth.comparator)) {\n        value = `${this.escape(value[0])} AND ${this.escape(value[1])}`;\n      } else if (typeof value === 'boolean') {\n        value = this.booleanValue(value);\n      } else {\n        value = this.escape(value);\n      }\n\n      if (value === 'NULL') {\n        if (smth.comparator === '=') {\n          smth.comparator = 'IS';\n        }\n        if (smth.comparator === '!=') {\n          smth.comparator = 'IS NOT';\n        }\n      }\n\n      return [key, value].join(` ${smth.comparator} `);\n    }\n    if (smth instanceof Utils.Literal) {\n      return smth.val;\n    }\n    if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n      } else if (_.isPlainObject(smth.val)) {\n        result = this.whereItemsQuery(smth.val);\n      } else {\n        result = this.escape(smth.val);\n      }\n\n      return `CAST(${result} AS ${smth.type.toUpperCase()})`;\n    }\n    if (smth instanceof Utils.Fn) {\n      return `${smth.fn}(${\n        smth.args.map(arg => {\n          if (arg instanceof Utils.SequelizeMethod) {\n            return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);\n          }\n          if (_.isPlainObject(arg)) {\n            return this.whereItemsQuery(arg);\n          }\n          return this.escape(typeof arg === 'string' ? arg.replace(/\\$/g, '$$$') : arg);\n        }).join(', ')\n      })`;\n    }\n    if (smth instanceof Utils.Col) {\n      if (Array.isArray(smth.col) && !factory) {\n        throw new Error('Cannot call Sequelize.col() with array outside of order / group clause');\n      }\n      if (smth.col.startsWith('*')) {\n        return '*';\n      }\n      return this.quote(smth.col, factory);\n    }\n    return smth.toString(this, factory);\n  }\n\n  whereQuery(where, options) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length) {\n      return `WHERE ${query}`;\n    }\n    return '';\n  }\n\n  whereItemsQuery(where, options, binding) {\n    if (\n      where === null ||\n      where === undefined ||\n      Utils.getComplexSize(where) === 0\n    ) {\n      // NO OP\n      return '';\n    }\n\n    if (typeof where === 'string') {\n      throw new Error('Support for `{where: \\'raw query\\'}` has been removed.');\n    }\n\n    const items = [];\n\n    binding = binding || 'AND';\n    if (binding[0] !== ' ') binding = ` ${binding} `;\n\n    if (_.isPlainObject(where)) {\n      Utils.getComplexKeys(where).forEach(prop => {\n        const item = where[prop];\n        items.push(this.whereItemQuery(prop, item, options));\n      });\n    } else {\n      items.push(this.whereItemQuery(undefined, where, options));\n    }\n\n    return items.length && items.filter(item => item && item.length).join(binding) || '';\n  }\n\n  whereItemQuery(key, value, options = {}) {\n    if (value === undefined) {\n      throw new Error(`WHERE parameter \"${key}\" has invalid \"undefined\" value`);\n    }\n\n    if (typeof key === 'string' && key.includes('.') && options.model) {\n      const keyParts = key.split('.');\n      if (options.model.rawAttributes[keyParts[0]] && options.model.rawAttributes[keyParts[0]].type instanceof DataTypes.JSON) {\n        const tmp = {};\n        const field = options.model.rawAttributes[keyParts[0]];\n        _.set(tmp, keyParts.slice(1), value);\n        return this.whereItemQuery(field.field || keyParts[0], tmp, { field, ...options });\n      }\n    }\n\n    const field = this._findField(key, options);\n    const fieldType = field && field.type || options.type;\n\n    const isPlainObject = _.isPlainObject(value);\n    const isArray = !isPlainObject && Array.isArray(value);\n    key = this.OperatorsAliasMap && this.OperatorsAliasMap[key] || key;\n    if (isPlainObject) {\n      value = this._replaceAliases(value);\n    }\n    const valueKeys = isPlainObject && Utils.getComplexKeys(value);\n\n    if (key === undefined) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isPlainObject && valueKeys.length === 1) {\n        return this.whereItemQuery(valueKeys[0], value[valueKeys[0]], options);\n      }\n    }\n\n    if (value === null) {\n      const opValue = options.bindParam ? 'NULL' : this.escape(value, field);\n      return this._joinKeyValue(key, opValue, this.OperatorMap[Op.is], options.prefix);\n    }\n\n    if (!value) {\n      const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (value instanceof Utils.SequelizeMethod && !(key !== undefined && value instanceof Utils.Fn)) {\n      return this.handleSequelizeMethod(value);\n    }\n\n    // Convert where: [] to Op.and if possible, else treat as literal/replacements\n    if (key === undefined && isArray) {\n      if (Utils.canTreatArrayAsAnd(value)) {\n        key = Op.and;\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    }\n\n    if (key === Op.or || key === Op.and || key === Op.not) {\n      return this._whereGroupBind(key, value, options);\n    }\n\n\n    if (value[Op.or]) {\n      return this._whereBind(this.OperatorMap[Op.or], key, value[Op.or], options);\n    }\n\n    if (value[Op.and]) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value[Op.and], options);\n    }\n\n    if (isArray && fieldType instanceof DataTypes.ARRAY) {\n      const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (isPlainObject && fieldType instanceof DataTypes.JSON && options.json !== false) {\n      return this._whereJSON(key, value, options);\n    }\n    // If multiple keys we combine the different logic conditions\n    if (isPlainObject && valueKeys.length > 1) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value, options);\n    }\n\n    if (isArray) {\n      return this._whereParseSingleValueObject(key, field, Op.in, value, options);\n    }\n    if (isPlainObject) {\n      if (this.OperatorMap[valueKeys[0]]) {\n        return this._whereParseSingleValueObject(key, field, valueKeys[0], value[valueKeys[0]], options);\n      }\n      return this._whereParseSingleValueObject(key, field, this.OperatorMap[Op.eq], value, options);\n    }\n\n    if (key === Op.placeholder) {\n      const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n      return this._joinKeyValue(this.OperatorMap[key], opValue, this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);\n    return this._joinKeyValue(key, opValue, this.OperatorMap[Op.eq], options.prefix);\n  }\n\n  _findField(key, options) {\n    if (options.field) {\n      return options.field;\n    }\n\n    if (options.model && options.model.rawAttributes && options.model.rawAttributes[key]) {\n      return options.model.rawAttributes[key];\n    }\n\n    if (options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]) {\n      return options.model.fieldRawAttributesMap[key];\n    }\n  }\n\n  // OR/AND/NOT grouping logic\n  _whereGroupBind(key, value, options) {\n    const binding = key === Op.or ? this.OperatorMap[Op.or] : this.OperatorMap[Op.and];\n    const outerBinding = key === Op.not ? 'NOT ' : '';\n\n    if (Array.isArray(value)) {\n      value = value.map(item => {\n        let itemQuery = this.whereItemsQuery(item, options, this.OperatorMap[Op.and]);\n        if (itemQuery && itemQuery.length && (Array.isArray(item) || _.isPlainObject(item)) && Utils.getComplexSize(item) > 1) {\n          itemQuery = `(${itemQuery})`;\n        }\n        return itemQuery;\n      }).filter(item => item && item.length);\n\n      value = value.length && value.join(binding);\n    } else {\n      value = this.whereItemsQuery(value, options, binding);\n    }\n    // Op.or: [] should return no data.\n    // Op.not of no restriction should also return no data\n    if ((key === Op.or || key === Op.not) && !value) {\n      return '0 = 1';\n    }\n\n    return value ? `${outerBinding}(${value})` : undefined;\n  }\n\n  _whereBind(binding, key, value, options) {\n    if (_.isPlainObject(value)) {\n      value = Utils.getComplexKeys(value).map(prop => {\n        const item = value[prop];\n        return this.whereItemQuery(key, { [prop]: item }, options);\n      });\n    } else {\n      value = value.map(item => this.whereItemQuery(key, item, options));\n    }\n\n    value = value.filter(item => item && item.length);\n\n    return value.length ? `(${value.join(binding)})` : undefined;\n  }\n\n  _whereJSON(key, value, options) {\n    const items = [];\n    let baseKey = this.quoteIdentifier(key);\n    if (options.prefix) {\n      if (options.prefix instanceof Utils.Literal) {\n        baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;\n      } else {\n        baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;\n      }\n    }\n\n    Utils.getOperators(value).forEach(op => {\n      const where = {\n        [op]: value[op]\n      };\n      items.push(this.whereItemQuery(key, where, { ...options, json: false }));\n    });\n\n    _.forOwn(value, (item, prop) => {\n      this._traverseJSON(items, baseKey, prop, item, [prop]);\n    });\n\n    const result = items.join(this.OperatorMap[Op.and]);\n    return items.length > 1 ? `(${result})` : result;\n  }\n\n  _traverseJSON(items, baseKey, prop, item, path) {\n    let cast;\n\n    if (path[path.length - 1].includes('::')) {\n      const tmp = path[path.length - 1].split('::');\n      cast = tmp[1];\n      path[path.length - 1] = tmp[0];\n    }\n\n    let pathKey = this.jsonPathExtractionQuery(baseKey, path);\n\n    if (_.isPlainObject(item)) {\n      Utils.getOperators(item).forEach(op => {\n        const value = this._toJSONValue(item[op]);\n        let isJson = false;\n        if (typeof value === 'string' && op === Op.contains) {\n          try {\n            JSON.stringify(value);\n            isJson = true;\n          } catch (e) {\n            // failed to parse, is not json so isJson remains false\n          }\n        }\n        pathKey = this.jsonPathExtractionQuery(baseKey, path, isJson);\n        items.push(this.whereItemQuery(this._castKey(pathKey, value, cast), { [op]: value }));\n      });\n      _.forOwn(item, (value, itemProp) => {\n        this._traverseJSON(items, baseKey, itemProp, value, path.concat([itemProp]));\n      });\n\n      return;\n    }\n\n    item = this._toJSONValue(item);\n    items.push(this.whereItemQuery(this._castKey(pathKey, item, cast), { [Op.eq]: item }));\n  }\n\n  _toJSONValue(value) {\n    return value;\n  }\n\n  _castKey(key, value, cast, json) {\n    cast = cast || this._getJsonCast(Array.isArray(value) ? value[0] : value);\n    if (cast) {\n      return new Utils.Literal(this.handleSequelizeMethod(new Utils.Cast(new Utils.Literal(key), cast, json)));\n    }\n\n    return new Utils.Literal(key);\n  }\n\n  _getJsonCast(value) {\n    if (typeof value === 'number') {\n      return 'double precision';\n    }\n    if (value instanceof Date) {\n      return 'timestamptz';\n    }\n    if (typeof value === 'boolean') {\n      return 'boolean';\n    }\n    return;\n  }\n\n  _joinKeyValue(key, value, comparator, prefix) {\n    if (!key) {\n      return value;\n    }\n    if (comparator === undefined) {\n      throw new Error(`${key} and ${value} has no comparator`);\n    }\n    key = this._getSafeKey(key, prefix);\n    return [key, value].join(` ${comparator} `);\n  }\n\n  _getSafeKey(key, prefix) {\n    if (key instanceof Utils.SequelizeMethod) {\n      key = this.handleSequelizeMethod(key);\n      return this._prefixKey(this.handleSequelizeMethod(key), prefix);\n    }\n\n    if (Utils.isColString(key)) {\n      key = key.substr(1, key.length - 2).split('.');\n\n      if (key.length > 2) {\n        key = [\n          // join the tables by -> to match out internal namings\n          key.slice(0, -1).join('->'),\n          key[key.length - 1]\n        ];\n      }\n\n      return key.map(identifier => this.quoteIdentifier(identifier)).join('.');\n    }\n\n    return this._prefixKey(this.quoteIdentifier(key), prefix);\n  }\n\n  _prefixKey(key, prefix) {\n    if (prefix) {\n      if (prefix instanceof Utils.Literal) {\n        return [this.handleSequelizeMethod(prefix), key].join('.');\n      }\n\n      return [this.quoteTable(prefix), key].join('.');\n    }\n\n    return key;\n  }\n\n  _whereParseSingleValueObject(key, field, prop, value, options) {\n    if (prop === Op.not) {\n      if (Array.isArray(value)) {\n        prop = Op.notIn;\n      } else if (value !== null && value !== true && value !== false) {\n        prop = Op.ne;\n      }\n    }\n\n    let comparator = this.OperatorMap[prop] || this.OperatorMap[Op.eq];\n\n    switch (prop) {\n      case Op.in:\n      case Op.notIn:\n        if (value instanceof Utils.Literal) {\n          return this._joinKeyValue(key, value.val, comparator, options.prefix);\n        }\n\n        if (value.length) {\n          return this._joinKeyValue(key, `(${value.map(item => this.escape(item, field)).join(', ')})`, comparator, options.prefix);\n        }\n\n        if (comparator === this.OperatorMap[Op.in]) {\n          return this._joinKeyValue(key, '(NULL)', comparator, options.prefix);\n        }\n\n        return '';\n      case Op.any:\n      case Op.all:\n        comparator = `${this.OperatorMap[Op.eq]} ${comparator}`;\n        if (value[Op.values]) {\n          return this._joinKeyValue(key, `(VALUES ${value[Op.values].map(item => `(${this.escape(item)})`).join(', ')})`, comparator, options.prefix);\n        }\n\n        return this._joinKeyValue(key, `(${this.escape(value, field)})`, comparator, options.prefix);\n      case Op.between:\n      case Op.notBetween:\n        return this._joinKeyValue(key, `${this.escape(value[0], field)} AND ${this.escape(value[1], field)}`, comparator, options.prefix);\n      case Op.raw:\n        throw new Error('The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.');\n      case Op.col:\n        comparator = this.OperatorMap[Op.eq];\n        value = value.split('.');\n\n        if (value.length > 2) {\n          value = [\n            // join the tables by -> to match out internal namings\n            value.slice(0, -1).join('->'),\n            value[value.length - 1]\n          ];\n        }\n\n        return this._joinKeyValue(key, value.map(identifier => this.quoteIdentifier(identifier)).join('.'), comparator, options.prefix);\n      case Op.startsWith:\n      case Op.endsWith:\n      case Op.substring:\n        comparator = this.OperatorMap[Op.like];\n\n        if (value instanceof Utils.Literal) {\n          value = value.val;\n        }\n\n        let pattern = `${value}%`;\n\n        if (prop === Op.endsWith) pattern = `%${value}`;\n        if (prop === Op.substring) pattern = `%${value}%`;\n\n        return this._joinKeyValue(key, this.escape(pattern), comparator, options.prefix);\n    }\n\n    const escapeOptions = {\n      acceptStrings: comparator.includes(this.OperatorMap[Op.like])\n    };\n\n    if (_.isPlainObject(value)) {\n      if (value[Op.col]) {\n        return this._joinKeyValue(key, this.whereItemQuery(null, value), comparator, options.prefix);\n      }\n      if (value[Op.any]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.any], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.any]}`, options.prefix);\n      }\n      if (value[Op.all]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.all], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.all]}`, options.prefix);\n      }\n    }\n\n    if (value === null && comparator === this.OperatorMap[Op.eq]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.is], options.prefix);\n    }\n    if (value === null && comparator === this.OperatorMap[Op.ne]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.not], options.prefix);\n    }\n\n    return this._joinKeyValue(key, this.escape(value, field, escapeOptions), comparator, options.prefix);\n  }\n\n  /*\n    Takes something and transforms it into values of a where condition.\n   @private\n  */\n  getWhereConditions(smth, tableName, factory, options, prepend) {\n    const where = {};\n\n    if (Array.isArray(tableName)) {\n      tableName = tableName[0];\n      if (Array.isArray(tableName)) {\n        tableName = tableName[1];\n      }\n    }\n\n    options = options || {};\n\n    if (prepend === undefined) {\n      prepend = true;\n    }\n\n    if (smth && smth instanceof Utils.SequelizeMethod) { // Checking a property is cheaper than a lot of instanceof calls\n      return this.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n    if (_.isPlainObject(smth)) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName,\n        type: options.type\n      });\n    }\n    if (typeof smth === 'number' || typeof smth === 'bigint') {\n      let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];\n\n      if (primaryKeys.length > 0) {\n        // Since we're just a number, assume only the first key\n        primaryKeys = primaryKeys[0];\n      } else {\n        primaryKeys = 'id';\n      }\n\n      where[primaryKeys] = smth;\n\n      return this.whereItemsQuery(where, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    if (typeof smth === 'string') {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n    if (Buffer.isBuffer(smth)) {\n      return this.escape(smth);\n    }\n    if (Array.isArray(smth)) {\n      if (smth.length === 0 || smth.length > 0 && smth[0].length === 0) return '1=1';\n      if (Utils.canTreatArrayAsAnd(smth)) {\n        const _smth = { [Op.and]: smth };\n        return this.getWhereConditions(_smth, tableName, factory, options, prepend);\n      }\n      throw new Error('Support for literal replacements in the `where` object has been removed.');\n    }\n    if (smth === null) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n\n    return '1=1';\n  }\n\n  // A recursive parser for nested where conditions\n  parseConditionObject(conditions, path) {\n    path = path || [];\n    return _.reduce(conditions, (result, value, key) => {\n      if (_.isObject(value)) {\n        return result.concat(this.parseConditionObject(value, path.concat(key))); // Recursively parse objects\n      }\n      result.push({ path: path.concat(key), value });\n      return result;\n    }, []);\n  }\n\n  booleanValue(value) {\n    return value;\n  }\n\n  /**\n   * Returns the authenticate test query string\n   */\n  authTestQuery() {\n    return 'SELECT 1+1 AS result';\n  }\n}\n\nObject.assign(QueryGenerator.prototype, require('./query-generator/operators'));\nObject.assign(QueryGenerator.prototype, require('./query-generator/transaction'));\n\nmodule.exports = QueryGenerator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}