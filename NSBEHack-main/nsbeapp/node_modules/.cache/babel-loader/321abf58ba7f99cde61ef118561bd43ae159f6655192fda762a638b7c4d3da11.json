{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n__export(exports, {\n  JoinSQLFragmentsError: () => JoinSQLFragmentsError,\n  joinSQLFragments: () => joinSQLFragments\n});\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce((_ref, part) => {\n    let {\n      skipNextLeadingSpace,\n      result\n    } = _ref;\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: \"\"\n  }).result;\n}\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return \"\";\n  const truthyArray = array.filter(x => !!x);\n  const flattenedArray = truthyArray.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n    return fragment;\n  });\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== \"string\") {\n      throw new JoinSQLFragmentsError(flattenedArray, fragment, `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n    }\n  }\n  const trimmedArray = flattenedArray.map(x => x.trim());\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== \"\");\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\nclass JoinSQLFragmentsError extends TypeError {\n  constructor(args, fragment, message) {\n    super(message);\n    __publicField(this, \"args\");\n    __publicField(this, \"fragment\");\n    this.args = args;\n    this.fragment = fragment;\n    this.name = \"JoinSQLFragmentsError\";\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;EAAAC;AAAA;AAEA,iCAAiCC,KAAsB;EACrD,OAAO,SAASC,KAAKD;AAAA;AAEvB,kCAAkCA,KAAsB;EACtD,OAAO,MAAMC,KAAKD;AAAA;AAcpB,+BAA+BE,OAAyB;EACtD,OAAOA,MAAMC,OACX,OAAmCC,SAAS;IAAA,IAA3C;MAAEC;MAAsBC;IAAA;IACvB,IAAID,wBAAwBE,wBAAwBH,OAAO;MACzDE,UAAUF,KAAKI;IAAA,OACV;MACLF,UAAU,IAAIF,KAAKI;IAAA;IAErB,OAAO;MACLH,sBAAsBI,yBAAyBL;MAC/CE;IAAA;EAAA,GAGJ;IACED,sBAAsB;IACtBC,QAAQ;EAAA,GAEVA;AAAA;AAgBG,0BAA0BI,OAA8B;EAC7D,IAAIA,MAAMC,WAAW,GAAG,OAAO;EAE/B,MAAMC,cAAmCF,MAAMG,OAC5CC,KAAmC,CAAC,CAACA;EAExC,MAAMC,iBAA2BH,YAAYI,IAC1CC,YAAgC;IAC/B,IAAIC,MAAMC,QAAQF,WAAW;MAC3B,OAAOlB,iBAAiBkB;IAAA;IAG1B,OAAOA;EAAA;EAKX,WAAWA,YAAYF,gBAAgB;IACrC,IAAIE,YAAY,OAAOA,aAAa,UAAU;MAC5C,MAAM,IAAInB,sBACRiB,gBACAE,UACA,0EAA0EA;IAAA;EAAA;EAMhF,MAAMG,eAAeL,eAAeC,IAAIF,KAAKA,EAAEN;EAG/C,MAAMa,sBAAsBD,aAAaP,OAAOC,KAAKA,MAAM;EAE3D,OAAOQ,sBAAsBD;AAAA;AAGxB,oCAAoCE,UAAU;EAInDC,YAAYC,MAAqBR,UAAeS,SAAiB;IAC/D,MAAMA;IAJRC;IACAA;IAKE,KAAKF,OAAOA;IACZ,KAAKR,WAAWA;IAChB,KAAKW,OAAO;EAAA;AAAA","names":["__export","JoinSQLFragmentsError","joinSQLFragments","str","test","parts","reduce","part","skipNextLeadingSpace","result","doesNotWantLeadingSpace","trim","doesNotWantTrailingSpace","array","length","truthyArray","filter","x","flattenedArray","map","fragment","Array","isArray","trimmedArray","nonEmptyStringArray","singleSpaceJoinHelper","TypeError","constructor","args","message","__publicField","name"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\utils\\join-sql-fragments.ts"],"sourcesContent":["import { SQLFragment, TruthySQLFragment } from '../generic/sql-fragment';\n\nfunction doesNotWantLeadingSpace(str: string): boolean {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str: string): boolean {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n *\n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n *\n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts: string[]): string {\n  return parts.reduce(\n    ({ skipNextLeadingSpace, result }, part) => {\n      if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n        result += part.trim();\n      } else {\n        result += ` ${part.trim()}`;\n      }\n      return {\n        skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n        result\n      };\n    },\n    {\n      skipNextLeadingSpace: true,\n      result: ''\n    }\n  ).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n *\n * Certain elements do not get leading/trailing spaces.\n *\n * @param {SQLFragment[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n *\n * @returns {string} The joined string.\n *\n * @private\n */\nexport function joinSQLFragments(array: SQLFragment[]): string {\n  if (array.length === 0) return '';\n\n  const truthyArray: TruthySQLFragment[] = array.filter(\n    (x): x is string | SQLFragment[] => !!x\n  );\n  const flattenedArray: string[] = truthyArray.map(\n    (fragment: TruthySQLFragment) => {\n      if (Array.isArray(fragment)) {\n        return joinSQLFragments(fragment);\n      }\n\n      return fragment;\n    }\n  );\n\n  // Ensure strings\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== 'string') {\n      throw new JoinSQLFragmentsError(\n        flattenedArray,\n        fragment,\n        `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`\n      );\n    }\n  }\n\n  // Trim fragments\n  const trimmedArray = flattenedArray.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\n\nexport class JoinSQLFragmentsError extends TypeError {\n  args: SQLFragment[];\n  fragment: any; // iirc this error is only used when we get an invalid fragment.\n\n  constructor(args: SQLFragment[], fragment: any, message: string) {\n    super(message);\n    \n    this.args = args;\n    this.fragment = fragment;\n    this.name = 'JoinSQLFragmentsError';\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}