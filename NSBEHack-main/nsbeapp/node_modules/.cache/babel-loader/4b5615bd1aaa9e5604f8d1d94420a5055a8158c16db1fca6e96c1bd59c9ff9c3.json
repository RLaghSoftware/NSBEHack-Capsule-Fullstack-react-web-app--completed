{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst Utils = require(\"../../utils\");\nconst util = require(\"util\");\nconst DataTypes = require(\"../../data-types\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst semver = require(\"semver\");\nconst _ = require(\"lodash\");\nconst POSTGRES_RESERVED_WORDS = \"all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with\".split(\",\");\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      encoding: null,\n      collate: null\n    }, options);\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : \"\",\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : \"\",\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : \"\",\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : \"\"\n    };\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n  createSchema(schema) {\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n    if (databaseVersion && semver.gte(databaseVersion, \"9.2.0\")) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n    return `CREATE SCHEMA ${schema};`;\n  }\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n  versionQuery() {\n    return \"SHOW SERVER_VERSION\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({}, options);\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n    const attrStr = [];\n    let comments = \"\";\n    let columnComments = \"\";\n    const quotedTable = this.quoteTable(tableName);\n    if (options.comment && typeof options.comment === \"string\") {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf(\"COMMENT \");\n      if (i !== -1) {\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n    let attributesClause = attrStr.join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes(\"PRIMARY KEY\")) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(\",\");\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, \"9.1.0\") ? \"IF NOT EXISTS \" : \"\"}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? \" CASCADE\" : \"\"};`;\n  }\n  showTablesQuery() {\n    const schema = this.options.schema || \"public\";\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;\n  }\n  tableExistsQuery(tableName) {\n    const table = tableName.tableName || tableName;\n    const schema = tableName.schema || \"public\";\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;\n  }\n  describeTableQuery(tableName, schema) {\n    schema = schema || this.options.schema || \"public\";\n    return `SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)}`;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n      if (smth.path) {\n        let str;\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, {\n      context: \"addColumn\",\n      table,\n      key\n    });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n    return query;\n  }\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = \"\";\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n      if (attributes[attributeName].startsWith(\"ENUM(\")) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace(\"ALTER COLUMN\", \"\");\n      }\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace(\"ALTER COLUMN\", \"\");\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n      sql.push(attrSql);\n    }\n    return sql.join(\"\");\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(\", \")};`;\n  }\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || \"testfunc\";\n    language = language || \"plpgsql\";\n    returns = returns ? `RETURNS ${returns}` : \"\";\n    parameters = parameters || \"\";\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n  truncateTableQuery(tableName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`TRUNCATE ${this.quoteTable(tableName)}`, options.restartIdentity ? \" RESTART IDENTITY\" : \"\", options.cascade ? \" CASCADE\" : \"\"].join(\"\");\n  }\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : \"\";\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n    if (options.limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n  showIndexesQuery(tableName) {\n    let schemaJoin = \"\";\n    let schemaWhere = \"\";\n    if (typeof tableName !== \"string\") {\n      schemaJoin = \", pg_namespace s\";\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n    return `SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`;\n  }\n  showConstraintsQuery(tableName) {\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', \"from INFORMATION_SCHEMA.table_constraints\", `WHERE table_name='${tableName}';`].join(\" \");\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return [\"DROP INDEX\", options && options.concurrently && \"CONCURRENTLY\", `IF EXISTS ${this.quoteIdentifiers(indexName)}`].filter(Boolean).join(\" \");\n  }\n  addLimitAndOffset(options) {\n    let fragment = \"\";\n    if (options.limit != null) {\n      fragment += \" LIMIT \" + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += \" OFFSET \" + this.escape(options.offset);\n    }\n    return fragment;\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    let type;\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(\", \")})`;\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += \"[]\";\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n    if (!type) {\n      type = attribute.type;\n    }\n    let sql = type.toString();\n    if (Object.prototype.hasOwnProperty.call(attribute, \"allowNull\") && !attribute.allowNull) {\n      sql += \" NOT NULL\";\n    }\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += \" GENERATED BY DEFAULT AS IDENTITY\";\n      } else {\n        sql += \" SERIAL\";\n      }\n    }\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n    if (attribute.unique === true) {\n      sql += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      sql += \" PRIMARY KEY\";\n    }\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model == \"string\") && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n      let referencesKey;\n      if (!options.withoutForeignKeyConstraints) {\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier(\"id\");\n        }\n        sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n        if (attribute.onDelete) {\n          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n        }\n        if (attribute.onUpdate) {\n          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n        }\n        if (attribute.references.deferrable) {\n          sql += ` ${attribute.references.deferrable.toString(this)}`;\n        }\n      }\n    }\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      if (options && [\"addColumn\", \"changeColumn\"].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n    return sql;\n  }\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n  setConstraintQuery(columns, type) {\n    let columnFragment = \"ALL\";\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(\", \");\n    }\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, \"DEFERRED\");\n  }\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, \"IMMEDIATE\");\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({\n        key\n      }, options));\n    }\n    return result;\n  }\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : \"\"} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error(\"createFunction missing some parameters. Did you pass functionName, returnType, language and body?\");\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : \"\";\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? \"CREATE OR REPLACE FUNCTION\" : \"CREATE FUNCTION\";\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error(\"requires functionName\");\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n  _expandFunctionParamList(params) {\n    if (params === void 0 || !Array.isArray(params)) {\n      throw new Error(\"_expandFunctionParamList: function parameters array required, including an empty one for no arguments\");\n    }\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error(\"function or trigger used with a parameter without any type\");\n      }\n      const joined = paramDef.join(\" \");\n      if (joined) paramList.push(joined);\n    });\n    return paramList.join(\", \");\n  }\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error(\"_expandFunctionVariableList: function variables must be an array\");\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error(\"function variable must have a name and type\");\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += \";\";\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(\" \");\n  }\n  expandOptions(options) {\n    return options === void 0 || _.isEmpty(options) ? \"\" : options.join(\" \");\n  }\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      \"after\": \"AFTER\",\n      \"before\": \"BEFORE\",\n      \"instead_of\": \"INSTEAD OF\",\n      \"after_constraint\": \"AFTER\"\n    };\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n    return EVENT_DECODER[eventSpecifier];\n  }\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === \"after_constraint\" ? \"CONSTRAINT \" : \"\";\n  }\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error(\"no table change events specified to trigger on\");\n    }\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        \"insert\": \"INSERT\",\n        \"update\": \"UPDATE\",\n        \"delete\": \"DELETE\",\n        \"truncate\": \"TRUNCATE\"\n      };\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === \"UPDATE\") {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(\", \")}`;\n        }\n      }\n      return eventSpec;\n    }).join(\" OR \");\n  }\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n    return enumName;\n  }\n  pgListEnums(tableName, attrName, options) {\n    let enumName = \"\";\n    const tableDetails = this.extractTableDetails(tableName, options);\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\")}`;\n    }\n    return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(\", \")})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n    if (semver.gte(this.sequelize.options.databaseVersion, \"9.3.0\")) {\n      sql += \"IF NOT EXISTS \";\n    }\n    sql += this.escape(value);\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n    return sql;\n  }\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n  fromArray(text) {\n    text = text.replace(/^{/, \"\").replace(/}$/, \"\");\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n    if (matches.length < 1) {\n      return [];\n    }\n    matches = matches.map(m => m.replace(/\",$/, \"\").replace(/,$/, \"\").replace(/(^\"|\"$)/g, \"\"));\n    return matches.slice(0, -1);\n  }\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n    if (dataType.startsWith(\"ENUM(\")) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n    return dataType;\n  }\n  getForeignKeysQuery(tableName) {\n    return `SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n  _getForeignKeyReferencesQueryPrefix() {\n    return \"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name \";\n  }\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : \"\"}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : \"\"}`;\n  }\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : \"\"}`;\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\nmodule.exports = PostgresQueryGenerator;","map":{"version":3,"mappings":"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","names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","POSTGRES_RESERVED_WORDS","split","setSearchPath","searchPath","createDatabaseQuery","databaseName","options","__spreadValues","encoding","collate","values","database","quoteTable","escape","collation","ctype","template","dropDatabaseQuery","createSchema","schema","databaseVersion","get","gte","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","attrStr","comments","columnComments","quotedTable","comment","attr","quotedAttr","quoteIdentifier","i","indexOf","escapedCommentText","substring","dataType","dataTypeMapping","push","attributesClause","join","uniqueKeys","each","columns","customIndex","fields","map","field","pks","reduce","acc","attribute","key","includes","length","dropTableQuery","cascade","showTablesQuery","tableExistsQuery","table","describeTableQuery","_checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","value","str","paths","toPath","column","shift","format","call","addColumnQuery","dbDataType","attributeToSQL","context","type","definition","quotedKey","extractTableDetails","query","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","subQuery","sql","attrSql","replace","trim","match","startsWith","pgEnumName","renameColumnQuery","attrBefore","attrString","fn","fnName","parameters","body","returns","language","truncateTableQuery","restartIdentity","deleteQuery","where","model","whereClause","getWhereConditions","limit","primaryKeys","primaryKeysSelection","Object","pk","primaryKeyAttributes","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","concurrently","quoteIdentifiers","filter","Boolean","addLimitAndOffset","fragment","offset","isPlainObject","ARRAY","enumType","Array","isArray","toString","prototype","hasOwnProperty","allowNull","autoIncrement","autoIncrementIdentity","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","addSchema","_schema","referencesKey","withoutForeignKeyConstraints","onDelete","toUpperCase","onUpdate","deferrable","deferConstraintsQuery","setConstraintQuery","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","_expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","variableList","variables","_expandFunctionVariableList","expandedOptionsArray","statement","force","dropFunction","renameFunction","oldFunctionName","newFunctionName","pgEscapeAndQuote","val","removeTicks","forEach","curParam","paramDef","direction","name","joined","variableDefinitions","variable","variableDefinition","default","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","addTicks","generateEnumName","delimiter","pgListEnums","attrName","pgEnumDrop","pgEnumAdd","sequelize","before","after","fromArray","text","matches","m","slice","getForeignKeysQuery","_getForeignKeyReferencesQueryPrefix","getForeignKeyReferencesQuery","catalogName","schemaName","getForeignKeyReferenceQuery","columnName","dropForeignKeyQuery","foreignKey","identifier","optForceQuote","optQuoteIdentifiers","rawIdentifier","toLowerCase","module","exports","PostgresQueryGenerator"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\postgres\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    const schema = this.options.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;\n  }\n\n  tableExistsQuery(tableName) {\n    const table = tableName.tableName || tableName;\n    const schema = tableName.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;\n  }\n\n  describeTableQuery(tableName, schema) {\n    schema = schema || this.options.schema || 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)}`;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return [\n      'DROP INDEX',\n      options && options.concurrently && 'CONCURRENTLY',\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(' ');\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (!options.withoutForeignKeyConstraints) {\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier('id');\n        }\n\n        sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n        if (attribute.onDelete) {\n          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n        }\n\n        if (attribute.onUpdate) {\n          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n        }\n\n        if (attribute.references.deferrable) {\n          sql += ` ${attribute.references.deferrable.toString(this)}`;\n        }\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'tc.initially_deferred as initially_deferred,' +\n      'tc.is_deferrable as is_deferrable,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Postgres if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}