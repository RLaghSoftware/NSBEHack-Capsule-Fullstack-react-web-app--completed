{"ast":null,"code":"\"use strict\";\n\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.snowflake.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.snowflake = [\"DATETIME\"];\n  BaseTypes.STRING.types.snowflake = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.snowflake = [\"STRING\"];\n  BaseTypes.TEXT.types.snowflake = [\"BLOB\"];\n  BaseTypes.TINYINT.types.snowflake = [\"TINY\"];\n  BaseTypes.SMALLINT.types.snowflake = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.snowflake = [\"INT24\"];\n  BaseTypes.INTEGER.types.snowflake = [\"LONG\"];\n  BaseTypes.BIGINT.types.snowflake = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.snowflake = [\"FLOAT\"];\n  BaseTypes.TIME.types.snowflake = [\"TIME\"];\n  BaseTypes.DATEONLY.types.snowflake = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.snowflake = [\"TINY\"];\n  BaseTypes.BLOB.types.snowflake = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.snowflake = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.snowflake = false;\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.snowflake = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.snowflake = [\"JSON\"];\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP\";\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"VARCHAR(36)\";\n    }\n  }\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return \"TEXT\";\n    }\n  }\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n  }\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n  }\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"mappings":";;AAEA,MAAMA,WAAWC,QAAQ;AACzB,MAAMC,SAASD,QAAQ;AAEvBE,OAAOC,UAAUC,aAAa;EAC5BA,UAAUC,SAASC,UAAUC,eAAe;EAS5CH,UAAUI,KAAKC,MAAMC,YAAY,CAAC;EAClCN,UAAUO,OAAOF,MAAMC,YAAY,CAAC;EACpCN,UAAUQ,KAAKH,MAAMC,YAAY,CAAC;EAClCN,UAAUS,KAAKJ,MAAMC,YAAY,CAAC;EAClCN,UAAUU,QAAQL,MAAMC,YAAY,CAAC;EACrCN,UAAUW,SAASN,MAAMC,YAAY,CAAC;EACtCN,UAAUY,UAAUP,MAAMC,YAAY,CAAC;EACvCN,UAAUa,QAAQR,MAAMC,YAAY,CAAC;EACrCN,UAAUc,OAAOT,MAAMC,YAAY,CAAC;EACpCN,UAAUe,MAAMV,MAAMC,YAAY,CAAC;EACnCN,UAAUgB,KAAKX,MAAMC,YAAY,CAAC;EAClCN,UAAUiB,SAASZ,MAAMC,YAAY,CAAC;EACtCN,UAAUkB,QAAQb,MAAMC,YAAY,CAAC;EACrCN,UAAUmB,KAAKd,MAAMC,YAAY,CAAC,YAAY,QAAQ;EACtDN,UAAUoB,QAAQf,MAAMC,YAAY,CAAC;EACrCN,UAAUqB,KAAKhB,MAAMC,YAAY;EAGjCN,UAAUsB,KAAKjB,MAAMC,YAAY;EACjCN,UAAUuB,KAAKlB,MAAMC,YAAY,CAAC;EAClCN,UAAUwB,OAAOnB,MAAMC,YAAY,CAAC;EACpCN,UAAUyB,SAASpB,MAAMC,YAAY,CAAC;EACtCN,UAAU0B,KAAKrB,MAAMC,YAAY,CAAC;EAElC,mBAAmBN,UAAUI,KAAK;IAChCuB,QAAQ;MACN,OAAO;IAAA;IAETC,WAAWC,MAAMC,SAAS;MACxB,IAAI,CAACjC,OAAOkC,SAASF,OAAO;QAC1BA,OAAO,KAAKG,eAAeH,MAAMC;MAAA;MAEnC,IAAI,KAAKG,SAAS;QAChB,OAAOJ,KAAKK,OAAO;MAAA;MAErB,OAAOL,KAAKK,OAAO;IAAA;IAAA,OAEdC,MAAMC,OAAON,SAAS;MAC3BM,QAAQA,MAAMC;MACd,IAAID,UAAU,MAAM;QAClB,OAAOA;MAAA;MAET,IAAIzC,SAAS2C,GAAGC,KAAKT,QAAQU,WAAW;QACtCJ,QAAQzC,SAAS2C,GAAGF,OAAON,QAAQU,UAAUC;MAAA,OAE1C;QACHL,QAAQ,IAAIM,KAAK,GAAGN,SAASN,QAAQU;MAAA;MAEvC,OAAOJ;IAAA;EAAA;EAIX,uBAAuBpC,UAAUiB,SAAS;IAAA,OACjCkB,MAAMC,OAAO;MAClB,OAAOA,MAAMC;IAAA;EAAA;EAGjB,mBAAmBrC,UAAUqB,KAAK;IAChCM,QAAQ;MAEN,OAAO;IAAA;EAAA;EAIX,mBAAmB3B,UAAUS,KAAK;IAChCkB,QAAQ;MACN,OAAO;IAAA;EAAA;EAIX,sBAAsB3B,UAAUkB,QAAQ;IACtCS,QAAQ;MACN,OAAO;IAAA;EAAA;EAIX,uBAAuB3B,UAAU0B,KAAK;IACpCE,WAAWQ,OAAON,SAAS;MACzB,OAAOA,QAAQa,cAAc,WAAW,OAAOP,UAAU,WAAWA,QAAQV,KAAKkB,UAAUR;IAAA;EAAA;EAI/F,OAAO;IACL3B;IACAL;IACAc;IACAD;IACAI;IACAK,MAAMmB;EAAA;AAAA","names":["momentTz","require","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","snowflake","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","toSql","_stringify","date","options","isMoment","_applyTimezone","_length","format","parse","value","string","tz","zone","timezone","toDate","Date","operation","stringify","JSONTYPE"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}