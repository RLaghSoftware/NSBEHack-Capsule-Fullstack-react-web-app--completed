{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractDialect = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").db2;\nconst {\n  Db2QueryInterface\n} = require(\"./query-interface\");\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT\": true,\n  \"DEFAULT VALUES\": false,\n  \"VALUES ()\": false,\n  \"LIMIT ON UPDATE\": false,\n  \"ORDER NULLS\": false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\nDb2Dialect.prototype.defaultVersion = \"1.0.0\";\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = \"db2\";\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\nmodule.exports = Db2Dialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ;AAClB,MAAMC,kBAAkBD,QAAQ;AAChC,MAAME,oBAAoBF,QAAQ;AAClC,MAAMG,QAAQH,QAAQ;AACtB,MAAMI,iBAAiBJ,QAAQ;AAC/B,MAAMK,YAAYL,QAAQ,oBAAoBM;AAC9C,MAAM;EAAEC;AAAA,IAAsBP,QAAQ;AAEtC,yBAAyBC,gBAAgB;EACvCO,YAAYC,WAAW;IACrB;IACA,KAAKA,YAAYA;IACjB,KAAKC,oBAAoB,IAAIR,kBAAkB,MAAMO;IACrD,KAAKE,iBAAiB,IAAIP,eAAe;MACvCQ,UAAU;MACVH;IAAA;IAEF,KAAKI,iBAAiB,IAAIN,kBAAkBE,WAAW,KAAKE;EAAA;AAAA;AAIhEG,WAAWC,UAAUC,WAAWjB,EAAEkB,MAAMlB,EAAEmB,UAAUjB,gBAAgBc,UAAUC,WAAW;EACvF,WAAW;EACX,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACfG,MAAM;EACNC,cAAc;EACdC,YAAY;EACZC,cAAc;EACdC,SAAS;EACTC,YAAY;EACZC,eAAe;IACbC,gBAAgB;IAChBC,cAAc;IACdC,QAAQ;EAAA;EAEVC,aAAa;IACXC,UAAU;IACVC,SAAS;EAAA;EAEXC,OAAO;IACLC,SAAS;IACTC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPC,OAAO;EAAA;EAETC,SAAS;EACTC,iBAAiB;AAAA;AAGnB1B,WAAWC,UAAU0B,iBAAiB;AACtC3B,WAAWC,UAAUZ,QAAQA;AAC7BW,WAAWC,UAAU2B,OAAO;AAC5B5B,WAAWC,UAAU4B,YAAY;AACjC7B,WAAWC,UAAU6B,iBAAiB;AACtC9B,WAAWC,UAAU8B,kBAAkB;AACvC/B,WAAWC,UAAUV,YAAYA;AAEjCyC,OAAOC,UAAUjC","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","db2","Db2QueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","Db2Dialect","prototype","supports","merge","cloneDeep","lock","transactions","migrations","returnValues","schemas","finalTable","autoIncrement","identityInsert","defaultValue","update","constraints","restrict","default","index","collate","length","parser","type","using","where","NUMERIC","tmpTableTrigger","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\db2\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').db2;\nconst { Db2QueryInterface } = require('./query-interface');\n\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ORDER NULLS': false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\n\nDb2Dialect.prototype.defaultVersion = '1.0.0'; // Db2 supported version comes here\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = 'db2';\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = Db2Dialect;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}