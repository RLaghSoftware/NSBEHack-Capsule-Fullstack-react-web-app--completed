{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mysql\");\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n    const complete = this._logQuery(sql, debug, parameters);\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n    let results;\n    const errForStack = new Error();\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection.query({\n            sql\n          }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n        options.transaction.finished = \"rollback\";\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n    return result;\n  }\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2].split(\".\").pop() : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n          const errors = [];\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","constructor","connection","sequelize","options","__spreadValues","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","values_","push","length","run","parameters","complete","_logQuery","results","errForStack","Error","Promise","resolve","reject","execute","error","result","setMaxListeners","query","transaction","errno","rollback","error_","finished","formatError","stack","warningStatus","logWarnings","formatResults","data","instance","isInsertQuery","handleInsertQuery","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","err","errStack","errCode","code","message","fields","split","fieldKey","pop","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","Query","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mysql\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}