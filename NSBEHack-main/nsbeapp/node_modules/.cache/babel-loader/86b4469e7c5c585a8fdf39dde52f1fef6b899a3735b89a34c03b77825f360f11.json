{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst wkx = require(\"wkx\");\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"http://www.postgresql.org/docs/9.4/static/datatype.html\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.UUID.types.postgres = [\"uuid\"];\n  BaseTypes.CIDR.types.postgres = [\"cidr\"];\n  BaseTypes.INET.types.postgres = [\"inet\"];\n  BaseTypes.MACADDR.types.postgres = [\"macaddr\"];\n  BaseTypes.TSVECTOR.types.postgres = [\"tsvector\"];\n  BaseTypes.JSON.types.postgres = [\"json\"];\n  BaseTypes.JSONB.types.postgres = [\"jsonb\"];\n  BaseTypes.TIME.types.postgres = [\"time\"];\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return \"Infinity\";\n      }\n      if (value === -Infinity) {\n        return \"-Infinity\";\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === \"string\") {\n          const lower = value.toLowerCase();\n          if (lower === \"infinity\") {\n            return Infinity;\n          }\n          if (lower === \"-infinity\") {\n            return -Infinity;\n          }\n        }\n        return super._sanitize(value);\n      }\n      return value;\n    }\n    static parse(value) {\n      if (value === \"infinity\") {\n        return Infinity;\n      }\n      if (value === \"-infinity\") {\n        return -Infinity;\n      }\n      return value;\n    }\n  }\n  BaseTypes.DATEONLY.types.postgres = [\"date\"];\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n  }\n  BaseTypes.DECIMAL.types.postgres = [\"numeric\"];\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return \"BYTEA\";\n      }\n      return super.toSql();\n    }\n  }\n  BaseTypes.STRING.types.postgres = [\"varchar\"];\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"TEXT\";\n    }\n  }\n  BaseTypes.TEXT.types.postgres = [\"text\"];\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n  }\n  BaseTypes.CITEXT.types.postgres = [\"citext\"];\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return \"BYTEA\";\n      }\n      return super.toSql();\n    }\n  }\n  BaseTypes.CHAR.types.postgres = [\"char\", \"bpchar\"];\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n    _sanitize(value) {\n      if (value !== null && value !== void 0) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          value = value[0];\n        }\n        if (typeof value === \"string\") {\n          return [\"true\", \"t\"].includes(value) ? true : [\"false\", \"f\"].includes(value) ? false : value;\n        }\n        if (typeof value === \"number\") {\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n  BaseTypes.BOOLEAN.types.postgres = [\"bool\"];\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP WITH TIME ZONE\";\n    }\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n      return true;\n    }\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return \"Infinity\";\n      }\n      if (value === -Infinity) {\n        return \"-Infinity\";\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === \"string\") {\n          const lower = value.toLowerCase();\n          if (lower === \"infinity\") {\n            return Infinity;\n          }\n          if (lower === \"-infinity\") {\n            return -Infinity;\n          }\n        }\n        return new Date(value);\n      }\n      return value;\n    }\n  }\n  BaseTypes.DATE.types.postgres = [\"timestamptz\"];\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.TINYINT.types.postgres = [\"int2\"];\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.SMALLINT.types.postgres = [\"int2\"];\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n  BaseTypes.INTEGER.types.postgres = [\"int4\"];\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.BIGINT.types.postgres = [\"int8\"];\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.REAL.types.postgres = [\"float4\"];\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.DOUBLE.types.postgres = [\"float8\"];\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._decimals) {\n        warn(\"PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._decimals = void 0;\n      }\n      if (this._unsigned) {\n        warn(\"PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n      if (this._zerofill) {\n        warn(\"PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n  }\n  delete FLOAT.parse;\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn(\"PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"BYTEA\";\n    }\n    _hexify(hex) {\n      return `E'\\\\\\\\x${hex}'`;\n    }\n  }\n  BaseTypes.BLOB.types.postgres = [\"bytea\"];\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, \"hex\");\n      return wkx.Geometry.parse(b).toGeoJSON({\n        shortCrs: true\n      });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n  BaseTypes.GEOMETRY.types.postgres = [\"geometry\"];\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = \"GEOGRAPHY\";\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, \"hex\");\n      return wkx.Geometry.parse(b).toGeoJSON({\n        shortCrs: true\n      });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n  BaseTypes.GEOGRAPHY.types.postgres = [\"geography\"];\n  let hstore;\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n    }\n    _value(value) {\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n      return hstore.stringify(value);\n    }\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n    static parse(value) {\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n      return hstore.parse(value);\n    }\n  }\n  HSTORE.prototype.escape = false;\n  BaseTypes.HSTORE.types.postgres = [\"hstore\"];\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, \"value\")) {\n          if (Object.prototype.hasOwnProperty.call(value, \"inclusive\")) {\n            valueInclusivity[index] = value.inclusive;\n          }\n          value = value.value;\n        }\n        if (value === null || value === -Infinity || value === Infinity) {\n          return value;\n        }\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n        return options.escape(value);\n      });\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n    _stringify(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n      return `'${value}'`;\n    }\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n      return options.bindParam(value);\n    }\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n    static parse(value) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        parser: val => val\n      };\n      return range.parse(value, options.parser);\n    }\n  }\n  const range = require(\"./range\");\n  RANGE.prototype.escape = false;\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: \"int4range\",\n      decimal: \"numrange\",\n      date: \"tstzrange\",\n      dateonly: \"daterange\",\n      bigint: \"int8range\"\n    },\n    castTypes: {\n      integer: \"int4\",\n      decimal: \"numeric\",\n      date: \"timestamptz\",\n      dateonly: \"date\",\n      bigint: \"int8\"\n    }\n  };\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this);\n  };\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(\",\")}]`;\n    if (this.type) {\n      const Utils = require(\"../../utils\");\n      let castKey = this.toSql();\n      if (this.type instanceof BaseTypes.ENUM) {\n        const table = options.field.Model.getTableName();\n        const useSchema = table.schema !== void 0;\n        const schemaWithDelimiter = useSchema ? `${Utils.addTicks(table.schema, '\"')}${table.delimiter}` : \"\";\n        castKey = `${Utils.addTicks(Utils.generateEnumName(useSchema ? table.tableName : table, options.field.field), '\"')}[]`;\n        str += `::${schemaWithDelimiter}${castKey}`;\n      } else {\n        str += `::${castKey}`;\n      }\n    }\n    return str;\n  };\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n  }\n  BaseTypes.ENUM.types.postgres = [null];\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};","map":{"version":3,"mappings":"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","names":["_","require","wkx","module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_length","options","length","_unsigned","_zerofill","key","UUID","types","postgres","CIDR","INET","MACADDR","TSVECTOR","JSON","JSONB","TIME","DATEONLY","_stringify","value","Infinity","_sanitize","raw","lower","toLowerCase","parse","DECIMAL","STRING","toSql","_binary","TEXT","CITEXT","CHAR","BOOLEAN","Buffer","isBuffer","includes","prototype","DATE","validate","Date","TINYINT","constructor","removeUnsupportedIntegerOptions","SMALLINT","INTEGER","parseInt","BIGINT","REAL","DOUBLE","FLOAT","decimals","_decimals","BLOB","_hexify","hex","GEOMETRY","result","type","srid","b","from","Geometry","toGeoJSON","shortCrs","escape","stringify","_bindParam","bindParam","GEOGRAPHY","hstore","HSTORE","_value","RANGE","values","Array","isArray","subtype","valueInclusivity","valuesStringified","map","index","isObject","Object","hasOwnProperty","call","inclusive","range","toCastType","subtypes","_subtype","castTypes","parser","val","integer","decimal","date","dateonly","bigint","ARRAY","str","join","Utils","castKey","ENUM","table","field","Model","getTableName","useSchema","schema","schemaWithDelimiter","addTicks","delimiter","generateEnumName","tableName"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\postgres\\data-types.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst wkx = require('wkx');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n\n  /**\n   * Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   *\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n  BaseTypes.UUID.types.postgres = ['uuid'];\n  BaseTypes.CIDR.types.postgres = ['cidr'];\n  BaseTypes.INET.types.postgres = ['inet'];\n  BaseTypes.MACADDR.types.postgres = ['macaddr'];\n  BaseTypes.TSVECTOR.types.postgres = ['tsvector'];\n  BaseTypes.JSON.types.postgres = ['json'];\n  BaseTypes.JSONB.types.postgres = ['jsonb'];\n  BaseTypes.TIME.types.postgres = ['time'];\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return super._sanitize(value);\n      }\n      return value;\n    }\n    static parse(value) {\n      if (value === 'infinity') {\n        return Infinity;\n      }\n      if (value === '-infinity') {\n        return -Infinity;\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATEONLY.types.postgres = ['date'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  // numeric\n  BaseTypes.DECIMAL.types.postgres = ['numeric'];\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.STRING.types.postgres = ['varchar'];\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  BaseTypes.TEXT.types.postgres = ['text'];\n\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.CITEXT.types.postgres = ['citext'];\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.CHAR.types.postgres = ['char', 'bpchar'];\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          return ['true', 't'].includes(value) ? true : ['false', 'f'].includes(value) ? false : value;\n        }\n        if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  BaseTypes.BOOLEAN.types.postgres = ['bool'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP WITH TIME ZONE';\n    }\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n      return true;\n    }\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return new Date(value);\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATE.types.postgres = ['timestamptz'];\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.TINYINT.types.postgres = ['int2'];\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.SMALLINT.types.postgres = ['int2'];\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  // int4\n  BaseTypes.INTEGER.types.postgres = ['int4'];\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int8\n  BaseTypes.BIGINT.types.postgres = ['int8'];\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float4\n  BaseTypes.REAL.types.postgres = ['float4'];\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float8\n  BaseTypes.DOUBLE.types.postgres = ['float8'];\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // POSTGRES does only support lengths as parameter.\n      // Values between 1-24 result in REAL\n      // Values between 25-53 result in DOUBLE PRECISION\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._decimals = undefined;\n      }\n      if (this._unsigned) {\n        warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n        this._length = undefined;\n      }\n      return 'BYTEA';\n    }\n    _hexify(hex) {\n      // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n      return `E'\\\\\\\\x${hex}'`;\n    }\n  }\n\n  BaseTypes.BLOB.types.postgres = ['bytea'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOMETRY.types.postgres = ['geometry'];\n\n\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = 'GEOGRAPHY';\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOGRAPHY.types.postgres = ['geography'];\n\n  let hstore;\n\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n    }\n    _value(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.stringify(value);\n    }\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n    static parse(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.parse(value);\n    }\n  }\n\n  HSTORE.prototype.escape = false;\n\n  BaseTypes.HSTORE.types.postgres = ['hstore'];\n\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, 'value')) {\n          if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) {\n            valueInclusivity[index] = value.inclusive;\n          }\n          value = value.value;\n        }\n        if (value === null || value === -Infinity || value === Infinity) {\n          // Pass through \"unbounded\" bounds unchanged\n          return value;\n        }\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n        return options.escape(value);\n      });\n      // Array.map does not preserve extra array properties\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n    _stringify(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n      return `'${value}'`;\n    }\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n      return options.bindParam(value);\n    }\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n    static parse(value, options = { parser: val => val }) {\n      return range.parse(value, options.parser);\n    }\n  }\n  const range = require('./range');\n\n  RANGE.prototype.escape = false;\n\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: 'int4range',\n      decimal: 'numrange',\n      date: 'tstzrange',\n      dateonly: 'daterange',\n      bigint: 'int8range'\n    },\n    castTypes: {\n      integer: 'int4',\n      decimal: 'numeric',\n      date: 'timestamptz',\n      dateonly: 'date',\n      bigint: 'int8'\n    }\n  };\n\n  // TODO: Why are base types being manipulated??\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this);\n  };\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(',')}]`;\n\n    if (this.type) {\n      const Utils = require('../../utils');\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        const table = options.field.Model.getTableName();\n        const useSchema = table.schema !== undefined;\n        const schemaWithDelimiter = useSchema ? `${Utils.addTicks(table.schema, '\"')}${table.delimiter}` : '';\n\n        castKey = `${Utils.addTicks(\n          Utils.generateEnumName(useSchema ? table.tableName : table, options.field.field),\n          '\"'\n        ) }[]`;\n\n        str += `::${schemaWithDelimiter}${castKey}`;\n      } else {\n        str += `::${castKey}`;\n      }\n    }\n\n    return str;\n  };\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.ENUM.types.postgres = [null];\n\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}