{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"../../utils\");\nconst Transaction = require(\"../../transaction\");\nconst _ = require(\"lodash\");\nconst MySqlQueryGenerator = require(\"../mysql/query-generator\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n  versionQuery() {\n    return \"SELECT sqlite_version() as `version`\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes(\"PRIMARY KEY\")).length > 1;\n    const attrArray = [];\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes(\"AUTOINCREMENT\");\n        let dataTypeString = dataType;\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          if (dataType.includes(\"INT\")) {\n            dataTypeString = containsAutoIncrement ? \"INTEGER PRIMARY KEY AUTOINCREMENT\" : \"INTEGER PRIMARY KEY\";\n            if (dataType.includes(\" REFERENCES\")) {\n              dataTypeString += dataType.substr(dataType.indexOf(\" REFERENCES\"));\n            }\n          }\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes(\"NOT NULL\")) {\n              dataTypeString = dataType.replace(\" PRIMARY KEY\", \"\");\n            } else {\n              dataTypeString = dataType.replace(\"PRIMARY KEY\", \"NOT NULL\");\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(\", \");\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = \"datetime\";\n      }\n    }\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, {\n      context: \"addColumn\"\n    });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n    return this.replaceBooleanDefaults(sql);\n  }\n  showTablesQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n          context: \"UPDATE\"\n        })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n          context: \"UPDATE\"\n        }, bindParam)}`);\n      }\n    }\n    let query;\n    const whereOptions = __spreadProps(__spreadValues({}, options), {\n      bindParam\n    });\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")} ${this.whereQuery(where, whereOptions)}`;\n    }\n    return {\n      query,\n      bind\n    };\n  }\n  truncateTableQuery(tableName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`DELETE FROM ${this.quoteTable(tableName)}`, options.restartIdentity ? `; DELETE FROM ${this.quoteTable(\"sqlite_sequence\")} WHERE ${this.quoteIdentifier(\"name\")} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), \"`\"), \"'\")};` : \"\"].join(\"\");\n  }\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    _.defaults(options, this.options);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n        if (Object.prototype.hasOwnProperty.call(dataType, \"allowNull\") && !dataType.allowNull) {\n          sql += \" NOT NULL\";\n        }\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n        if (dataType.unique === true) {\n          sql += \" UNIQUE\";\n        }\n        if (dataType.primaryKey) {\n          sql += \" PRIMARY KEY\";\n          if (dataType.autoIncrement) {\n            sql += \" AUTOINCREMENT\";\n          }\n        }\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier(\"id\");\n          }\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n        }\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n    return result;\n  }\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n    return `${sql};`;\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n  removeColumnQuery(tableName, attributes) {\n    attributes = this.attributesToSQL(attributes);\n    let backupTableName;\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(\", \");\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;\n  }\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(\", \");\n    return `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`).replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr => attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)).join(\", \");\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(\", \");\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;\n  }\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return \"-- SQLite is not able to choose the isolation level REPEATABLE READ.\";\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return \"PRAGMA read_uncommitted = ON;\";\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return \"PRAGMA read_uncommitted = OFF;\";\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return \"-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.\";\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, \"DEFAULT 0\").replace(/DEFAULT '?true'?/g, \"DEFAULT 1\");\n  }\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n  tableExistsQuery(tableName) {\n    return `SELECT name FROM sqlite_master WHERE type='table' AND name=${this.escape(this.addSchema(tableName))};`;\n  }\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n}\nmodule.exports = SQLiteQueryGenerator;","map":{"version":3,"mappings":"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","names":["Utils","require","Transaction","_","MySqlQueryGenerator","AbstractQueryGenerator","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","options","primaryKeys","needsMultiplePrimaryKeys","Object","values","filter","definition","includes","length","attrArray","attr","prototype","hasOwnProperty","call","dataType","containsAutoIncrement","dataTypeString","substr","indexOf","push","replace","quoteIdentifier","table","quoteTable","attrStr","join","pkString","map","pk","uniqueKeys","each","columns","customIndex","fields","field","sql","replaceBooleanDefaults","booleanValue","value","_checkValidJsonStatement","stmt","jsonFunctionRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","functionMatches","exec","tokenMatches","capturedToken","Error","_toJSONValue","Date","toISOString","Array","isArray","val","handleSequelizeMethod","smth","factory","prepend","Json","Cast","test","type","addColumnQuery","key","attributesToSQL","context","attribute","showTablesQuery","updateQuery","attrValueHash","where","defaults","removeNullValuesFromHash","omitNull","modelAttributeMap","bind","bindParam","SequelizeMethod","escape","format","query","whereOptions","__spreadProps","limit","whereQuery","truncateTableQuery","restartIdentity","addTicks","removeTicks","deleteQuery","model","whereClause","getWhereConditions","result","name","fieldName","isObject","toString","allowNull","defaultValueSchemable","defaultValue","unique","primaryKey","autoIncrement","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","showIndexesQuery","showConstraintsQuery","constraintName","removeIndexQuery","indexNameOrAttributes","indexName","underscore","describeTableQuery","schema","schemaDelimiter","_schema","_schemaDelimiter","addSchema","describeCreateTableQuery","removeColumnQuery","backupTableName","quotedTableName","quotedBackupTableName","attributeNames","keys","_alterConstraintQuery","createTableSql","renameColumnQuery","attrNameBefore","attrNameAfter","attributeNamesImport","attributeNamesExport","startTransactionQuery","transaction","parent","setIsolationLevelQuery","ISOLATION_LEVELS","REPEATABLE_READ","READ_UNCOMMITTED","READ_COMMITTED","SERIALIZABLE","getForeignKeysQuery","tableExistsQuery","identifier","force","module","exports","SQLiteQueryGenerator"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {TableName} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n\n  tableExistsQuery(tableName) {\n    return `SELECT name FROM sqlite_master WHERE type='table' AND name=${this.escape(this.addSchema(tableName))};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}