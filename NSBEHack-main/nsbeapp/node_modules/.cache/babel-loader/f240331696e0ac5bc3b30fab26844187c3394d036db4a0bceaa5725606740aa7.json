{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"./utils\");\nconst sequelizeError = require(\"./errors\");\nconst DataTypes = require(\"./data-types\");\nconst BelongsTo = require(\"./associations/belongs-to\");\nconst validator = require(\"./utils/validator-extras\").validator;\nconst {\n  promisify\n} = require(\"util\");\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = __spreadValues({\n      hooks: true\n    }, options);\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n    this.options = options;\n    this.modelInstance = modelInstance;\n    this.validator = validator;\n    this.errors = [];\n    this.inProgress = false;\n  }\n  async _validate() {\n    if (this.inProgress) throw new Error(\"Validations already in progress.\");\n    this.inProgress = true;\n    await Promise.all([this._perAttributeValidators(), this._customValidators()]);\n    if (this.errors.length) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks(\"beforeValidate\", this.modelInstance, this.options);\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks(\"validationFailed\", this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n    await runHooks(\"afterValidate\", this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n  async _perAttributeValidators() {\n    const validators = [];\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n      const value = this.modelInstance.dataValues[field];\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        this._validateSchema(rawAttribute, field, value);\n      }\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n    return await Promise.all(validators);\n  }\n  async _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance.constructor.options.validate, (validator2, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n      const valprom = this._invokeCustomValidator(validator2, validatorType).catch(() => {});\n      validators.push(valprom);\n    });\n    return await Promise.all(validators);\n  }\n  async _singleAttrValidate(value, field, allowNull) {\n    if ((value === null || value === void 0) && !allowNull) {\n      return;\n    }\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n      if ([\"isUrl\", \"isURL\", \"isEmail\"].includes(validatorType)) {\n        if (typeof test === \"object\" && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n      if (typeof test === \"function\") {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n      if (value === null || value === void 0) {\n        return;\n      }\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise);\n    });\n    return Promise.all(validators.map(validator2 => validator2.catch(rejection => {\n      const isBuiltIn = !!rejection.validatorName;\n      this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n    })));\n  }\n  async _invokeCustomValidator(validator2, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n    const validatorArity = validator2.length;\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator2.bind(this.modelInstance, invokeArgs))();\n        }\n        return await promisify(validator2.bind(this.modelInstance))();\n      } catch (e) {\n        return this._pushError(false, errorKey, e, optValue, validatorType);\n      }\n    }\n    try {\n      return await validator2.call(this.modelInstance, invokeArgs);\n    } catch (e) {\n      return this._pushError(false, errorKey, e, optValue, validatorType);\n    }\n  }\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    const valueString = String(value);\n    if (typeof validator[validatorType] !== \"function\") {\n      throw new Error(`Invalid validator function: ${validatorType}`);\n    }\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), {\n        validatorName: validatorType,\n        validatorArgs\n      });\n    }\n  }\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== \"string\" && [\"isAlpha\", \"isAlphanumeric\", \"isMobilePhone\"].includes(validatorType);\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === \"isImmutable\") {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === \"isIP\") {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === void 0)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find(association2 => association2 instanceof BelongsTo && association2.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, \"notNull.msg\", `${this.modelInstance.constructor.name}.${field} cannot be null`);\n        this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, \"notNull Violation\", field, value, this.modelInstance, \"is_null\"));\n      }\n    }\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(`${field} cannot be an array or an object`, \"string violation\", field, value, this.modelInstance, \"not_a_string\"));\n      }\n    }\n  }\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || \"Validation error\";\n    const error = new sequelizeError.ValidationErrorItem(message, \"Validation error\", errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : void 0, isBuiltin ? fnArgs : void 0);\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n    this.errors.push(error);\n  }\n}\nInstanceValidator.RAW_KEY_NAME = \"original\";\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;","map":{"version":3,"mappings":"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","names":["_","require","Utils","sequelizeError","DataTypes","BelongsTo","validator","promisify","constructor","modelInstance","options","__spreadValues","hooks","fields","skip","difference","Object","keys","rawAttributes","errors","inProgress","_validate","Error","Promise","all","_perAttributeValidators","_customValidators","length","ValidationError","validate","_validateAndRunHooks","runHooks","bind","error","newError","validators","forIn","rawAttribute","field","includes","value","dataValues","SequelizeMethod","_autoGenerated","autoIncrement","_validateSchema","prototype","hasOwnProperty","call","push","_singleAttrValidate","allowNull","each","validator2","validatorType","valprom","_invokeCustomValidator","catch","test","msg","validatorPromise","_invokeBuiltinValidator","map","rejection","isBuiltIn","validatorName","_pushError","validatorArgs","optAttrDefined","optValue","optField","isAsync","validatorArity","asyncArity","errorKey","invokeArgs","e","valueString","String","_extractValidatorArgs","assign","args","isLocalizedValidator","Array","isArray","slice","association","values","associations","find","association2","foreignKey","fieldName","get","associationAccessor","errMsg","name","ValidationErrorItem","type","STRING","TEXT","CITEXT","isObject","Buffer","isBuffer","isBuiltin","rawError","fnName","fnArgs","message","InstanceValidator","RAW_KEY_NAME","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\instance-validator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('./utils');\nconst sequelizeError = require('./errors');\nconst DataTypes = require('./data-types');\nconst BelongsTo = require('./associations/belongs-to');\nconst validator = require('./utils/validator-extras').validator;\nconst { promisify } = require('util');\n\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {object} options A dictionary with options.\n *\n * @private\n */\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = {\n      // assign defined and default options\n      hooks: true,\n      ...options\n    };\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n\n    this.options = options;\n\n    this.modelInstance = modelInstance;\n\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     *\n     * @name validator\n     * @private\n     */\n    this.validator = validator;\n\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n    this.errors = [];\n\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n    this.inProgress = false;\n  }\n\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n\n    this.inProgress = true;\n\n    await Promise.all([\n      this._perAttributeValidators(),\n      this._customValidators()\n    ]);\n\n    if (this.errors.length) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks('beforeValidate', this.modelInstance, this.options);\n\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks('validationFailed', this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n\n    await runHooks('afterValidate', this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance.constructor.options.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType)\n        // errors are handled in settling, stub this\n        .catch(() => {});\n\n      validators.push(valprom);\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n  async _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return;\n    }\n\n    // Promisify each validator\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n\n      if (['isUrl', 'isURL', 'isEmail'].includes(validatorType)) {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n\n      // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      // errors are handled in settling, stub this\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise);\n    });\n\n    return Promise\n      .all(validators.map(validator => validator.catch(rejection => {\n        const isBuiltIn = !!rejection.validatorName;\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      })));\n  }\n\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n  async _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n\n    const validatorArity = validator.length;\n    // check if validator is async and requires a callback\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator.bind(this.modelInstance, invokeArgs))();\n        }\n        return await promisify(validator.bind(this.modelInstance))();\n      } catch (e) {\n        return this._pushError(false, errorKey, e, optValue, validatorType);\n      }\n    }\n\n    try {\n      return await validator.call(this.modelInstance, invokeArgs);\n    } catch (e) {\n      return this._pushError(false, errorKey, e, optValue, validatorType);\n    }\n  }\n\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {object} An object with specific keys to invoke the validator.\n   */\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    // Cast value as string to pass new Validator.js string requirement\n    const valueString = String(value);\n    // check if Validator knows that kind of validation test\n    if (typeof validator[validatorType] !== 'function') {\n      throw new Error(`Invalid validator function: ${validatorType}`);\n    }\n\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });\n    }\n  }\n\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && ['isAlpha', 'isAlphanumeric', 'isMobilePhone'].includes(validatorType);\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, 'notNull.msg', `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          errMsg,\n          'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'is_null'\n        ));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          `${field} cannot be an array or an object`,\n          'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'not_a_string'\n        ));\n      }\n    }\n  }\n\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(\n      message,\n      'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n      errorKey,\n      value,\n      this.modelInstance,\n      fnName,\n      isBuiltin ? fnName : undefined,\n      isBuiltin ? fnArgs : undefined\n    );\n\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n\n    this.errors.push(error);\n  }\n}\n/**\n * The error key for arguments as passed by custom validators\n *\n * @type {string}\n * @private\n */\nInstanceValidator.RAW_KEY_NAME = 'original';\n\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}