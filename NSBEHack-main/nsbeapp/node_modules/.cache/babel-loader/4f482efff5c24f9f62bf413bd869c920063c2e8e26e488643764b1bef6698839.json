{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst util = require(\"util\");\nconst Op = require(\"../../operators\");\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\"CONSTRAINT_NAME as constraint_name\", \"CONSTRAINT_NAME as constraintName\", \"CONSTRAINT_SCHEMA as constraintSchema\", \"CONSTRAINT_SCHEMA as constraintCatalog\", \"TABLE_NAME as tableName\", \"TABLE_SCHEMA as tableSchema\", \"TABLE_SCHEMA as tableCatalog\", \"COLUMN_NAME as columnName\", \"REFERENCED_TABLE_SCHEMA as referencedTableSchema\", \"REFERENCED_TABLE_SCHEMA as referencedTableCatalog\", \"REFERENCED_TABLE_NAME as referencedTableName\", \"REFERENCED_COLUMN_NAME as referencedColumnName\"].join(\",\");\nconst typeWithoutDefault = /* @__PURE__ */new Set([\"BLOB\", \"TEXT\", \"GEOMETRY\", \"JSON\"]);\nclass MySQLQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n    this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {\n      [Op.regexp]: \"REGEXP\",\n      [Op.notRegexp]: \"NOT REGEXP\"\n    });\n  }\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\"CREATE DATABASE IF NOT EXISTS\", this.quoteIdentifier(databaseName), options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`, options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`, \";\"]);\n  }\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n  createSchema() {\n    return \"SHOW TABLES\";\n  }\n  showSchemasQuery() {\n    return \"SHOW TABLES\";\n  }\n  versionQuery() {\n    return \"SELECT VERSION() as `version`\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({\n      engine: \"InnoDB\",\n      charset: null,\n      rowFormat: null\n    }, options);\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n      if (dataType.includes(\"PRIMARY KEY\")) {\n        primaryKeys.push(attr);\n        if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n        }\n      } else if (dataType.includes(\"REFERENCES\")) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(\", \");\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n    return Utils.joinSQLFragments([\"CREATE TABLE IF NOT EXISTS\", table, `(${attributesClause})`, `ENGINE=${options.engine}`, options.comment && typeof options.comment === \"string\" && `COMMENT ${this.escape(options.comment)}`, options.charset && `DEFAULT CHARSET=${options.charset}`, options.collate && `COLLATE ${options.collate}`, options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`, options.rowFormat && `ROW_FORMAT=${options.rowFormat}`, \";\"]);\n  }\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(this.addSchema({\n      tableName,\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter\n    }));\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n  showTablesQuery(database) {\n    let query = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS', 'mysql', 'information_schema', 'performance_schema', 'sys')\";\n    }\n    return `${query};`;\n  }\n  tableExistsQuery(table) {\n    const tableName = this.escape(this.quoteTable(table).slice(1, -1));\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${tableName} AND TABLE_SCHEMA = ${this.escape(this.sequelize.config.database)}`;\n  }\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(table), \"ADD\", this.quoteIdentifier(key), this.attributeToSQL(dataType, {\n      context: \"addColumn\",\n      tableName: table,\n      foreignKey: key\n    }), \";\"]);\n  }\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP\", this.quoteIdentifier(attributeName), \";\"]);\n  }\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes(\"REFERENCES\")) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), attrString.length && `CHANGE ${attrString.join(\", \")}`, constraintString.length && `ADD ${constraintString.join(\", \")}`, \";\"]);\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"CHANGE\", attrString.join(\", \"), \";\"]);\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n      if (smth.path) {\n        let str;\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = \"datetime\";\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        smth.type = \"char\";\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = \"decimal\";\n      } else if (/text/i.test(smth.type)) {\n        smth.type = \"char\";\n      }\n    }\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n  _toJSONValue(value) {\n    if (typeof value === \"boolean\") {\n      return value.toString();\n    }\n    if (value === null) {\n      return \"null\";\n    }\n    return value;\n  }\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    let limit = \"\";\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n    if (options.limit) {\n      limit = ` LIMIT ${this.escape(options.limit)}`;\n    }\n    where = this.getWhereConditions(where, null, model, options);\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n    return query + limit;\n  }\n  showIndexesQuery(tableName, options) {\n    return Utils.joinSQLFragments([`SHOW INDEX FROM ${this.quoteTable(tableName)}`, options && options.database && `FROM \\`${options.database}\\``]);\n  }\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    return Utils.joinSQLFragments([\"SELECT CONSTRAINT_CATALOG AS constraintCatalog,\", \"CONSTRAINT_NAME AS constraintName,\", \"CONSTRAINT_SCHEMA AS constraintSchema,\", \"CONSTRAINT_TYPE AS constraintType,\", \"TABLE_NAME AS tableName,\", \"TABLE_SCHEMA AS tableSchema\", \"from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\", `WHERE table_name='${tableName}'`, constraintName && `AND constraint_name = '${constraintName}'`, schemaName && `AND TABLE_SCHEMA = '${schemaName}'`, \";\"]);\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return Utils.joinSQLFragments([\"DROP INDEX\", this.quoteIdentifier(indexName), \"ON\", this.quoteTable(tableName)]);\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    const attributeString = attribute.type.toString({\n      escape: this.escape.bind(this)\n    });\n    let template = attributeString;\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    }\n    if (attribute.autoIncrement) {\n      template += \" auto_increment\";\n    }\n    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n    if (attribute.first) {\n      template += \" FIRST\";\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === \"addColumn\" && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n    return result;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\"SELECT\", FOREIGN_KEY_FIELDS, `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`, `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`, \"AND REFERENCED_TABLE_NAME IS NOT NULL\", \";\"]);\n  }\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : \"\";\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n    return Utils.joinSQLFragments([\"SELECT\", FOREIGN_KEY_FIELDS, \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\", \"WHERE (\", [`REFERENCED_TABLE_NAME = ${quotedTableName}`, table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`, `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`], \") OR (\", [`TABLE_NAME = ${quotedTableName}`, table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`, `AND COLUMN_NAME = ${quotedColumnName}`, \"AND REFERENCED_TABLE_NAME IS NOT NULL\"], \")\"]);\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP FOREIGN KEY\", this.quoteIdentifier(foreignKey), \";\"]);\n  }\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n}\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, \"'\");\n}\nmodule.exports = MySQLQueryGenerator;","map":{"version":3,"mappings":"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","names":["_","require","Utils","AbstractQueryGenerator","util","Op","JSON_FUNCTION_REGEX","JSON_OPERATOR_REGEX","TOKEN_CAPTURE_REGEX","FOREIGN_KEY_FIELDS","join","typeWithoutDefault","Set","constructor","options","OperatorMap","__spreadProps","regexp","notRegexp","createDatabaseQuery","databaseName","__spreadValues","charset","collate","joinSQLFragments","quoteIdentifier","escape","dropDatabaseQuery","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","engine","rowFormat","primaryKeys","foreignKeys","attrStr","attr","Object","prototype","hasOwnProperty","call","dataType","match","includes","push","replace","table","quoteTable","attributesClause","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","comment","initialAutoIncrement","describeTableQuery","schema","schemaDelimiter","addSchema","_schema","_schemaDelimiter","showTablesQuery","database","query","tableExistsQuery","slice","sequelize","config","addColumnQuery","key","attributeToSQL","context","foreignKey","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","definition","attrName","renameColumnQuery","attrBefore","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","value","str","_checkValidJsonStatement","paths","toPath","column","shift","format","Cast","test","type","json","_toJSONValue","toString","truncateTableQuery","deleteQuery","where","model","limit","getWhereConditions","showIndexesQuery","showConstraintsQuery","constraintName","schemaName","removeIndexQuery","indexNameOrAttributes","underscore","attribute","isPlainObject","attributeString","bind","template","allowNull","autoIncrement","has","_binary","defaultValueSchemable","defaultValue","unique","primaryKey","first","after","withoutForeignKeyConstraints","references","fkName","onDelete","toUpperCase","onUpdate","attributesToSQL","result","stmt","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","indexOf","operatorMatches","tokenMatches","capturedToken","Error","getForeignKeysQuery","getForeignKeyQuery","columnName","quotedSchemaName","wrapSingleQuote","quotedTableName","quotedColumnName","dropForeignKeyQuery","identifier","force","addTicks","removeTicks","module","exports","MySQLQueryGenerator"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mysql\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst util = require('util');\nconst Op = require('../../operators');\n\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName'\n].join(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nclass MySQLQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP'\n    };\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return 'SHOW TABLES';\n  }\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null,\n      ...options\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // MySQL doesn't support inline REFERENCES declarations: move to the end\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';'\n    ]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\', \\'mysql\\', \\'information_schema\\', \\'performance_schema\\', \\'sys\\')';\n    }\n    return `${query};`;\n  }\n\n  tableExistsQuery(table) {\n    // remove first & last `, then escape as SQL string\n    const tableName = this.escape(this.quoteTable(table).slice(1, -1));\n\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${tableName} AND TABLE_SCHEMA = ${this.escape(this.sequelize.config.database)}`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key\n      }),\n      ';'\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';'\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'CHANGE',\n      attrString.join(', '),\n      ';'\n    ]);\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        smth.type = 'char';\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = 'decimal';\n      } else if (/text/i.test(smth.type)) {\n        smth.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  _toJSONValue(value) {\n    // true/false are stored as strings in mysql\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n    // null is stored as a string in mysql\n    if (value === null) {\n      return 'null';\n    }\n    return value;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    let limit = '';\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    if (options.limit) {\n      limit = ` LIMIT ${this.escape(options.limit)}`;\n    }\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n\n    return query + limit;\n  }\n\n  showIndexesQuery(tableName, options) {\n    return Utils.joinSQLFragments([\n      `SHOW INDEX FROM ${this.quoteTable(tableName)}`,\n      options && options.database && `FROM \\`${options.database}\\``\n    ]);\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';'\n    ]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'DROP INDEX',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName)\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL'\n      ],\n      ')'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';'\n    ]);\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = MySQLQueryGenerator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}