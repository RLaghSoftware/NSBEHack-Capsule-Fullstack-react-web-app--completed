{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst sequelizeErrors = require(\"../../errors\");\nconst QueryTypes = require(\"../../query-types\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nconst {\n  cloneDeep\n} = require(\"../../utils\");\nconst _ = require(\"lodash\");\nclass SQLiteQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n    fields[attrNameAfter] = __spreadValues({}, fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n    const constraints = await this.showConstraint(tableName, constraintName);\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(\", \");\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n    createTableSql = createTableSql.replace(constraintSnippet, \"\");\n    createTableSql += \";\";\n    const fields = await this.describeTable(tableName, options);\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error(\"Fields must be specified through options.fields\");\n    }\n    if (!options.type) {\n      throw new Error(\"Constraint type must be specified through options.type\");\n    }\n    options = cloneDeep(options);\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n    const constraints = await this.sequelize.query(describeCreateTableSql, __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.SELECT,\n      raw: true\n    }));\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query(\"PRAGMA foreign_keys = OFF\", options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query(\"PRAGMA foreign_keys = ON\", options);\n  }\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n    if (typeof options === \"string\") {\n      schema = options;\n    } else if (typeof options === \"object\" && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n    if (typeof tableName === \"object\" && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.DESCRIBE\n    });\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n    try {\n      const data = await this.sequelize.query(sql, options);\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== void 0) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === \"ER_NO_SUCH_TABLE\") {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n      throw e;\n    }\n  }\n}\nexports.SQLiteQueryInterface = SQLiteQueryInterface;","map":{"version":3,"mappings":"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","names":["sequelizeErrors","require","QueryTypes","QueryInterface","cloneDeep","_","removeColumn","tableName","attributeName","options","fields","describeTable","sql","queryGenerator","removeColumnQuery","subQueries","split","filter","q","subQuery","sequelize","query","__spreadValues","raw","changeColumn","dataTypeOrOptions","Object","assign","normalizeAttribute","renameColumn","attrNameBefore","attrNameAfter","assertTableHasColumn","renameColumnQuery","removeConstraint","constraintName","createTableSql","constraints","showConstraint","constraint","find","constaint","UnknownConstraintError","message","table","quoteIdentifier","constraintSnippet","constraintType","constraintCondition","referenceTableName","quoteTable","referenceTableKeys","map","columnName","join","updateAction","deleteAction","replace","_alterConstraintQuery","addConstraint","Error","type","getConstraintSnippet","describeCreateTableSql","describeCreateTableQuery","__spreadProps","SELECT","index","length","substr","getForeignKeyReferencesForTable","database","config","getForeignKeysQuery","result","row","from","referencedTableName","referencedColumnName","to","tableCatalog","referencedTableCatalog","dropAllTables","skip","tableNames","showAllTables","_dropAllTables","schema","schemaDelimiter","describeTableQuery","DESCRIBE","sqlIndexes","showIndexesQuery","data","isEmpty","indexes","prop","unique","field","attribute","foreignKeys","foreignKey","references","model","key","e","original","code","exports","SQLiteQueryInterface"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}