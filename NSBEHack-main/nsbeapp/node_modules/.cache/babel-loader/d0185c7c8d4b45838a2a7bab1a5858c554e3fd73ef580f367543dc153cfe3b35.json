{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:snowflake\");\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n    const complete = this._logQuery(sql, debug, parameters);\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n    let results;\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n        options.transaction.finished = \"rollback\";\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n    if (this.isSelectQuery()) {\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n        data = data.map(data2 => _.reduce(data2, (prev, value, key) => {\n          if (value !== void 0 && sfAttrMap[key]) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data2));\n      }\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => {\n        return k.toUpperCase();\n      });\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0][\"number of rows updated\"];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n    return result;\n  }\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n  formatError(err) {\n    const errCode = err.errno || err.code;\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2] : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n          const errors = [];\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","_match","key","values_","push","length","run","parameters","connection","options","showWarnings","sequelize","complete","_logQuery","results","Promise","resolve","reject","execute","sqlText","binds","err","_stmt","rows","error","transaction","errno","rollback","error_","finished","formatError","warningStatus","logWarnings","formatResults","data","result","instance","isInsertQuery","handleInsertQuery","constructor","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","raw","quoteIdentifiers","sfAttrMap","reduce","m","v","k","toUpperCase","map","data2","prev","value","fieldMap","mapKeys","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","errCode","code","match","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","Query","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:snowflake');\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // ignore errors\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      // Snowflake will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n\n        data = data.map(data => _.reduce(data, (prev, value, key) => {\n          if ( value !== undefined && sfAttrMap[key] ) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data));\n      }\n\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => { return k.toUpperCase(); });\n\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0]['number of rows updated'];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}