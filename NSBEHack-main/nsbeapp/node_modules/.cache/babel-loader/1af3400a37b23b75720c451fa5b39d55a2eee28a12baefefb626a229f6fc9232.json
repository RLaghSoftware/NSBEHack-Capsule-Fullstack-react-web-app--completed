{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"./utils/logger\");\nconst debug = logger.debugContext(\"hooks\");\nconst hookTypes = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: [\"beforeUpdate\", \"beforeCreate\"]\n  },\n  afterSave: {\n    params: 2,\n    proxies: [\"afterUpdate\", \"afterCreate\"]\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterDefine: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeInit: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterInit: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeAssociate: {\n    params: 2,\n    sync: true\n  },\n  afterAssociate: {\n    params: 2,\n    sync: true\n  },\n  beforeConnect: {\n    params: 1,\n    noModel: true\n  },\n  afterConnect: {\n    params: 2,\n    noModel: true\n  },\n  beforeDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  afterDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  },\n  beforeQuery: {\n    params: 2\n  },\n  afterQuery: {\n    params: 2\n  }\n};\nexports.hooks = hookTypes;\nconst getProxiedHooks = hookType => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\nconst Hooks = {\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n  async runHooks(hooks) {\n    if (!hooks) throw new Error(\"runHooks requires at least 1 argument\");\n    let hookType;\n    if (typeof hooks === \"string\") {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n    for (var _len = arguments.length, hookArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      hookArgs[_key - 1] = arguments[_key];\n    }\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === \"object\") {\n          hook = hook.fn;\n        }\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n    for (let hook of hooks) {\n      if (typeof hook === \"object\") {\n        hook = hook.fn;\n      }\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n  addHook(hookType, name, fn) {\n    if (typeof name === \"function\") {\n      fn = name;\n      name = null;\n    }\n    debug(`adding hook ${hookType}`);\n    hookType = getProxiedHooks(hookType);\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? {\n        name,\n        fn\n      } : fn);\n      this.options.hooks[type] = hooks;\n    });\n    return this;\n  },\n  removeHook(hookType, name) {\n    const isReference = typeof name === \"function\" ? true : false;\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n    debug(`removing hook ${hookType}`);\n    hookType = getProxiedHooks(hookType);\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === \"function\") {\n          return hook !== name;\n        }\n        if (!isReference && typeof hook === \"object\") {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n    return this;\n  },\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\nfunction applyTo(target) {\n  let isModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  _.mixin(target, Hooks);\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function (name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;","map":{"version":3,"mappings":"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","names":["_","require","logger","debug","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","noModel","afterDefine","beforeInit","afterInit","beforeAssociate","afterAssociate","beforeConnect","afterConnect","beforeDisconnect","afterDisconnect","beforeSync","afterSync","beforeBulkSync","afterBulkSync","beforeQuery","afterQuery","exports","hooks","getProxiedHooks","hookType","concat","hooked","options","Hooks","_setupHooks","map","hooksArray","hookName","Array","isArray","forEach","hookFn","addHook","runHooks","Error","getHooks","sequelize","hookArgs","hook","fn","apply","name","type","push","removeHook","isReference","hasHook","filter","length","hasHooks","target","isModel","mixin","Object","keys","callback","applyTo"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\hooks.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  async runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    for (let hook of hooks) {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}