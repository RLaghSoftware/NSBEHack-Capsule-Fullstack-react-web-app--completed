{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractDialect = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").postgres;\nconst {\n  PostgresQueryInterface\n} = require(\"./query-interface\");\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);\n  }\n  canBackslashEscape() {\n    return !this.sequelize.options.standardConformingStrings;\n  }\n}\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT VALUES\": true,\n  EXCEPTION: true,\n  \"ON DUPLICATE KEY\": false,\n  \"ORDER NULLS\": true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: \"FOR SHARE\",\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: \" ON CONFLICT DO NOTHING\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  TSVECTOR: true,\n  deferrableConstraints: true,\n  searchPath: true,\n  escapeStringConstants: true\n});\nPostgresDialect.prototype.defaultVersion = \"9.5.0\";\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = \"postgres\";\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ;AAClB,MAAMC,kBAAkBD,QAAQ;AAChC,MAAME,oBAAoBF,QAAQ;AAClC,MAAMG,QAAQH,QAAQ;AACtB,MAAMI,iBAAiBJ,QAAQ;AAC/B,MAAMK,YAAYL,QAAQ,oBAAoBM;AAC9C,MAAM;EAAEC;AAAA,IAA2BP,QAAQ;AAE3C,8BAA8BC,gBAAgB;EAC5CO,YAAYC,WAAW;IACrB;IACA,KAAKA,YAAYA;IACjB,KAAKC,oBAAoB,IAAIR,kBAAkB,MAAMO;IACrD,KAAKE,iBAAiB,IAAIP,eAAe;MACvCQ,UAAU;MACVH;IAAA;IAEF,KAAKI,iBAAiB,IAAIN,uBACxBE,WACA,KAAKE;EAAA;EAITG,qBAAqB;IAKnB,OAAO,CAAC,KAAKL,UAAUM,QAAQC;EAAA;AAAA;AAInCC,gBAAgBC,UAAUC,WAAWpB,EAAEqB,MACrCrB,EAAEsB,UAAUpB,gBAAgBiB,UAAUC,WACtC;EACE,kBAAkB;EAClBG,WAAW;EACX,oBAAoB;EACpB,eAAe;EACfC,cAAc;IACZC,WAAW;EAAA;EAEbC,aAAa;EACbC,SAAS;EACTC,MAAM;EACNC,QAAQ;EACRC,SAAS;EACTC,sBAAsB;EACtBC,YAAY;EACZC,UAAU;EACVC,OAAO;IACLC,cAAc;IACdC,OAAO;IACPC,OAAO;IACPC,eAAe;IACfC,UAAU;EAAA;EAEZC,SAAS;IACPC,qBAAqB;IACrBC,mBAAmB;IACnBC,gBAAgB;EAAA;EAElBC,SAAS;EACTC,OAAO;EACPC,OAAO;EACPC,UAAU;EACVC,QAAQ;EACRC,WAAW;EACXC,MAAM;EACNC,OAAO;EACPC,QAAQ;EACRC,UAAU;EACVC,uBAAuB;EACvBC,YAAY;EACZC,uBAAuB;AAAA;AAI3BtC,gBAAgBC,UAAUsC,iBAAiB;AAC3CvC,gBAAgBC,UAAUf,QAAQA;AAClCc,gBAAgBC,UAAUb,YAAYA;AACtCY,gBAAgBC,UAAUuC,OAAO;AACjCxC,gBAAgBC,UAAUwC,YAAY;AACtCzC,gBAAgBC,UAAUyC,iBAAiB1C,gBAAgBC,UAAUwC;AACrEzC,gBAAgBC,UAAU0C,kBAAkB3C,gBAAgBC,UAAUwC;AAEtEG,OAAOC,UAAU7C;AACjB4C,OAAOC,QAAQC,UAAU9C;AACzB4C,OAAOC,QAAQ7C,kBAAkBA","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","postgres","PostgresQueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","canBackslashEscape","options","standardConformingStrings","PostgresDialect","prototype","supports","merge","cloneDeep","EXCEPTION","returnValues","returning","bulkDefault","schemas","lock","lockOf","lockKey","lockOuterJoinFailure","skipLocked","forShare","index","concurrently","using","where","functionBased","operator","inserts","onConflictDoNothing","updateOnDuplicate","conflictFields","NUMERIC","ARRAY","RANGE","GEOMETRY","REGEXP","GEOGRAPHY","JSON","JSONB","HSTORE","TSVECTOR","deferrableConstraints","searchPath","escapeStringConstants","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\postgres\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n\n  canBackslashEscape() {\n    // postgres can use \\ to escape if one of these is true:\n    // - standard_conforming_strings is off\n    // - the string is prefixed with E (out of scope for this method)\n\n    return !this.sequelize.options.standardConformingStrings;\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true,\n    escapeStringConstants: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}