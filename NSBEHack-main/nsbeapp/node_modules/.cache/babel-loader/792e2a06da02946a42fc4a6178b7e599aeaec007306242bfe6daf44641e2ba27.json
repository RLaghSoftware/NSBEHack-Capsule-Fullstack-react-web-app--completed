{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n  return target;\n};\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n__export(exports, {\n  ValidationErrorItem: () => ValidationErrorItem,\n  ValidationErrorItemOrigin: () => ValidationErrorItemOrigin,\n  ValidationErrorItemType: () => ValidationErrorItemType,\n  default: () => validation_error_default\n});\nvar import_base_error = __toModule(require(\"./base-error\"));\nvar ValidationErrorItemType = /* @__PURE__ */(ValidationErrorItemType2 => {\n  ValidationErrorItemType2[\"notnull violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"string violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"unique violation\"] = \"DB\";\n  ValidationErrorItemType2[\"validation error\"] = \"FUNCTION\";\n  return ValidationErrorItemType2;\n})(ValidationErrorItemType || {});\nvar ValidationErrorItemOrigin = /* @__PURE__ */(ValidationErrorItemOrigin2 => {\n  ValidationErrorItemOrigin2[\"CORE\"] = \"CORE\";\n  ValidationErrorItemOrigin2[\"DB\"] = \"DB\";\n  ValidationErrorItemOrigin2[\"FUNCTION\"] = \"FUNCTION\";\n  return ValidationErrorItemOrigin2;\n})(ValidationErrorItemOrigin || {});\nclass ValidationErrorItem {\n  constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {\n    __publicField(this, \"message\");\n    __publicField(this, \"type\");\n    __publicField(this, \"path\");\n    __publicField(this, \"value\");\n    __publicField(this, \"origin\");\n    __publicField(this, \"instance\");\n    __publicField(this, \"validatorKey\");\n    __publicField(this, \"validatorName\");\n    __publicField(this, \"validatorArgs\");\n    this.message = message || \"\";\n    this.type = null;\n    this.path = path || null;\n    this.value = value !== void 0 ? value : null;\n    this.origin = null;\n    this.instance = instance || null;\n    this.validatorKey = validatorKey || null;\n    this.validatorName = fnName || null;\n    this.validatorArgs = fnArgs || [];\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n  }\n  isValidationErrorItemOrigin(origin) {\n    return ValidationErrorItemOrigin[origin] !== void 0;\n  }\n  normalizeString(str) {\n    return str.toLowerCase().trim();\n  }\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === void 0 || !!useTypeAsNS;\n    const NSSep = NSSeparator === void 0 ? \".\" : NSSeparator;\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n    if (useNS && (typeof NSSep !== \"string\" || !NSSep.length)) {\n      throw new Error(\"Invalid namespace separator given, must be a non-empty string\");\n    }\n    if (!(typeof key === \"string\" && key.length)) {\n      return \"\";\n    }\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n__publicField(ValidationErrorItem, \"TypeStringMap\", ValidationErrorItemType);\n__publicField(ValidationErrorItem, \"Origins\", ValidationErrorItemOrigin);\nclass ValidationError extends import_base_error.default {\n  constructor(message, errors) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(message);\n    __publicField(this, \"errors\");\n    this.name = \"SequelizeValidationError\";\n    this.message = \"Validation Error\";\n    this.errors = errors || [];\n    if (message) {\n      this.message = message;\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => `${err.type || err.origin}: ${err.message}`).join(\",\\n\");\n    }\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\nvar validation_error_default = ValidationError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AAEA,wBAAsBC;AAOf,IAAKF,0BAAL,gBAAKG,4BAAL;EACLA,gDAAsB;EACtBA,+CAAqB;EACrBA,+CAAqB;EACrBA,+CAAqB;EAJX;AAAA;AAUL,IAAKJ,4BAAL,gBAAKK,8BAAL;EAILA,qCAAO;EAKPA,mCAAK;EAKLA,yCAAW;EAdD;AAAA;AAqBL,0BAA0B;EAiE/BC,YACEC,SACAC,MAGAC,MACAC,OACAC,UACAC,cACAC,QACAC,QACA;IA9DOC;IAKAA;IAKAA;IAKAA;IAEAA;IAKAA;IAKAA;IAKAA;IAKAA;IA0BP,KAAKR,UAAUA,WAAW;IAC1B,KAAKC,OAAO;IACZ,KAAKC,OAAOA,QAAQ;IAEpB,KAAKC,QAAQA,UAAU,SAAYA,QAAQ;IAE3C,KAAKM,SAAS;IAEd,KAAKL,WAAWA,YAAY;IAE5B,KAAKC,eAAeA,gBAAgB;IAEpC,KAAKK,gBAAgBJ,UAAU;IAE/B,KAAKK,gBAAgBJ,UAAU;IAE/B,IAAIN,MAAM;MACR,IAAI,KAAKW,4BAA4BX,OAAO;QAC1C,KAAKQ,SAASR;MAAA,OACT;QACL,MAAMY,gBAAgB,KAAKC,gBAAgBb;QAC3C,MAAMc,WAAWrB,wBAAwBmB;QAEzC,IAAIE,YAAYtB,0BAA0BsB,WAAW;UACnD,KAAKN,SAASM;UACd,KAAKd,OAAOA;QAAA;MAAA;IAAA;EAAA;EAQZW,4BACNH,QAGkD;IAClD,OACEhB,0BACEgB,YACI;EAAA;EAIFK,gBAAkCE,KAAW;IACnD,OAAOA,IAAIC,cAAcC;EAAA;EAc3BC,gBAAgBC,aAAsBC,aAA6B;IACjE,MAAMC,UAAUF,gBAAgB,UAAa,CAAC,CAACA;IAC/C,MAAMG,QAAQF,gBAAgB,SAAY,MAAMA;IAEhD,MAAMpB,OAAO,KAAKQ;IAClB,MAAMe,MAAM,KAAKnB,gBAAgB,KAAKK;IACtC,MAAMe,QAAQH,WAAWrB,QAAQR,0BAA0BQ;IAE3D,IAAIwB,UAAU,OAAOF,UAAU,YAAY,CAACA,MAAMG,SAAS;MACzD,MAAM,IAAIC,MAAM;IAAA;IAGlB,IAAI,EAAE,OAAOH,QAAQ,YAAYA,IAAIE,SAAS;MAC5C,OAAO;IAAA;IAGT,OAAQ,SAAQ,CAAC,KAAKjB,QAAQe,KAAKI,KAAKL,SAASC,KAAKP,cAAcC;EAAA;AAAA;AArJ/DV,cAJFhB,qBAIE,iBAAgBE;AAKhBc,cATFhB,qBASE,WAAUC;AA2JnB,8BAA8BoC,0BAAU;EAItC9B,YACEC,SACA8B,QAEA;IAAA,IADAC,8EAAwB;IAExB,MAAM/B;IAPCQ;IAQP,KAAKwB,OAAO;IACZ,KAAKhC,UAAU;IACf,KAAK8B,SAASA,UAAU;IAGxB,IAAI9B,SAAS;MACX,KAAKA,UAAUA;IAAA,WAGN,KAAK8B,OAAOJ,SAAS,KAAK,KAAKI,OAAO,GAAG9B,SAAS;MAC3D,KAAKA,UAAU,KAAK8B,OACjBG,IACEC,OACC,GAAGA,IAAIjC,QAAQiC,IAAIzB,WAAWyB,IAAIlC,WAErC4B,KAAK;IAAA;IAIV,IAAIG,QAAQI,OAAO;MACjB,KAAKA,QAAQJ,QAAQI;IAAA;EAAA;EAWzBC,IAAIlC,MAAqC;IACvC,OAAO,KAAK4B,OAAOO,OAA8B,CAACC,SAASC,UAAU;MACnE,IAAIA,MAAMrC,SAASA,MAAM;QACvBoC,QAAQE,KAAKD;MAAA;MAEf,OAAOD;IAAA,GACN;EAAA;AAAA;AAIP,IAAOG,2BAAQC","names":["__export","ValidationErrorItem","ValidationErrorItemOrigin","ValidationErrorItemType","default","__toModule","ValidationErrorItemType2","ValidationErrorItemOrigin2","constructor","message","type","path","value","instance","validatorKey","fnName","fnArgs","__publicField","origin","validatorName","validatorArgs","isValidationErrorItemOrigin","lowercaseType","normalizeString","realType","str","toLowerCase","trim","getValidatorKey","useTypeAsNS","NSSeparator","useTANS","NSSep","key","useNS","length","Error","join","import_base_error","errors","options","name","map","err","stack","get","reduce","reduced","error","push","validation_error_default","ValidationError"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\errors\\validation-error.ts"],"sourcesContent":["import type { Model } from '..';\nimport type { ErrorOptions } from './base-error';\nimport BaseError from './base-error';\n\n/**\n * An enum that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n */\nexport enum ValidationErrorItemType {\n  'notnull violation' = 'CORE',\n  'string violation' = 'CORE',\n  'unique violation' = 'DB',\n  'validation error' = 'FUNCTION',\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n */\nexport enum ValidationErrorItemOrigin {\n  /**\n   * specifies errors that originate from the sequelize \"core\"\n   */\n  CORE = 'CORE',\n\n  /**\n   * specifies validation errors that originate from the storage engine\n   */\n  DB = 'DB',\n\n  /**\n   * specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n   */\n  FUNCTION = 'FUNCTION',\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nexport class ValidationErrorItem {\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static TypeStringMap = ValidationErrorItemType;\n\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static Origins = ValidationErrorItemOrigin;\n\n  /**\n   * An error message\n   */\n  readonly message: string;\n\n  /**\n   * The type/origin of the validation error\n   */\n  readonly type: keyof typeof ValidationErrorItemType | null;\n\n  /**\n   * The field that triggered the validation error\n   */\n  readonly path: string | null;\n\n  /**\n   * The value that generated the error\n   */\n  readonly value: string | null;\n\n  readonly origin: keyof typeof ValidationErrorItemOrigin | null;\n\n  /**\n   * The DAO instance that caused the validation error\n   */\n  readonly instance: Model | null;\n\n  /**\n   * A validation \"key\", used for identification\n   */\n  readonly validatorKey: string | null;\n\n  /**\n   * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   */\n  readonly validatorName: string | null;\n\n  /**\n   * Parameters used with the BUILT-IN validator function, if applicable\n   */\n  readonly validatorArgs: unknown[];\n\n  /**\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\n   *\n   * @param message An error message\n   * @param type The type/origin of the validation error\n   * @param path The field that triggered the validation error\n   * @param value The value that generated the error\n   * @param instance the DAO instance that caused the validation error\n   * @param validatorKey a validation \"key\", used for identification\n   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(\n    message: string,\n    type:\n      | keyof typeof ValidationErrorItemType\n      | keyof typeof ValidationErrorItemOrigin,\n    path: string,\n    value: string,\n    instance: Model,\n    validatorKey: string,\n    fnName: string,\n    fnArgs: unknown[]\n  ) {\n    this.message = message || '';\n    this.type = null;\n    this.path = path || null;\n\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    this.instance = instance || null;\n\n    this.validatorKey = validatorKey || null;\n\n    this.validatorName = fnName || null;\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  private isValidationErrorItemOrigin(\n    origin:\n      | keyof typeof ValidationErrorItemOrigin\n      | keyof typeof ValidationErrorItemType\n  ): origin is keyof typeof ValidationErrorItemOrigin {\n    return (\n      ValidationErrorItemOrigin[\n        origin as keyof typeof ValidationErrorItemOrigin\n      ] !== undefined\n    );\n  }\n\n  private normalizeString<T extends string>(str: T): T {\n    return str.toLowerCase().trim() as T;\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,\n   *                    defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws {Error}    thrown if NSSeparator is found to be invalid.\n   */\n  getValidatorKey(useTypeAsNS: boolean, NSSeparator: string): string {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param message Error message\n * @param errors Array of ValidationErrorItem objects describing the validation errors\n */\nclass ValidationError extends BaseError {\n  /** Array of ValidationErrorItem objects describing the validation errors */\n  readonly errors: ValidationErrorItem[];\n\n  constructor(\n    message: string,\n    errors: ValidationErrorItem[],\n    options: ErrorOptions = {}\n  ) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors\n        .map(\n          (err: ValidationErrorItem) =>\n            `${err.type || err.origin}: ${err.message}`\n        )\n        .join(',\\n');\n    }\n\n    // Allow overriding the stack if the original stacktrace is uninformative\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n  get(path: string): ValidationErrorItem[] {\n    return this.errors.reduce<ValidationErrorItem[]>((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\n\nexport default ValidationError;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}