{"ast":null,"code":"\"use strict\";\n\nconst moment = require(\"moment\");\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  BaseTypes.GEOMETRY.types.mssql = false;\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.\");\n          return \"VARBINARY(256)\";\n        }\n        warn(\"MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.\");\n      }\n      return \"VARBINARY(MAX)\";\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n  STRING.prototype.escape = false;\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.\");\n          return \"NVARCHAR(256)\";\n        }\n        warn(\"MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.\");\n      }\n      return \"NVARCHAR(MAX)\";\n    }\n  }\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BIT\";\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36)\";\n    }\n  }\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"GETDATE()\";\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"DATETIMEOFFSET\";\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n  }\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn(\"MSSQL does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._decimals) {\n        warn(\"MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n      if (this._unsigned) {\n        warn(\"MSSQL does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n      if (this._zerofill) {\n        warn(\"MSSQL does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n  }\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};","map":{"version":3,"mappings":"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","names":["moment","require","module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_length","options","length","_unsigned","_zerofill","key","DATE","types","mssql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","toSql","toLowerCase","_hexify","hex","_binary","_stringify","value","prototype","escape","_bindParam","bindParam","Buffer","from","NOW","parse","format","constructor","removeUnsupportedIntegerOptions","decimals","_decimals"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mssql\\data-types.js"],"sourcesContent":["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}