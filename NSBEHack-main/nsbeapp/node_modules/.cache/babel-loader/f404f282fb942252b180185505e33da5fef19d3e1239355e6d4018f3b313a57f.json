{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst MySQLQueryGenerator = require(\"../mysql/query-generator\");\nconst Utils = require(\"./../../utils\");\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\"CREATE SCHEMA IF NOT EXISTS\", this.quoteIdentifier(schema), options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`, options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`, \";\"]);\n  }\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n  showSchemasQuery(options) {\n    const schemasToSkip = [\"'MYSQL'\", \"'INFORMATION_SCHEMA'\", \"'PERFORMANCE_SCHEMA'\"];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\"SELECT SCHEMA_NAME as schema_name\", \"FROM INFORMATION_SCHEMA.SCHEMATA\", `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(\", \")})`, \";\"]);\n  }\n  showTablesQuery(database) {\n    let query = \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')\";\n    }\n    return `${query};`;\n  }\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n}\nmodule.exports = MariaDBQueryGenerator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,sBAAsBC,QAAQ;AACpC,MAAMC,QAAQD,QAAQ;AAEtB,oCAAoCD,oBAAoB;EACtDG,aAAaC,QAAQC,SAAS;IAC5BA,UAAUC;MACRC,SAAS;MACTC,SAAS;IAAA,GACNH;IAGL,OAAOH,MAAMO,iBAAiB,CAC5B,+BACA,KAAKC,gBAAgBN,SACrBC,QAAQE,WAAW,yBAAyB,KAAKI,OAAON,QAAQE,YAChEF,QAAQG,WAAW,mBAAmB,KAAKG,OAAON,QAAQG,YAC1D;EAAA;EAIJI,WAAWR,QAAQ;IACjB,OAAO,yBAAyB,KAAKM,gBAAgBN;EAAA;EAGvDS,iBAAiBR,SAAS;IACxB,MAAMS,gBAAgB,CACpB,WACA,wBACA;IAEF,IAAIT,QAAQU,QAAQC,MAAMC,QAAQZ,QAAQU,SAASV,QAAQU,KAAKG,SAAS,GAAG;MAC1E,WAAWC,cAAcd,QAAQU,MAAM;QACrCD,cAAcM,KAAK,KAAKT,OAAOQ;MAAA;IAAA;IAGnC,OAAOjB,MAAMO,iBAAiB,CAC5B,qCACA,oCACA,6BAA6BK,cAAcO,KAAK,UAChD;EAAA;EAIJC,gBAAgBC,UAAU;IACxB,IAAIC,QAAQ;IACZ,IAAID,UAAU;MACZC,SAAS,uBAAuB,KAAKb,OAAOY;IAAA,OACvC;MACLC,SAAS;IAAA;IAEX,OAAO,GAAGA;EAAA;EAWZd,gBAAgBe,YAAYC,OAAO;IACjC,OAAOxB,MAAMyB,SAASzB,MAAM0B,YAAYH,YAAY,MAAM;EAAA;AAAA;AAI9DI,OAAOC,UAAUC","names":["MySQLQueryGenerator","require","Utils","createSchema","schema","options","__spreadValues","charset","collate","joinSQLFragments","quoteIdentifier","escape","dropSchema","showSchemasQuery","schemasToSkip","skip","Array","isArray","length","schemaName","push","join","showTablesQuery","database","query","identifier","force","addTicks","removeTicks","module","exports","MariaDBQueryGenerator"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mariadb\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      '\\'MYSQL\\'',\n      '\\'INFORMATION_SCHEMA\\'',\n      '\\'PERFORMANCE_SCHEMA\\''\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`,\n      ';'\n    ]);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n    return `${query};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\nmodule.exports = MariaDBQueryGenerator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}