{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractDialect = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").snowflake;\nconst {\n  SnowflakeQueryInterface\n} = require(\"./query-interface\");\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  lock: true,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\nSnowflakeDialect.prototype.defaultVersion = \"5.7.0\";\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = \"snowflake\";\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\nmodule.exports = SnowflakeDialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ;AAClB,MAAMC,kBAAkBD,QAAQ;AAChC,MAAME,oBAAoBF,QAAQ;AAClC,MAAMG,QAAQH,QAAQ;AACtB,MAAMI,iBAAiBJ,QAAQ;AAC/B,MAAMK,YAAYL,QAAQ,oBAAoBM;AAC9C,MAAM;EAAEC;AAAA,IAA4BP,QAAQ;AAE5C,+BAA+BC,gBAAgB;EAC7CO,YAAYC,WAAW;IACrB;IACA,KAAKA,YAAYA;IACjB,KAAKC,oBAAoB,IAAIR,kBAAkB,MAAMO;IACrD,KAAKE,iBAAiB,IAAIP,eAAe;MACvCQ,UAAU;MACVH;IAAA;IAEF,KAAKI,iBAAiB,IAAIN,wBAAwBE,WAAW,KAAKE;EAAA;AAAA;AAItEG,iBAAiBC,UAAUC,WAAWjB,EAAEkB,MAAMlB,EAAEmB,UAAUjB,gBAAgBc,UAAUC,WAAW;EAC7F,aAAa;EACb,mBAAmB;EACnBG,MAAM;EACNC,UAAU;EACVC,wCAAwC;EACxCC,SAAS;IACPC,kBAAkB;IAGlBC,mBAAmB;EAAA;EAErBC,OAAO;IACLC,SAAS;IACTC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,OAAO;EAAA;EAETC,aAAa;IACXC,gBAAgB;IAChBC,OAAO;EAAA;EAETC,eAAe;EACfC,YAAY;EACZC,SAAS;EAETC,UAAU;EACVC,MAAM;EACNC,QAAQ;EACRC,SAAS;AAAA;AAGX1B,iBAAiBC,UAAU0B,iBAAiB;AAC5C3B,iBAAiBC,UAAUZ,QAAQA;AACnCW,iBAAiBC,UAAUX,iBAAiBA;AAC5CU,iBAAiBC,UAAUV,YAAYA;AACvCS,iBAAiBC,UAAU2B,OAAO;AAClC5B,iBAAiBC,UAAU4B,YAAY;AACvC7B,iBAAiBC,UAAU6B,iBAAiB9B,iBAAiBC,UAAU4B;AACvE7B,iBAAiBC,UAAU8B,kBAAkB/B,iBAAiBC,UAAU4B;AAExEG,OAAOC,UAAUjC","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","snowflake","SnowflakeQueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","SnowflakeDialect","prototype","supports","merge","cloneDeep","lock","forShare","settingIsolationLevelDuringTransaction","inserts","ignoreDuplicates","updateOnDuplicate","index","collate","length","parser","type","using","constraints","dropConstraint","check","indexViaAlter","indexHints","NUMERIC","GEOMETRY","JSON","REGEXP","schemas","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').snowflake;\nconst { SnowflakeQueryInterface } = require('./query-interface');\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    // disable for now, but could be enable by approach below\n    // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  // disable for now, need more work to enable the GEOGRAPHY MAPPING\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\n\nSnowflakeDialect.prototype.defaultVersion = '5.7.0';\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = 'snowflake';\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\n\nmodule.exports = SnowflakeDialect;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}