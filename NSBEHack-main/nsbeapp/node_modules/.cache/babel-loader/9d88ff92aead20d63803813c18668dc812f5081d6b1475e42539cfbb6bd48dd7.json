{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst SqlString = require(\"../../sql-string\");\nconst QueryTypes = require(\"../../query-types\");\nconst Dot = require(\"dottie\");\nconst deprecations = require(\"../../utils/deprecations\");\nconst uuid = require(\"uuid\").v4;\nconst {\n  safeStringifyJson\n} = require(\"../../utils.js\");\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = __spreadValues({\n      plain: false,\n      raw: false,\n      logging: console.log\n    }, options);\n    this.checkLoggingOption();\n    if (options.rawErrors) {\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n    options = options || {};\n    if (typeof replacementFunc !== \"function\") {\n      options = replacementFunc || {};\n      replacementFunc = void 0;\n    }\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values2) => {\n          if (values2[key] !== void 0) {\n            return match;\n          }\n          return void 0;\n        };\n      } else {\n        replacementFunc = (match, key, values2, timeZone2, dialect2) => {\n          if (values2[key] !== void 0) {\n            return SqlString.escape(values2[key], timeZone2, dialect2);\n          }\n          return void 0;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values2, timeZone2, dialect2, options2) => {\n        if (origReplacementFunc(match, key, values2, timeZone2, dialect2, options2) !== void 0) {\n          return match;\n        }\n        return void 0;\n      };\n    }\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if (key === \"$\") {\n        return options.skipUnescape ? match : key;\n      }\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === void 0) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n  formatError(error, errStack) {\n    error.stack = errStack;\n    return error;\n  }\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.log;\n    }\n  }\n  getInsertIdField() {\n    return \"insertId\";\n  }\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : \"Must be unique\";\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, \"\"))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n  isInsertQuery(results, metaData) {\n    let result = true;\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n    result = result && this.sql.toLowerCase().startsWith(\"insert into\");\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n  handleSelectQuery(results) {\n    let result = null;\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result2 => _.reduce(fieldMap, (result3, name, field) => {\n        if (result3[field] !== void 0 && name !== field) {\n          result3[name] = result3[field];\n          delete result3[field];\n        }\n        return result3;\n      }, result2));\n    }\n    if (this.options.raw) {\n      result = results.map(result2 => {\n        let o = {};\n        for (const key in result2) {\n          if (Object.prototype.hasOwnProperty.call(result2, key)) {\n            o[key] = result2[key];\n          }\n        }\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n        return o;\n      });\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"show\");\n    result = result || this.sql.toLowerCase().startsWith(\"describe\");\n    return result;\n  }\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith(\"call\");\n  }\n  _logQuery(sql, debugContext, parameters) {\n    const {\n      connection,\n      options\n    } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = \"\";\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(\";\") ? \"\" : \";\";\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p => safeStringifyJson(p)).join(\", \");\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || \"default\"}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n  static _groupJoinData(rows, includeOptions, options) {\n    if (!rows.length) {\n      return [];\n    }\n    let i;\n    let length;\n    let $i;\n    let $length;\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString;\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key2, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key2)) {\n        memo[key2] = key2.substr(0, key2.lastIndexOf(\".\"));\n      }\n      return memo[key2];\n    };\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key2)) {\n        const index = key2.lastIndexOf(\".\");\n        removeKeyPrefixMemo[key2] = key2.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key2];\n    };\n    const keyPrefixMemo = {};\n    const keyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key2)) {\n        const prefixString = keyPrefixString(key2, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split(\".\") : [];\n        }\n        keyPrefixMemo[key2] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key2];\n    };\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key2)) {\n        const prefix2 = keyPrefix(key2);\n        const length2 = prefix2.length;\n        lastKeyPrefixMemo[key2] = !length2 ? \"\" : prefix2[length2 - 1];\n      }\n      return lastKeyPrefixMemo[key2];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes2;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString(\"hex\") : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n      if (checkExisting) {\n        topExists = false;\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = \"\";\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n      topValues = values = {};\n      $prevKeyPrefix = void 0;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[\"\"] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = void 0;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n            values = {};\n          } else {\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n    return results;\n  }\n}\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"mappings":"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","names":["_","require","SqlString","QueryTypes","Dot","deprecations","uuid","v4","safeStringifyJson","constructor","connection","sequelize","options","instance","model","__spreadValues","plain","raw","logging","console","log","checkLoggingOption","rawErrors","formatError","AbstractQuery","prototype","formatBindParameters","sql","values","dialect","replacementFunc","skipValueReplace","match","key","values2","timeZone2","dialect2","escape","origReplacementFunc","options2","timeZone","list","Array","isArray","replace","skipUnescape","replVal","Error","error","errStack","stack","run","noTrueLogging","getInsertIdField","getUniqueConstraintErrorMessage","field","message","Object","keys","uniqueKeys","fields","includes","msg","isRawQuery","type","RAW","isVersionQuery","VERSION","isUpsertQuery","UPSERT","isInsertQuery","results","metaData","result","INSERT","toLowerCase","startsWith","hasOwnProperty","call","handleInsertQuery","autoIncrementAttribute","id","isShowTablesQuery","SHOWTABLES","handleShowTablesQuery","flatten","map","resultSet","isShowIndexesQuery","SHOWINDEXES","isShowConstraintsQuery","SHOWCONSTRAINTS","isDescribeQuery","DESCRIBE","isSelectQuery","SELECT","isBulkUpdateQuery","BULKUPDATE","isBulkDeleteQuery","BULKDELETE","isForeignKeysQuery","FOREIGNKEYS","isUpdateQuery","UPDATE","handleSelectQuery","fieldMap","result2","reduce","result3","name","o","nest","transform","hasJoin","_groupJoinData","includeMap","includeNames","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","include","includeValidated","attributes","originalAttributes","length","isShowOrDescribeQuery","isCallQuery","_logQuery","debugContext","parameters","benchmark","logQueryParameters","startTime","Date","now","logParameter","delimiter","endsWith","paramStr","p","join","fmt","afterMsg","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","key2","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix2","length2","getUniqueKeyAttributes","uniqueKeyAttributes2","chain","findKey","chr","value","stringify","obj","Buffer","toString","primaryKeyAttributes","uniqueKeyAttributes","prefix","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\abstract\\query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\nconst { safeStringifyJson } = require('../../utils.js');\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      // The default implementation in AbstractQuery just returns the same\n      // error object. By overidding this.formatError, this saves every dialect\n      // having to check for options.rawErrors in their own formatError\n      // implementations.\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Formats a raw database error from the database library into a common Sequelize exception.\n   *\n   * @param {Error} error The exception object.\n   * @param {object} errStack The stack trace that started the database query.\n   * @returns {BaseError} the new formatted error object.\n   */\n  formatError(error, errStack) {\n    // Default implementation, no formatting.\n    // Each dialect overrides this method to parse errors from their respective the database engines.\n    error.stack = errStack;\n\n    return error;\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>safeStringifyJson(p)).join(', ');\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}