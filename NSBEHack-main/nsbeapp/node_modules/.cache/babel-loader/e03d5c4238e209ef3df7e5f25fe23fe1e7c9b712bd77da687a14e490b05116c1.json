{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"connection:pg\");\nconst sequelizeErrors = require(\"../../errors\");\nconst semver = require(\"semver\");\nconst dataTypes = require(\"../../data-types\");\nconst momentTz = require(\"moment-timezone\");\nconst {\n  promisify\n} = require(\"util\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n    const pgLib = this._loadDialectModule(\"pg\");\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser2 => {\n      return value => this.lib.types.arrayParser.create(value, parser2).parse();\n    };\n    const rangeParserBuilder = parser2 => {\n      return value => dataType.parse(value, {\n        parser: parser2\n      });\n    };\n    if (dataType.key.toLowerCase() === \"range\") {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (!entry.rangeOid) continue;\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (!entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n    if (dataType.key.toLowerCase() === \"enum\") {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n    dataType.types.postgres.forEach(name => {\n      if (!this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n      if (!this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n  _clearTypeParser() {\n    this.oidParserMap = /* @__PURE__ */new Map();\n  }\n  getTypeParser(oid) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\"user\", \"password\", \"host\", \"database\", \"port\"]);\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n    if (config.dialectOptions) {\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [\"application_name\", \"ssl\", \"client_encoding\", \"binary\", \"keepAlive\", \"statement_timeout\", \"query_timeout\", \"idle_in_transaction_session_timeout\", \"lock_timeout\", \"options\"]));\n    }\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n      const connection2 = new this.lib.Client(connectionConfig);\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case \"server_version\":\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.dialect.defaultVersion;\n            }\n            break;\n          case \"standard_conforming_strings\":\n            connection2[\"standard_conforming_strings\"] = message.parameterValue;\n            break;\n        }\n      };\n      const endHandler = () => {\n        debug(\"connection timeout\");\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error(\"Connection timed out\")));\n        }\n      };\n      connection2.once(\"end\", endHandler);\n      if (!this.sequelize.config.native) {\n        connection2.connection.on(\"parameterStatus\", parameterHandler);\n      }\n      connection2.connect(err => {\n        responded = true;\n        if (!this.sequelize.config.native) {\n          connection2.connection.removeListener(\"parameterStatus\", parameterHandler);\n        }\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case \"ECONNREFUSED\":\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case \"ENOTFOUND\":\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case \"EHOSTUNREACH\":\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case \"EINVAL\":\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug(\"connection acquired\");\n          connection2.removeListener(\"end\", endHandler);\n          resolve(connection2);\n        }\n      });\n    });\n    connection.once(\"error\", error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n    let query = \"\";\n    if (this.sequelize.options.standardConformingStrings !== false && connection[\"standard_conforming_strings\"] !== \"on\") {\n      query += \"SET standard_conforming_strings=on;\";\n    }\n    if (this.sequelize.options.clientMinMessages !== void 0) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n    if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === \"ignore\" || this.sequelize.options.clientMinMessages === false)) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || \"warning\";\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n    }\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n    return connection;\n  }\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug(\"connection tried to disconnect but was already at ENDING state\");\n      return;\n    }\n    return await promisify(callback => connection.end(callback))();\n  }\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = \"8.3.0\";\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n    const results = await (connection || this.sequelize).query(\"WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));\");\n    let result = Array.isArray(results) ? results.pop() : results;\n    if (Array.isArray(result)) {\n      if (result[0].command === \"SET\") {\n        result = result.pop();\n      }\n    }\n    const newNameOidMap = {};\n    const newEnumOids = {\n      oids: [],\n      arrayOids: []\n    };\n    for (const row of result.rows) {\n      if (row.typtype === \"e\") {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n      newNameOidMap[row.typname] = {\n        oid: row.oid\n      };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = {\n      oids: [],\n      arrayOids: []\n    };\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["_","require","AbstractConnectionManager","logger","debug","debugContext","sequelizeErrors","semver","dataTypes","momentTz","promisify","constructor","dialect","sequelize","config","port","pgLib","_loadDialectModule","lib","native","_clearDynamicOIDs","_clearTypeParser","refreshTypeParser","postgres","_refreshTypeParser","dataType","arrayParserBuilder","parser2","value","types","arrayParser","create","parse","rangeParserBuilder","parser","key","toLowerCase","name","nameOidMap","entry","rangeOid","rangeParser","getTypeParser","oid","arrayRangeParser","oidParserMap","set","arrayRangeOid","enumOids","oids","forEach","arrayOids","arrayOid","Map","get","args","connect","user","username","connectionConfig","pick","ConnectionManager","prototype","bind","dialectOptions","merge","connection","Promise","resolve","reject","responded","connection2","Client","parameterHandler","message","parameterName","options","databaseVersion","version","coerce","parameterValue","valid","defaultVersion","endHandler","ConnectionTimedOutError","Error","once","on","err","removeListener","code","ConnectionRefusedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","error","_invalid","pool","destroy","query","standardConformingStrings","clientMinMessages","console","warn","keepDefaultTimezone","isZone","tz","zone","timezone","Object","keys","length","_refreshDynamicOIDs","disconnect","_ending","callback","end","validate","supportedVersion","gte","results","result","Array","isArray","pop","command","newNameOidMap","newEnumOids","row","rows","typtype","push","typarray","typname","rngtypid","rngtyparray","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\postgres\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst momentTz = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\n          'lock_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.once('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== undefined) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\n    // If no option, the default value in sequelize is 'warning'\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\n            this.sequelize.options.clientMinMessages === false ) ) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}