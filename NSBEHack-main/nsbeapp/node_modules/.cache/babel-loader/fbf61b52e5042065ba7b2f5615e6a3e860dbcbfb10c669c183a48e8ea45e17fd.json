{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst Op = require(\"../operators\");\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"HasOne\";\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([Utils.singularize(this.options.as || this.source.name), this.source.primaryKeyAttribute].join(\"_\"));\n    }\n    if (this.options.sourceKey && !this.source.rawAttributes[this.options.sourceKey]) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    const singular = _.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? \"SET NULL\" : \"CASCADE\");\n      this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"set\", \"create\"];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, {\n          raw: true\n        })] = null;\n      }\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, {\n          raw: true\n        })] = _instance;\n      }\n      return result;\n    }\n    return Target.findOne(options);\n  }\n  async set(sourceInstance, associatedInstance, options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      scope: false\n    });\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute => oldInstance.get(attribute, {\n      raw: true\n    }) === (associatedInstance.get ? associatedInstance.get(attribute, {\n      raw: true\n    }) : associatedInstance));\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n      await oldInstance.save(__spreadProps(__spreadValues({}, options), {\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      }));\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n      return associatedInstance.save(options);\n    }\n    return null;\n  }\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n    return await this.target.create(values, options);\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = HasOne;","map":{"version":3,"mappings":"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","names":["Utils","require","Helpers","_","Association","Op","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelize","singularize","primaryKeyAttribute","join","sourceKey","rawAttributes","Error","sourceKeyAttribute","sourceKeyField","field","sourceKeyIsPrimary","associationAccessor","useHooks","identifierField","upperFirst","accessors","get","set","create","_injectAttributes","newAttributes","__spreadValues","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","where","Target","instance","cloneDeep","Object","prototype","hasOwnProperty","call","scope","unscoped","schema","schemaDelimiter","Array","isArray","in","map","_instance","assign","and","results","findAll","result","raw","findOne","sourceInstance","associatedInstance","__spreadProps","oldInstance","alreadyAssociated","primaryKeyAttributes","every","attribute","save","fields","association","tmpInstance","build","isNewRecord","values","keys","push","verifyAssociationAlias","alias","module","exports","HasOne"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\associations\\has-one.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          Utils.singularize(this.options.as || this.source.name),\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (\n      this.options.sourceKey\n      && !this.source.rawAttributes[this.options.sourceKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the target table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?Model|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options] Options passed to getAssociation and `target.save`\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options) {\n    options = { ...options, scope: false };\n\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    // TODO Use equals method once #5605 is resolved\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute =>\n      oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance)\n    );\n\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n\n      await oldInstance.save({\n        ...options,\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      });\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n\n      return associatedInstance.save(options);\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create} for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasOne;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}