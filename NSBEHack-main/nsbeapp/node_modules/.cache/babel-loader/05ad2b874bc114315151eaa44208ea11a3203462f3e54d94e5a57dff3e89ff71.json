{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst semver = require(\"semver\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").mariadb;\nconst momentTz = require(\"moment-timezone\");\nconst debug = logger.debugContext(\"connection:mariadb\");\nconst parserStore = require(\"../parserStore\")(\"mariadb\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mariadb\");\n    this.refreshTypeParser(DataTypes);\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false\n    }, config.dialectOptions);\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n      debug(\"connection acquired\");\n      connection.on(\"error\", error => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ER_ACCESS_DENIED_NO_PASSWORD_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case \"EHOSTUNREACH\":\n        case \"ENETUNREACH\":\n        case \"EADDRNOTAVAIL\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (!connection.isValid()) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return await connection.end();\n  }\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["semver","require","AbstractConnectionManager","SequelizeErrors","logger","DataTypes","mariadb","momentTz","debug","debugContext","parserStore","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_typecast","field","next","get","type","options","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","tzOffset","timezone","test","tz","format","connectionConfig","__spreadValues","host","user","username","password","database","typeCast","ConnectionManager","bind","bigNumberStrings","supportBigNumbers","foundRows","dialectOptions","keepDefaultTimezone","initSql","Array","isArray","push","connection","createConnection","databaseVersion","coerce","serverVersion","version","on","error","code","pool","destroy","err","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","disconnect","isValid","end","validate","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst semver = require('semver');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mariadb;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mariadb');\nconst parserStore = require('../parserStore')('mariadb');\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mariadb');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z')\n      : tzOffset;\n\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false,\n      ...config.dialectOptions\n    };\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(\n          connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n    return await connection.end();\n  }\n\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}