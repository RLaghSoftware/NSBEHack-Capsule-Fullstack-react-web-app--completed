{"ast":null,"code":"\"use strict\";\n\nconst {\n  Pool,\n  TimeoutError\n} = require(\"sequelize-pool\");\nconst _ = require(\"lodash\");\nconst semver = require(\"semver\");\nconst errors = require(\"../../errors\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst deprecations = require(\"../../utils/deprecations\");\nconst debug = logger.debugContext(\"pool\");\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n    if (config.pool === false) {\n      throw new Error(\"Support for pool:false was removed in v4.0\");\n    }\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 1e4,\n      acquire: 6e4,\n      evict: 1e3,\n      validate: this._validate.bind(this)\n    });\n    this.initPools();\n  }\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, \"parse\")) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n    } catch (err) {\n      if (err.code === \"MODULE_NOT_FOUND\") {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n      throw err;\n    }\n  }\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n    await this.pool.drain();\n    debug(\"connection drain due to process exit\");\n    return await this.pool.destroyAllNow();\n  }\n  async close() {\n    this.getConnection = async function getConnection() {\n      throw new Error(\"ConnectionManager.getConnection was called after the connection manager was closed!\");\n    };\n    return await this._onProcessExit();\n  }\n  initPools() {\n    const config = this.config;\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: \"sequelize\",\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug(\"connection destroy\");\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n      return;\n    }\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, \"replication\"));\n    config.replication.read = config.replication.read.map(readConfig => _.defaults(readConfig, _.omit(this.config, \"replication\")));\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === \"read\") {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === void 0 ? false : useMaster;\n        if (queryType === \"SELECT\" && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug(\"connection destroy\");\n      },\n      destroyAllNow: async () => {\n        await Promise.all([this.pool.read.destroyAllNow(), this.pool.write.destroyAllNow()]);\n        debug(\"all connections destroyed\");\n      },\n      drain: async () => Promise.all([this.pool.write.drain(), this.pool.read.drain()]),\n      read: new Pool({\n        name: \"sequelize:read\",\n        create: async () => {\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = \"read\";\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: \"sequelize:write\",\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = \"write\";\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n  async getConnection(options) {\n    options = options || {};\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n            _options.transaction = {\n              connection\n            };\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), \"version\") || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion) ? parsedVersion : this.dialect.defaultVersion;\n            }\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n    let result;\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n    debug(\"connection acquired\");\n    return result;\n  }\n  releaseConnection(connection) {\n    this.pool.release(connection);\n    debug(\"connection released\");\n  }\n  async destroyConnection(connection) {\n    await this.pool.destroy(connection);\n    debug(`connection ${connection.uuid} destroyed`);\n  }\n  async _connect(config) {\n    await this.sequelize.runHooks(\"beforeConnect\", config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks(\"afterConnect\", connection, config);\n    return connection;\n  }\n  async _disconnect(connection) {\n    await this.sequelize.runHooks(\"beforeDisconnect\", connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks(\"afterDisconnect\", connection);\n  }\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["Pool","TimeoutError","require","_","semver","errors","logger","deprecations","debug","debugContext","constructor","dialect","sequelize","config","cloneDeep","versionPromise","dialectName","options","pool","Error","defaults","max","min","idle","acquire","evict","validate","_validate","bind","initPools","refreshTypeParser","dataTypes","each","dataType","Object","prototype","hasOwnProperty","call","types","_refreshTypeParser","key","_loadDialectModule","moduleName","dialectModulePath","dialectModule","err","code","_onProcessExit","drain","destroyAllNow","close","getConnection","replication","name","create","_connect","destroy","connection","result","_disconnect","acquireTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","maxUses","Array","isArray","read","write","omit","map","readConfig","reads","release","client","queryType","useMaster","Promise","all","nextRead","length","databaseVersion","_options","transaction","logging","__testLoggingFn","version","parsedVersion","get","coerce","valid","defaultVersion","lt","unsupportedEngine","type","error","ConnectionAcquireTimeoutError","releaseConnection","destroyConnection","uuid","runHooks","connectionManager","connect","disconnect","module","exports","ConnectionManager","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10000,\n      acquire: 60000,\n      evict: 1000,\n      validate: this._validate.bind(this)\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === undefined ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n\n            //connection might have set databaseVersion value at initialization,\n            //avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   */\n  releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Destroys a pooled connection and removes it from the pool.\n   *\n   * @param {Connection} connection\n   */\n  async destroyConnection(connection) {\n    await this.pool.destroy(connection);\n    debug(`connection ${connection.uuid} destroyed`);\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}