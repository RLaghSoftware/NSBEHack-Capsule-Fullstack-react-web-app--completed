{"ast":null,"code":"\"use strict\";\n\nconst Toposort = require(\"toposort-class\");\nconst _ = require(\"lodash\");\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n    return model;\n  }\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n    delete this.sequelize.models[modelToRemove.name];\n  }\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: \"name\"\n    });\n    return this.models.find(model => model[options.attribute] === against);\n  }\n  get all() {\n    return this.models;\n  }\n  getModelsTopoSortedByForeignKey() {\n    const models = /* @__PURE__ */new Map();\n    const sorter = new Toposort();\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n      models.set(tableName, model);\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n          if (attribute.references) {\n            let dep = attribute.references.model;\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n            deps.push(dep);\n          }\n        }\n      }\n      deps = deps.filter(dep => tableName !== dep);\n      sorter.add(tableName, deps);\n    }\n    let sorted;\n    try {\n      sorted = sorter.sort();\n    } catch (e) {\n      if (!e.message.startsWith(\"Cyclic dependency found.\")) {\n        throw e;\n      }\n      return null;\n    }\n    return sorted.map(modelName => {\n      return models.get(modelName);\n    }).filter(Boolean);\n  }\n  forEachModel(iterator, options) {\n    const sortedModels = this.getModelsTopoSortedByForeignKey();\n    if (sortedModels == null) {\n      throw new Error(\"Cyclic dependency found.\");\n    }\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n    if (options.reverse) {\n      sortedModels.reverse();\n    }\n    for (const model of sortedModels) {\n      iterator(model);\n    }\n  }\n}\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;","map":{"version":3,"mappings":";;AAEA,MAAMA,WAAWC,QAAQ;AACzB,MAAMC,IAAID,QAAQ;AAElB,mBAAmB;EACjBE,YAAYC,WAAW;IACrB,KAAKC,SAAS;IACd,KAAKD,YAAYA;EAAA;EAGnBE,SAASC,OAAO;IACd,KAAKF,OAAOG,KAAKD;IACjB,KAAKH,UAAUC,OAAOE,MAAME,QAAQF;IAEpC,OAAOA;EAAA;EAGTG,YAAYC,eAAe;IACzB,KAAKN,SAAS,KAAKA,OAAOO,OAAOL,SAASA,MAAME,SAASE,cAAcF;IAEvE,OAAO,KAAKL,UAAUC,OAAOM,cAAcF;EAAA;EAG7CI,SAASC,SAASC,SAAS;IACzBA,UAAUb,EAAEc,SAASD,WAAW,IAAI;MAClCE,WAAW;IAAA;IAGb,OAAO,KAAKZ,OAAOa,KAAKX,SAASA,MAAMQ,QAAQE,eAAeH;EAAA;EAAA,IAG5DK,MAAM;IACR,OAAO,KAAKd;EAAA;EAUde,kCAAkC;IAChC,MAAMf,SAAS,mBAAIgB;IACnB,MAAMC,SAAS,IAAItB;IAEnB,WAAWO,SAAS,KAAKF,QAAQ;MAC/B,IAAIkB,OAAO;MACX,IAAIC,YAAYjB,MAAMkB;MAEtB,IAAIvB,EAAEwB,SAASF,YAAY;QACzBA,YAAY,GAAGA,UAAUG,UAAUH,UAAUA;MAAA;MAG/CnB,OAAOuB,IAAIJ,WAAWjB;MAEtB,WAAWsB,YAAYtB,MAAMuB,eAAe;QAC1C,IAAIC,OAAOC,UAAUC,eAAeC,KAAK3B,MAAMuB,eAAeD,WAAW;UACvE,MAAMZ,YAAYV,MAAMuB,cAAcD;UAEtC,IAAIZ,UAAUkB,YAAY;YACxB,IAAIC,MAAMnB,UAAUkB,WAAW5B;YAE/B,IAAIL,EAAEwB,SAASU,MAAM;cACnBA,MAAM,GAAGA,IAAIT,UAAUS,IAAIZ;YAAA;YAG7BD,KAAKf,KAAK4B;UAAA;QAAA;MAAA;MAKhBb,OAAOA,KAAKX,OAAOwB,OAAOZ,cAAcY;MAExCd,OAAOe,IAAIb,WAAWD;IAAA;IAGxB,IAAIe;IACJ,IAAI;MACFA,SAAShB,OAAOiB;IAAA,SACTC,GAAP;MACA,IAAI,CAACA,EAAEC,QAAQC,WAAW,6BAA6B;QACrD,MAAMF;MAAA;MAGR,OAAO;IAAA;IAGT,OAAOF,OACJK,IAAIC,aAAa;MAChB,OAAOvC,OAAOwC,IAAID;IAAA,GAEnBhC,OAAOkC;EAAA;EAaZC,aAAaC,UAAUjC,SAAS;IAC9B,MAAMkC,eAAe,KAAK7B;IAC1B,IAAI6B,gBAAgB,MAAM;MACxB,MAAM,IAAIC,MAAM;IAAA;IAGlBnC,UAAUb,EAAEc,SAASD,WAAW,IAAI;MAClCoC,SAAS;IAAA;IAGX,IAAIpC,QAAQoC,SAAS;MACnBF,aAAaE;IAAA;IAGf,WAAW5C,SAAS0C,cAAc;MAChCD,SAASzC;IAAA;EAAA;AAAA;AAKf6C,OAAOC,UAAUC;AACjBF,OAAOC,QAAQC,eAAeA;AAC9BF,OAAOC,QAAQE,UAAUD","names":["Toposort","require","_","constructor","sequelize","models","addModel","model","push","name","removeModel","modelToRemove","filter","getModel","against","options","defaults","attribute","find","all","getModelsTopoSortedByForeignKey","Map","sorter","deps","tableName","getTableName","isObject","schema","set","attrName","rawAttributes","Object","prototype","hasOwnProperty","call","references","dep","add","sorted","sort","e","message","startsWith","map","modelName","get","Boolean","forEachModel","iterator","sortedModels","Error","reverse","module","exports","ModelManager","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\model-manager.js"],"sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Returns an array that lists every model, sorted in order\n   * of foreign key references: The first model is a model that is depended upon,\n   * the last model is a model that is not depended upon.\n   *\n   * If there is a cyclic dependency, this returns null.\n   */\n  getModelsTopoSortedByForeignKey() {\n    const models = new Map();\n    const sorter = new Toposort();\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models.set(tableName, model);\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            let dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    let sorted;\n    try {\n      sorted = sorter.sort();\n    } catch (e) {\n      if (!e.message.startsWith('Cyclic dependency found.')) {\n        throw e;\n      }\n\n      return null;\n    }\n\n    return sorted\n      .map(modelName => {\n        return models.get(modelName);\n      })\n      .filter(Boolean);\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} options\n   * @private\n   *\n   * @deprecated\n   */\n  forEachModel(iterator, options) {\n    const sortedModels = this.getModelsTopoSortedByForeignKey();\n    if (sortedModels == null) {\n      throw new Error('Cyclic dependency found.');\n    }\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    if (options.reverse) {\n      sortedModels.reverse();\n    }\n\n    for (const model of sortedModels) {\n      iterator(model);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}