{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractDialect = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").sqlite;\nconst {\n  SQLiteQueryInterface\n} = require(\"./query-interface\");\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  DEFAULT: false,\n  \"DEFAULT VALUES\": true,\n  \"UNION ALL\": false,\n  \"RIGHT JOIN\": false,\n  inserts: {\n    ignoreDuplicates: \" OR IGNORE\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = \"3.8.0\";\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = \"sqlite\";\nSqliteDialect.prototype.TICK_CHAR = \"`\";\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ;AAClB,MAAMC,kBAAkBD,QAAQ;AAChC,MAAME,oBAAoBF,QAAQ;AAClC,MAAMG,QAAQH,QAAQ;AACtB,MAAMI,iBAAiBJ,QAAQ;AAC/B,MAAMK,YAAYL,QAAQ,oBAAoBM;AAC9C,MAAM;EAAEC;AAAA,IAAyBP,QAAQ;AAEzC,4BAA4BC,gBAAgB;EAC1CO,YAAYC,WAAW;IACrB;IACA,KAAKA,YAAYA;IACjB,KAAKC,oBAAoB,IAAIR,kBAAkB,MAAMO;IACrD,KAAKE,iBAAiB,IAAIP,eAAe;MACvCQ,UAAU;MACVH;IAAA;IAGF,KAAKI,iBAAiB,IAAIN,qBACxBE,WACA,KAAKE;EAAA;AAAA;AAKXG,cAAcC,UAAUC,WAAWjB,EAAEkB,MACnClB,EAAEmB,UAAUjB,gBAAgBc,UAAUC,WACtC;EACEG,SAAS;EACT,kBAAkB;EAClB,aAAa;EACb,cAAc;EACdC,SAAS;IACPC,kBAAkB;IAClBC,mBAAmB;IACnBC,gBAAgB;EAAA;EAElBC,OAAO;IACLC,OAAO;IACPC,OAAO;IACPC,eAAe;EAAA;EAEjBC,oBAAoB;IAClBC,MAAM;EAAA;EAERC,aAAa;IACXC,eAAe;IACfC,gBAAgB;EAAA;EAElBC,cAAc;EACdC,MAAM;AAAA;AAIVpB,cAAcC,UAAUoB,iBAAiB;AACzCrB,cAAcC,UAAUZ,QAAQA;AAChCW,cAAcC,UAAUV,YAAYA;AACpCS,cAAcC,UAAUqB,OAAO;AAC/BtB,cAAcC,UAAUsB,YAAY;AACpCvB,cAAcC,UAAUuB,iBAAiBxB,cAAcC,UAAUsB;AACjEvB,cAAcC,UAAUwB,kBAAkBzB,cAAcC,UAAUsB;AAElEG,OAAOC,UAAU3B;AACjB0B,OAAOC,QAAQ3B,gBAAgBA;AAC/B0B,OAAOC,QAAQC,UAAU5B","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SQLiteQueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","SqliteDialect","prototype","supports","merge","cloneDeep","DEFAULT","inserts","ignoreDuplicates","updateOnDuplicate","conflictFields","index","using","where","functionBased","transactionOptions","type","constraints","addConstraint","dropConstraint","groupedLimit","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}