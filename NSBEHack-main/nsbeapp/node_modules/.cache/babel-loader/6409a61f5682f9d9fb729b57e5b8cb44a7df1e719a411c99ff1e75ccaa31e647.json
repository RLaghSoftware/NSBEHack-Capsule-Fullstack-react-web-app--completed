{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").snowflake;\nconst debug = logger.debugContext(\"connection:snowflake\");\nconst parserStore = require(\"../parserStore\")(\"snowflake\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"snowflake-sdk\");\n    this.refreshTypeParser(DataTypes);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      account: config.host,\n      username: config.username,\n      password: config.password,\n      database: config.database,\n      warehouse: config.warehouse,\n      role: config.role\n    }, config.dialectOptions);\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        this.lib.createConnection(connectionConfig).connect((err, conn) => {\n          if (err) {\n            console.log(err);\n            reject(err);\n          } else {\n            resolve(conn);\n          }\n        });\n      });\n      debug(\"connection acquired\");\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const tzOffset = this.sequelize.options.timezone === \"+00:00\" ? \"Etc/UTC\" : this.sequelize.options.timezone;\n        const isNamedTzOffset = /\\//.test(tzOffset);\n        if (isNamedTzOffset) {\n          await new Promise((resolve, reject) => {\n            connection.execute({\n              sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n              complete(err) {\n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              }\n            });\n          });\n        } else {\n          throw Error(\"only support time zone name for snowflake!\");\n        }\n      }\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case \"EHOSTUNREACH\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (!connection.isUp()) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      connection.destroy(err => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.log(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n  validate(connection) {\n    return connection.isUp();\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["AbstractConnectionManager","require","SequelizeErrors","logger","DataTypes","snowflake","debug","debugContext","parserStore","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","_typecast","field","next","get","type","options","connect","connectionConfig","__spreadValues","account","host","username","password","database","warehouse","role","dialectOptions","connection","Promise","resolve","reject","createConnection","err","conn","console","log","keepDefaultTimezone","tzOffset","timezone","isNamedTzOffset","test","execute","sqlText","complete","Error","code","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","disconnect","isUp","destroy","error","message","getId","validate","module","exports","ConnectionManager","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').snowflake;\nconst debug = logger.debugContext('connection:snowflake');\nconst parserStore = require('../parserStore')('snowflake');\n\n/**\n * Snowflake Connection Manager\n *\n * Get connections, validate and disconnect them.\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('snowflake-sdk');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with a snowflake database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      account: config.host,\n      username: config.username,\n      password: config.password,\n      database: config.database,\n      warehouse: config.warehouse,\n      role: config.role,\n      /*\n      flags: '-FOUND_ROWS',\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      */\n      ...config.dialectOptions\n    };\n\n    try {\n\n      const connection = await new Promise((resolve, reject) => {\n        this.lib.createConnection(connectionConfig).connect((err, conn) => {\n          if (err) {\n            console.log(err);\n            reject(err);\n          } else {\n            resolve(conn);\n          }\n        });\n      });\n\n      debug('connection acquired');\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // default value is '+00:00', put a quick workaround for it.\n        const tzOffset = this.sequelize.options.timezone === '+00:00' ? 'Etc/UTC' : this.sequelize.options.timezone;\n        const isNamedTzOffset = /\\//.test(tzOffset);\n        if ( isNamedTzOffset ) {\n          await new Promise((resolve, reject) => {\n            connection.execute({\n              sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n              complete(err) {\n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              }\n            });\n          });\n        } else {\n          throw Error('only support time zone name for snowflake!');\n        }\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isUp()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      connection.destroy(err => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.log(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n\n  validate(connection) {\n    return connection.isUp();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}