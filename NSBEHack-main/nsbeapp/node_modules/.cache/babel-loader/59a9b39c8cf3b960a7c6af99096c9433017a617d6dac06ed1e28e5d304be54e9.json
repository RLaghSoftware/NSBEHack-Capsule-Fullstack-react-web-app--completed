{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"mssql\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"sql:mssql\");\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = {\n      type: TYPES.NVarChar,\n      typeOptions: {},\n      value\n    };\n    if (typeof value === \"number\") {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        paramType.typeOptions = {\n          precision: 30,\n          scale: getScale(value)\n        };\n      }\n    } else if (typeof value === \"bigint\") {\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n        paramType.type = TYPES.VarChar;\n        paramType.value = value.toString();\n      } else {\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\n      }\n    } else if (typeof value === \"boolean\") {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const {\n      options\n    } = this;\n    const complete = this._logQuery(sql, debug, parameters);\n    const query = new Promise((resolve, reject) => {\n      if (sql.startsWith(\"BEGIN TRANSACTION\")) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith(\"COMMIT TRANSACTION\")) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith(\"ROLLBACK TRANSACTION\")) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith(\"SAVE TRANSACTION\")) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      const rows2 = [];\n      const request = new connection.lib.Request(sql, (err, rowCount2) => err ? reject(err) : resolve([rows2, rowCount2]));\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n      request.on(\"row\", columns => {\n        rows2.push(columns);\n      });\n      connection.execSql(request);\n    });\n    let rows, rowCount;\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errStack);\n    }\n    complete();\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n    return this.formatResults(rows, rowCount);\n  }\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters, errForStack.stack));\n  }\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return `@${key}`;\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"YES\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === \"PRIMARY KEY\",\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n        if (result[_result.Name].type.includes(\"CHAR\") && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += \"(MAX)\";\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === \"INSERT\"];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n  handleShowConstraintsQuery(data) {\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n  formatError(err, errStack) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = \"Validation error\";\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(\",\").map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : void 0;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n  }\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n      item.index_keys.split(\",\").forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes(\"(-)\")) {\n          columnName = columnName.replace(\"(-)\", \"\");\n        }\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: void 0,\n          order: column.includes(\"(-)\") ? \"DESC\" : \"ASC\",\n          collate: void 0\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith(\"pk\"),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: void 0,\n      unique: item.index_description.toLowerCase().includes(\"unique\"),\n      type: void 0\n    }));\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":";;AAEA,MAAMA,gBAAgBC,QAAQ;AAC9B,MAAMC,kBAAkBD,QAAQ;AAChC,MAAME,cAAcF,QAAQ,kBAAkB;AAC9C,MAAMG,IAAIH,QAAQ;AAClB,MAAM;EAAEI;AAAA,IAAWJ,QAAQ;AAE3B,MAAMK,QAAQD,OAAOE,aAAa;AAElC,MAAMC,yBAAyBC,OAAOC,OAAOC;AAC7C,MAAMC,yBAAyBH,OAAOC,OAAOG;AAE7C,kBAAkBC,MAAM;EACtB,IAAI,CAACJ,OAAOK,SAASD,OAAO,OAAO;EACnC,IAAIE,IAAI;EACR,OAAOC,KAAKC,MAAMJ,OAAOE,KAAKA,MAAMF,MAAME,KAAK;EAC/C,OAAOC,KAAKE,MAAMH;AAAA;AAGpB,oBAAoBhB,cAAc;EAChCoB,mBAAmB;IACjB,OAAO;EAAA;EAGTC,qBAAqBC,OAAOC,OAAO;IACjC,MAAMC,YAAY;MAAEC,MAAMF,MAAMG;MAAUC,aAAa;MAAIL;IAAA;IAC3D,IAAI,OAAOA,UAAU,UAAU;MAC7B,IAAIZ,OAAOkB,UAAUN,QAAQ;QAC3B,IAAIA,SAAS,eAAeA,SAAS,YAAY;UAC/CE,UAAUC,OAAOF,MAAMM;QAAA,OAClB;UACLL,UAAUC,OAAOF,MAAMd;QAAA;MAAA,OAEpB;QACLe,UAAUC,OAAOF,MAAMO;QAEvBN,UAAUG,cAAc;UAAEI,WAAW;UAAIC,OAAOC,SAASX;QAAA;MAAA;IAAA,WAElD,OAAOA,UAAU,UAAU;MACpC,IAAIA,QAAQd,0BAA0Bc,QAAQV,wBAAwB;QACpEY,UAAUC,OAAOF,MAAMW;QACvBV,UAAUF,QAAQA,MAAMa;MAAA,OACnB;QACL,OAAO,KAAKd,qBAAqBX,OAAOY,QAAQC;MAAA;IAAA,WAEzC,OAAOD,UAAU,WAAW;MACrCE,UAAUC,OAAOF,MAAMa;IAAA;IAEzB,IAAIC,OAAOC,SAAShB,QAAQ;MAC1BE,UAAUC,OAAOF,MAAMgB;IAAA;IAEzB,OAAOf;EAAA;EAAA,MAGHgB,KAAKC,YAAYC,KAAKC,YAAYC,UAAU;IAChD,KAAKF,MAAMA;IACX,MAAM;MAAEG;IAAA,IAAY;IAEpB,MAAMC,WAAW,KAAKC,UAAUL,KAAKpC,OAAOqC;IAE5C,MAAMK,QAAQ,IAAIC,QAAQ,CAACC,SAASC,WAAW;MAE7C,IAAIT,IAAIU,WAAW,sBAAsB;QACvC,OAAOX,WAAWY,iBAAiBC,SAASA,QAAQH,OAAOG,SAASJ,QAAQ,KAAKL,QAAQU,YAAYC,MAAMf,WAAWgB,IAAIC,gBAAgBb,QAAQc;MAAA;MAEpJ,IAAIjB,IAAIU,WAAW,uBAAuB;QACxC,OAAOX,WAAWmB,kBAAkBN,SAASA,QAAQH,OAAOG,SAASJ,QAAQ;MAAA;MAE/E,IAAIR,IAAIU,WAAW,yBAAyB;QAC1C,OAAOX,WAAWoB,oBAAoBP,SAASA,QAAQH,OAAOG,SAASJ,QAAQ,KAAKL,QAAQU,YAAYC;MAAA;MAE1G,IAAId,IAAIU,WAAW,qBAAqB;QACtC,OAAOX,WAAWqB,gBAAgBR,SAASA,QAAQH,OAAOG,SAASJ,QAAQ,KAAKL,QAAQU,YAAYC;MAAA;MAGtG,MAAMO,QAAO;MACb,MAAMC,UAAU,IAAIvB,WAAWgB,IAAIQ,QAAQvB,KAAK,CAACwB,KAAKC,cAAaD,MAAMf,OAAOe,OAAOhB,QAAQ,CAACa,OAAMI;MAEtG,IAAIxB,YAAY;QACdvC,EAAEgE,OAAOzB,YAAY,CAACrB,OAAO+C,QAAQ;UACnC,MAAM7C,YAAY,KAAKH,qBAAqBC,OAAOmB,WAAWgB,IAAIlC;UAClEyC,QAAQM,aAAaD,KAAK7C,UAAUC,MAAMH,OAAOE,UAAUG;QAAA;MAAA;MAI/DqC,QAAQO,GAAG,OAAOC,WAAW;QAC3BT,MAAKU,KAAKD;MAAA;MAGZ/B,WAAWiC,QAAQV;IAAA;IAGrB,IAAIW,MAAMC;IAEV,IAAI;MACF,CAACD,MAAMC,YAAY,MAAM5B;IAAA,SAClBkB,KAAP;MACAA,IAAIxB,MAAMA;MACVwB,IAAIvB,aAAaA;MAEjB,MAAM,KAAKkC,YAAYX,KAAKtB;IAAA;IAG9BE;IAEA,IAAIgC,MAAMC,QAAQJ,OAAO;MACvBA,OAAOA,KAAKK,IAAIR,WAAW;QACzB,MAAMS,MAAM;QACZ,WAAWC,UAAUV,SAAS;UAC5B,MAAMW,SAASD,OAAOE,SAAS3D,KAAK4D;UACpC,MAAMC,QAAQnF,YAAYoF,IAAIJ;UAC9B,IAAI7D,QAAQ4D,OAAO5D;UAEnB,IAAIA,UAAU,OAAO,CAAC,CAACgE,OAAO;YAC5BhE,QAAQgE,MAAMhE;UAAA;UAEhB2D,IAAIC,OAAOE,SAASI,WAAWlE;QAAA;QAEjC,OAAO2D;MAAA;IAAA;IAIX,OAAO,KAAKQ,cAAcd,MAAMC;EAAA;EAGlCc,IAAIhD,KAAKC,YAAY;IACnB,MAAMgD,cAAc,IAAIC;IACxB,OAAO,KAAKnD,WAAWoD,MAAMC,QAAQ,MACnC,KAAKtD,KAAK,KAAKC,YAAYC,KAAKC,YAAYgD,YAAYI;EAAA;EAAA,OAIrDC,qBAAqBtD,KAAKuD,QAAQC,SAAS;IAChD,MAAMC,YAAY;IAClB,MAAMC,kBAAkB,CAACC,OAAOhC,KAAKiC,YAAW;MAC9C,IAAIA,QAAOjC,SAAS,QAAW;QAC7B8B,UAAU9B,OAAOiC,QAAOjC;QACxB,OAAO,IAAIA;MAAA;MAEb,OAAO;IAAA;IAET3B,MAAM1C,cAAcgG,qBAAqBtD,KAAKuD,QAAQC,SAASE,iBAAiB;IAEhF,OAAO,CAAC1D,KAAKyD;EAAA;EAoBfV,cAAcc,MAAM3B,UAAU;IAC5B,IAAI,KAAK4B,cAAcD,OAAO;MAC5B,KAAKE,kBAAkBF;MACvB,OAAO,CAAC,KAAKG,YAAYH,MAAM3B;IAAA;IAEjC,IAAI,KAAK+B,qBAAqB;MAC5B,OAAO,KAAKC,sBAAsBL;IAAA;IAEpC,IAAI,KAAKM,mBAAmB;MAC1B,MAAMC,SAAS;MACf,WAAWC,WAAWR,MAAM;QAC1B,IAAIQ,QAAQC,SAAS;UACnBD,QAAQC,UAAUD,QAAQC,QAAQC,QAAQ,MAAM,IAAIA,QAAQ,MAAM,IAAIA,QAAQ,MAAM;QAAA;QAGtFH,OAAOC,QAAQG,QAAQ;UACrBzF,MAAMsF,QAAQI,KAAKC;UACnBC,WAAWN,QAAQO,WAAW,QAAQ,OAAO;UAC7CC,cAAcR,QAAQC;UACtBQ,YAAYT,QAAQU,eAAe;UACnCC,eAAeX,QAAQY,eAAe;UACtCC,SAASb,QAAQc;QAAA;QAGnB,IACEf,OAAOC,QAAQG,MAAMzF,KAAKqG,SAAS,WAChCf,QAAQgB,QACX;UACA,IAAIhB,QAAQgB,WAAW,IAAI;YACzBjB,OAAOC,QAAQG,MAAMzF,QAAQ;UAAA,OACxB;YACLqF,OAAOC,QAAQG,MAAMzF,QAAQ,IAAIsF,QAAQgB;UAAA;QAAA;MAAA;MAI/C,OAAOjB;IAAA;IAET,IAAI,KAAKkB,iBAAiB;MACxB,OAAO,KAAKC,kBAAkB1B;IAAA;IAEhC,IAAI,KAAK2B,sBAAsB;MAC7B,OAAO,KAAKC,uBAAuB5B;IAAA;IAErC,IAAI,KAAK6B,eAAe;MACtB,OAAO7B,KAAK;IAAA;IAEd,IAAI,KAAK8B,qBAAqB;MAC5B,IAAI,KAAKxF,QAAQyF,WAAW;QAC1B,OAAO,KAAKL,kBAAkB1B;MAAA;MAGhC,OAAO3B;IAAA;IAET,IAAI,KAAK2D,qBAAqB;MAC5B,OAAOhC,KAAK,KAAKA,KAAK,GAAGiC,eAAe;IAAA;IAE1C,IAAI,KAAKC,kBAAkB;MACzB,OAAOlC,KAAK,GAAGmC;IAAA;IAEjB,IAAI,KAAKC,sBAAsB;MAC7B,OAAOpC;IAAA;IAET,IAAI,KAAKqC,iBAAiB;MAGxB,IAAIrC,QAAQA,KAAKsC,WAAW,GAAG;QAC7B,OAAO,CAAC,KAAKnC,YAAYH,MAAM;MAAA;MAEjC,KAAKE,kBAAkBF;MACvB,OAAO,CAAC,KAAKG,YAAYH,MAAMA,KAAK,GAAGuC,YAAY;IAAA;IAErD,IAAI,KAAKC,iBAAiB;MACxB,OAAO,CAAC,KAAKrC,YAAYH,MAAM3B;IAAA;IAEjC,IAAI,KAAKoE,0BAA0B;MACjC,OAAO,KAAKC,2BAA2B1C;IAAA;IAEzC,IAAI,KAAK2C,cAAc;MACrB,OAAO,CAAC3C,MAAM3B;IAAA;IAEhB,OAAO2B;EAAA;EAGTK,sBAAsBuC,SAAS;IAC7B,OAAOA,QAAQnE,IAAIoE,aAAa;MAC9B,OAAO;QACLC,WAAWD,UAAUE;QACrBC,QAAQH,UAAUI;MAAA;IAAA;EAAA;EAKxBP,2BAA2B1C,MAAM;IAE/B,OAAOA,KAAKkD,MAAM,GAAGzE,IAAI8B,UAAU;MACjC,MAAM4C,aAAa;MACnB,WAAWrF,OAAOyC,QAAQ;QACxB4C,WAAWtJ,EAAEuJ,UAAUtF,QAAQyC,OAAOzC;MAAA;MAExC,OAAOqF;IAAA;EAAA;EAIX7E,YAAYX,KAAKtB,UAAU;IACzB,IAAIyD;IAEJA,QAAQnC,IAAI0F,QAAQvD,MAAM;IAC1BA,QAAQA,SAASnC,IAAI0F,QAAQvD,MAAM;IACnC,IAAIA,SAASA,MAAMwC,SAAS,GAAG;MAC7B,IAAIgB,SAAS;MACb,MAAMC,YAAY,KAAKC,SAAS,KAAKA,MAAMC,WAAW3D,MAAM;MAC5D,IAAIuD,UAAU;MAEd,IAAIE,aAAa,CAAC,CAACA,UAAUG,KAAK;QAChCL,UAAUE,UAAUG;MAAA;MAEtB,IAAI5D,MAAM,IAAI;QACZ,MAAMJ,SAASI,MAAM,GAAG6D,MAAM,KAAKlF,IAAImF,QAAQA,KAAKC;QACpD,IAAIN,WAAW;UACbD,SAASzJ,EAAEiK,UAAUP,UAAUD,QAAQ5D;QAAA,OAClC;UACL4D,OAAOxD,MAAM,MAAMA,MAAM;QAAA;MAAA;MAI7B,MAAMiE,SAAS;MACflK,EAAEgE,OAAOyF,QAAQ,CAACvI,OAAOiJ,UAAU;QACjCD,OAAO7F,KAAK,IAAIvE,gBAAgBsK,oBAC9B,KAAKC,gCAAgCF,QACrC,oBACAA,OACAjJ,OACA,KAAKoF,UACL;MAAA;MAIJ,OAAO,IAAIxG,gBAAgBwK,sBAAsB;QAAEd;QAASU;QAAQK,QAAQzG;QAAK2F;QAAQ9D,OAAOnD;MAAA;IAAA;IAGlGyD,QAAQnC,IAAI0F,QAAQvD,MAAM,8EACxBnC,IAAI0F,QAAQvD,MAAM,mJAClBnC,IAAI0F,QAAQvD,MAAM;IACpB,IAAIA,SAASA,MAAMwC,SAAS,GAAG;MAC7B,OAAO,IAAI3I,gBAAgB0K,0BAA0B;QACnDf,QAAQ;QACRgB,OAAOxE,MAAM;QACbsE,QAAQzG;QACR6B,OAAOnD;MAAA;IAAA;IAIXyD,QAAQnC,IAAI0F,QAAQvD,MAAM;IAC1B,IAAIA,SAASA,MAAMwC,SAAS,GAAG;MAC7B,IAAIa,aAAaxF,IAAIxB,IAAI2D,MAAM;MAC/BqD,aAAaA,aAAaA,WAAW,KAAK;MAC1C,IAAIoB,QAAQ5G,IAAIxB,IAAI2D,MAAM;MAC1ByE,QAAQA,QAAQA,MAAM,KAAK;MAE3B,OAAO,IAAI5K,gBAAgB6K,uBAAuB;QAChDnB,SAASvD,MAAM;QACfqD;QACAoB;QACAH,QAAQzG;QACR6B,OAAOnD;MAAA;IAAA;IAIX,OAAO,IAAI1C,gBAAgB8K,cAAc9G,KAAK;MAAE6B,OAAOnD;IAAA;EAAA;EAGzDqI,wBAAwB;IACtB,IAAInE,SAAS;IAEbA,SAASA,UAAU,KAAKpE,IAAIwI,cAAc9H,WAAW;IACrD0D,SAASA,UAAU,KAAKpE,IAAIwI,cAAc9H,WAAW;IACrD0D,SAASA,UAAU,KAAKpE,IAAIwI,cAAc9H,WAAW;IAErD,OAAO0D;EAAA;EAGToB,qBAAqB;IACnB,OAAO,KAAKxF,IAAIwI,cAAc9H,WAAW;EAAA;EAG3C+E,uBAAuB5B,MAAM;IAE3BA,OAAOA,KAAK4E,OAAO,CAACC,KAAKC,SAAS;MAChC,IAAI,EAAEA,KAAKC,cAAcF,MAAM;QAC7BA,IAAIC,KAAKC,cAAcD;QACvBA,KAAKxB,SAAS;MAAA;MAGhBwB,KAAKE,WAAWrB,MAAM,KAAKsB,QAAQtG,UAAU;QAC3C,IAAIuG,aAAavG,OAAOkF;QACxB,IAAIqB,WAAW3D,SAAS,QAAQ;UAC9B2D,aAAaA,WAAWxE,QAAQ,OAAO;QAAA;QAGzCmE,IAAIC,KAAKC,YAAYzB,OAAOpF,KAAK;UAC/BiH,WAAWD;UACX5C,QAAQ;UACR8C,OAAOzG,OAAO4C,SAAS,SAAS,SAAS;UACzC8D,SAAS;QAAA;MAAA;MAGb,OAAOP,KAAKE;MACZ,OAAOH;IAAA,GACN;IAEH,OAAOhL,EAAE4E,IAAIuB,MAAM8E,SAAS;MAC1BQ,SAASR,KAAKC,WAAWJ,cAAc9H,WAAW;MAClDyG,QAAQwB,KAAKxB;MACbrG,MAAM6H,KAAKC;MACXjC,WAAW;MACXyC,QAAQT,KAAKU,kBAAkBb,cAAcpD,SAAS;MACtDrG,MAAM;IAAA;EAAA;EAIVgF,kBAAkB0C,SAAS6C,UAAU;IACnC,IAAI,KAAKtF,UAAU;MAEjB,MAAMuF,yBAAyB,KAAKlC,MAAMkC;MAC1C,IAAI5G,KAAK;MACT,IAAI6G,8BAA8B;MAElC,IAAIC,OAAOC,UAAUC,eAAeC,KAAK,KAAKvC,MAAMwC,eAAeN,2BACjE,KAAKlC,MAAMwC,cAAcN,wBAAwB1B,UAAU,QAC3D2B,8BAA8B,KAAKnC,MAAMwC,cAAcN,wBAAwB1B;MAEjFlF,KAAKA,MAAM8D,WAAWA,QAAQ,GAAG,KAAK/H;MACtCiE,KAAKA,MAAM2G,YAAYA,SAAS,KAAK5K;MACrCiE,KAAKA,MAAM8D,WAAWA,QAAQ,GAAG8C;MACjC5G,KAAKA,MAAM6G,+BAA+B/C,WAAWA,QAAQ,GAAG+C;MAEhE,KAAKxF,SAASuF,0BAA0B5G;MAExC,IAAI,KAAKqB,SAAS8F,YAAY;QAC5B,WAAWnI,OAAO8E,QAAQ,IAAI;UAC5B,IAAIgD,OAAOC,UAAUC,eAAeC,KAAKnD,QAAQ,IAAI9E,MAAM;YACzD,MAAMoI,SAAStD,QAAQ,GAAG9E;YAE1B,MAAMqI,OAAOtM,EAAEuM,KAAK,KAAK5C,MAAMwC,eAAeb,aAAaA,UAAUkB,cAAcvI,OAAOqH,UAAUnB,UAAUlG;YAE9G,KAAKqC,SAAS8F,WAAWE,QAAQA,KAAKE,aAAavI,OAAOoI;UAAA;QAAA;MAAA;IAAA;EAAA;AAAA;AAStEI,OAAOC,UAAUC;AACjBF,OAAOC,QAAQC,QAAQA;AACvBF,OAAOC,QAAQE,UAAUD","names":["AbstractQuery","require","sequelizeErrors","parserStore","_","logger","debug","debugContext","minSafeIntegerAsBigInt","BigInt","Number","MIN_SAFE_INTEGER","maxSafeIntegerAsBigInt","MAX_SAFE_INTEGER","aNum","isFinite","e","Math","round","log10","getInsertIdField","getSQLTypeFromJsType","value","TYPES","paramType","type","NVarChar","typeOptions","isInteger","Int","Numeric","precision","scale","getScale","VarChar","toString","Bit","Buffer","isBuffer","VarBinary","_run","connection","sql","parameters","errStack","options","complete","_logQuery","query","Promise","resolve","reject","startsWith","beginTransaction","error","transaction","name","lib","ISOLATION_LEVEL","isolationLevel","commitTransaction","rollbackTransaction","saveTransaction","rows2","request","Request","err","rowCount2","forOwn","key","addParameter","on","columns","push","execSql","rows","rowCount","formatError","Array","isArray","map","row","column","typeid","metadata","id","parse","get","colName","formatResults","run","errForStack","Error","queue","enqueue","stack","formatBindParameters","values","dialect","bindParam","replacementFunc","match","values2","data","isInsertQuery","handleInsertQuery","instance","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","result","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","comment","Comment","includes","Length","isSelectQuery","handleSelectQuery","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","returning","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","length","$action","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","results","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","message","fields","uniqueKey","model","uniqueKeys","msg","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","table","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","reduce","acc","item","index_name","index_keys","forEach","columnName","attribute","order","collate","primary","unique","index_description","metaData","autoIncrementAttribute","autoIncrementAttributeAlias","Object","prototype","hasOwnProperty","call","rawAttributes","dataValues","record","attr","find","fieldName","module","exports","Query","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mssql\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'bigint') {\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n        paramType.type = TYPES.VarChar;\n        paramType.value = value.toString();\n      } else {\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n      // return the current instance and mark it as an \"not an insert\".\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}