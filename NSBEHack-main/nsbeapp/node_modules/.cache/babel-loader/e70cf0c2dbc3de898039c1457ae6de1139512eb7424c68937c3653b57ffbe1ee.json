{"ast":null,"code":"\"use strict\";\n\nconst util = require(\"node:util\");\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"db2\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst moment = require(\"moment\");\nconst debug = logger.debugContext(\"sql:db2\");\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return {\n        ParamType: \"INPUT\",\n        DataType: \"BLOB\",\n        Data: value\n      };\n    }\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  }\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || \"default\"}): ${this.sql}`, this.options);\n    }\n    const errStack = new Error().stack;\n    return new Promise((resolve, reject) => {\n      if (_.startsWith(this.sql, \"BEGIN TRANSACTION\")) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"COMMIT TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"SAVE TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err2 => {\n              if (err2) {\n                reject(this.formatError(err2, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && SQL.indexOf(\" FROM \", 8) === -1) {\n          if (this.sql.charAt(this.sql.length - 1) === \";\") {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n        }\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n          stmt.execute(params, (err2, result, outparams) => {\n            debug(`executed(${this.connection.uuid || \"default\"}):${newSql} ${parameters ? util.inspect(parameters, {\n              compact: true,\n              breakLength: Infinity\n            }) : \"\"}`);\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || \"default\"}): ${newSql} ${parameters ? util.inspect(parameters, {\n                compact: true,\n                breakLength: Infinity\n              }) : \"\"}`, Date.now() - queryBegin, this.options);\n            }\n            if (err2 && err2.message) {\n              err2 = this.filterSQLError(err2, this.sql, connection);\n              if (err2 === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err2) {\n              err2.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err2, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === \"object\") {\n                if (_.startsWith(this.sql, \"DELETE FROM \")) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === \"TIMESTAMP\") {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === \"BLOB\") {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                        data[i][column] = new Buffer.from(value, \"hex\");\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === \"object\") {\n      bindParam = values;\n    }\n    return [sql, bindParam];\n  }\n  filterSQLError(err, sql, connection) {\n    if (err.message.search(\"SQL0204N\") != -1 && _.startsWith(sql, \"DROP \")) {\n      err = null;\n    } else if (err.message.search(\"SQL0443N\") != -1) {\n      if (this.isDropSchemaQuery()) {\n        connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n        connection.querySync(this.sql);\n      }\n      err = null;\n    } else if (err.message.search(\"SQL0601N\") != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === \"TABLE\") {\n        let table;\n        const mtarray = match[1].split(\".\");\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0911N\") != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0605W\") != -1) {\n      err = null;\n    } else if (err.message.search(\"SQL0668N\") != -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(\" \")[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) {\n      err = null;\n    }\n    return err;\n  }\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"Y\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === \"Y\" ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n    return result;\n  }\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n  handleShowConstraintsQuery(data) {\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, \"SQL\");\n    });\n  }\n  formatError(err, errStack, conn, parameters) {\n    let match;\n    if (!(err && err.message)) {\n      err[\"message\"] = \"No error message found.\";\n    }\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = \"\";\n      let uniqueKey = \"\";\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0][\"INDNAME\"];\n      }\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n      if (uniqueKey) {\n        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters[\"0\"];\n        }\n      }\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n  isDropSchemaQuery() {\n    let result = false;\n    if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n      result = true;\n    }\n    return result;\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === \"P\",\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === \"U\",\n          type: item.type\n        };\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\n          return ` ${x}`;\n        }).split(\" \"), column => {\n          let columnName = column.trim();\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, \"\");\n            currItem.fields.push({\n              attribute: columnName,\n              length: void 0,\n              order: column.indexOf(\"-\") === -1 ? \"ASC\" : \"DESC\",\n              collate: void 0\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["util","require","AbstractQuery","sequelizeErrors","parserStore","_","logger","moment","debug","debugContext","getInsertIdField","getSQLTypeFromJsType","value","Buffer","isBuffer","ParamType","DataType","Data","toString","_run","connection","sql","parameters","benchmark","sequelize","options","queryBegin","Date","now","log","uuid","errStack","Error","stack","Promise","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","commitTransaction","rollbackTransaction","err2","transaction","name","params","forOwn","key","param","push","SQL","toUpperCase","newSql","isSelectQuery","indexOf","charAt","length","slice","prepare","stmt","execute","result","outparams","inspect","compact","breakLength","Infinity","message","filterSQLError","closeSync","data","metadata","affectedRows","getAffectedRowsSync","fetchAllSync","getColumnMetadataSync","datalen","coltypes","i","SQL_DESC_NAME","SQL_DESC_TYPE_NAME","column","parse","get","utc","from","unshift","run","formatBindParameters","values","dialect","bindParam","replacementFunc","match","values2","Array","isArray","search","isDropSchemaQuery","querySync","table","mtarray","split","dropTable","substring","rowCount","conn","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","type","Type","allowNull","IsNull","defaultValue","primaryKey","KeySeq","autoIncrement","IsIdentity","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","handleSelectQuery","isUpsertQuery","query","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","VERSION","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","handleShowTablesQuery","results","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","remove","constraint","constraintName","uniqueIndexName","uniqueKey","fields","model","uniqueKeys","where","dataValues","msg","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","currItem","forEach","item","Key_name","primary","keyType","unique","COLNAMES","x","columnName","trim","attribute","order","collate","metaData","autoIncrementAttribute","id","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","module","exports","Query","default"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\db2\\query.js"],"sourcesContent":["'use strict';\n\nconst util = require('node:util');\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\n    }\n\n    if (typeof value === 'bigint') {\n      // The ibm_db module does not handle bigint, send as a string instead:\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}