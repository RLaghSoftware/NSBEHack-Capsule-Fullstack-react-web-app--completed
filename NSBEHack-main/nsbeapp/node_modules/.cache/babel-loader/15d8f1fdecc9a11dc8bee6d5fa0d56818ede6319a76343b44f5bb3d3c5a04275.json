{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst {\n  AbstractDialect\n} = require(\"../abstract\");\nconst {\n  OracleConnectionManager\n} = require(\"./connection-manager\");\nconst {\n  OracleQuery\n} = require(\"./query\");\nconst {\n  OracleQueryGenerator\n} = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").oracle;\nconst {\n  OracleQueryInterface\n} = require(\"./query-interface\");\nclass OracleDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new OracleConnectionManager(this, sequelize);\n    this.connectionManager.initPools();\n    this.queryGenerator = new OracleQueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new OracleQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nOracleDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  IGNORE: \" IGNORE\",\n  lock: false,\n  forShare: \" IN SHARE MODE\",\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false\n  },\n  constraints: {\n    restrict: false\n  },\n  returnValues: false,\n  returnIntoValues: true,\n  \"ORDER NULLS\": true,\n  schemas: true,\n  updateOnDuplicate: false,\n  indexViaAlter: false,\n  NUMERIC: true,\n  JSON: true,\n  upserts: true,\n  bulkDefault: true,\n  topLevelOrderByRequired: true,\n  GEOMETRY: false\n});\nOracleDialect.prototype.defaultVersion = \"18.0.0\";\nOracleDialect.prototype.Query = OracleQuery;\nOracleDialect.prototype.queryGenerator = OracleQueryGenerator;\nOracleDialect.prototype.DataTypes = DataTypes;\nOracleDialect.prototype.name = \"oracle\";\nOracleDialect.prototype.TICK_CHAR = '\"';\nOracleDialect.prototype.TICK_CHAR_LEFT = OracleDialect.prototype.TICK_CHAR;\nOracleDialect.prototype.TICK_CHAR_RIGHT = OracleDialect.prototype.TICK_CHAR;\nmodule.exports = OracleDialect;","map":{"version":3,"mappings":";;AAIA,MAAMA,IAAIC,QAAQ;AAClB,MAAM;EAAEC;AAAA,IAAoBD,QAAQ;AACpC,MAAM;EAAEE;AAAA,IAA4BF,QAAQ;AAC5C,MAAM;EAAEG;AAAA,IAAgBH,QAAQ;AAChC,MAAM;EAAEI;AAAA,IAAyBJ,QAAQ;AACzC,MAAMK,YAAYL,QAAQ,oBAAoBM;AAC9C,MAAM;EAAEC;AAAA,IAAyBP,QAAQ;AAEzC,4BAA4BC,gBAAgB;EAC1CO,YAAYC,WAAW;IACrB;IACA,KAAKA,YAAYA;IACjB,KAAKC,oBAAoB,IAAIR,wBAAwB,MAAMO;IAC3D,KAAKC,kBAAkBC;IACvB,KAAKC,iBAAiB,IAAIR,qBAAqB;MAC7CS,UAAU;MACVJ;IAAA;IAEF,KAAKK,iBAAiB,IAAIP,qBAAqBE,WAAW,KAAKG;EAAA;AAAA;AAInEG,cAAcC,UAAUC,WAAWlB,EAAEmB,MAAMnB,EAAEoB,UAAUlB,gBAAgBe,UAAUC,WAAW;EAC1F,aAAa;EACb,mBAAmB;EACnBG,QAAQ;EACRC,MAAM;EACNC,UAAU;EACVC,OAAO;IACLC,SAAS;IACTC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,OAAO;EAAA;EAETC,aAAa;IACXC,UAAU;EAAA;EAEZC,cAAc;EACdC,kBAAkB;EAClB,eAAe;EACfC,SAAS;EACTC,mBAAmB;EACnBC,eAAe;EACfC,SAAS;EACTC,MAAM;EACNC,SAAS;EACTC,aAAa;EACbC,yBAAyB;EACzBC,UAAU;AAAA;AAGZ1B,cAAcC,UAAU0B,iBAAiB;AACzC3B,cAAcC,UAAU2B,QAAQxC;AAChCY,cAAcC,UAAUJ,iBAAiBR;AACzCW,cAAcC,UAAUX,YAAYA;AACpCU,cAAcC,UAAU4B,OAAO;AAC/B7B,cAAcC,UAAU6B,YAAY;AACpC9B,cAAcC,UAAU8B,iBAAiB/B,cAAcC,UAAU6B;AACjE9B,cAAcC,UAAU+B,kBAAkBhC,cAAcC,UAAU6B;AAElEG,OAAOC,UAAUlC","names":["_","require","AbstractDialect","OracleConnectionManager","OracleQuery","OracleQueryGenerator","DataTypes","oracle","OracleQueryInterface","constructor","sequelize","connectionManager","initPools","queryGenerator","_dialect","queryInterface","OracleDialect","prototype","supports","merge","cloneDeep","IGNORE","lock","forShare","index","collate","length","parser","type","using","constraints","restrict","returnValues","returnIntoValues","schemas","updateOnDuplicate","indexViaAlter","NUMERIC","JSON","upserts","bulkDefault","topLevelOrderByRequired","GEOMETRY","defaultVersion","Query","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\oracle\\index.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst _ = require('lodash');\nconst { AbstractDialect } = require('../abstract');\nconst { OracleConnectionManager } = require('./connection-manager');\nconst { OracleQuery } = require('./query');\nconst { OracleQueryGenerator } = require('./query-generator');\nconst DataTypes = require('../../data-types').oracle;\nconst { OracleQueryInterface } = require('./query-interface');\n\nclass OracleDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new OracleConnectionManager(this, sequelize);\n    this.connectionManager.initPools();\n    this.queryGenerator = new OracleQueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new OracleQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nOracleDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  IGNORE: ' IGNORE',\n  lock: false,\n  forShare: ' IN SHARE MODE',\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false\n  },\n  constraints: {\n    restrict: false\n  },\n  returnValues: false,\n  returnIntoValues: true,\n  'ORDER NULLS': true,\n  schemas: true,\n  updateOnDuplicate: false,\n  indexViaAlter: false,\n  NUMERIC: true,\n  JSON: true,\n  upserts: true,\n  bulkDefault: true,\n  topLevelOrderByRequired: true,\n  GEOMETRY: false\n});\n\nOracleDialect.prototype.defaultVersion = '18.0.0';\nOracleDialect.prototype.Query = OracleQuery;\nOracleDialect.prototype.queryGenerator = OracleQueryGenerator;\nOracleDialect.prototype.DataTypes = DataTypes;\nOracleDialect.prototype.name = 'oracle';\nOracleDialect.prototype.TICK_CHAR = '\"';\nOracleDialect.prototype.TICK_CHAR_LEFT = OracleDialect.prototype.TICK_CHAR;\nOracleDialect.prototype.TICK_CHAR_RIGHT = OracleDialect.prototype.TICK_CHAR;\n\nmodule.exports = OracleDialect;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}