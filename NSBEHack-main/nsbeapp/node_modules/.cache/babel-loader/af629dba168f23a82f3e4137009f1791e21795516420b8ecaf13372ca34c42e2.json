{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.sqlite.org/datatype3.html\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.DATE.types.sqlite = [\"DATETIME\"];\n  BaseTypes.STRING.types.sqlite = [\"VARCHAR\", \"VARCHAR BINARY\"];\n  BaseTypes.CHAR.types.sqlite = [\"CHAR\", \"CHAR BINARY\"];\n  BaseTypes.TEXT.types.sqlite = [\"TEXT\"];\n  BaseTypes.TINYINT.types.sqlite = [\"TINYINT\"];\n  BaseTypes.SMALLINT.types.sqlite = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.sqlite = [\"MEDIUMINT\"];\n  BaseTypes.INTEGER.types.sqlite = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.sqlite = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.sqlite = [\"FLOAT\"];\n  BaseTypes.TIME.types.sqlite = [\"TIME\"];\n  BaseTypes.DATEONLY.types.sqlite = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.sqlite = [\"TINYINT\"];\n  BaseTypes.BLOB.types.sqlite = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.sqlite = [\"DECIMAL\"];\n  BaseTypes.UUID.types.sqlite = [\"UUID\"];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = [\"REAL\"];\n  BaseTypes.DOUBLE.types.sqlite = [\"DOUBLE PRECISION\"];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = [\"JSON\", \"JSONB\"];\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes(\"+\")) {\n        return new Date(date + options.timezone);\n      }\n      return new Date(date);\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"SQLite does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"TEXT\";\n    }\n  }\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return \"TEXT COLLATE NOCASE\";\n    }\n  }\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += \" UNSIGNED\";\n      }\n      if (this._zerofill) {\n        result += \" ZEROFILL\";\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === \"number\") {\n          result += `,${this._decimals}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {}\n  class DOUBLE extends BaseTypes.DOUBLE {}\n  class REAL extends BaseTypes.REAL {}\n  function parseFloating(value) {\n    if (typeof value !== \"string\") {\n      return value;\n    }\n    if (value === \"NaN\") {\n      return NaN;\n    }\n    if (value === \"Infinity\") {\n      return Infinity;\n    }\n    if (value === \"-Infinity\") {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"TEXT\";\n    }\n  }\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};","map":{"version":3,"mappings":"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","names":["module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_zerofill","_unsigned","key","DATE","types","sqlite","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","parse","data","date","options","includes","Date","timezone","toSql","_binary","_length","CITEXT","NUMBER","result","_decimals","constructor","length","removeUnsupportedIntegerOptions","value","NaN","Infinity","floating","parseFloating","num","prototype","JSONTYPE"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\data-types.js"],"sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}