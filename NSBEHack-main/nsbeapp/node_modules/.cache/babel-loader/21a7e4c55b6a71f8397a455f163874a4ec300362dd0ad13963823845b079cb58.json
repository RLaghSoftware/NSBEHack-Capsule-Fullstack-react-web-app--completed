{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst DataTypes = require(\"../../data-types\");\nconst TableHints = require(\"../../table-hints\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst randomBytes = require(\"crypto\").randomBytes;\nconst semver = require(\"semver\");\nconst Op = require(\"../../operators\");\nconst throwMethodUndefined = function (methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      collate: null\n    }, options);\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : \"\";\n    return [\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =\", wrapSingleQuote(databaseName), \")\", \"BEGIN\", \"CREATE DATABASE\", this.quoteIdentifier(databaseName), `${collation};`, \"END;\"].join(\" \");\n  }\n  dropDatabaseQuery(databaseName) {\n    return [\"IF EXISTS (SELECT * FROM sys.databases WHERE name =\", wrapSingleQuote(databaseName), \")\", \"BEGIN\", \"DROP DATABASE\", this.quoteIdentifier(databaseName), \";\", \"END;\"].join(\" \");\n  }\n  createSchema(schema) {\n    return [\"IF NOT EXISTS (SELECT schema_name\", \"FROM information_schema.schemata\", \"WHERE schema_name =\", wrapSingleQuote(schema), \")\", \"BEGIN\", \"EXEC sp_executesql N'CREATE SCHEMA\", this.quoteIdentifier(schema), \";'\", \"END;\"].join(\" \");\n  }\n  dropSchema(schema) {\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\"IF EXISTS (SELECT schema_name\", \"FROM information_schema.schemata\", \"WHERE schema_name =\", quotedSchema, \")\", \"BEGIN\", \"DECLARE @id INT, @ms_sql NVARCHAR(2000);\", \"DECLARE @cascade TABLE (\", \"id INT NOT NULL IDENTITY PRIMARY KEY,\", \"ms_sql NVARCHAR(2000) NOT NULL );\", \"INSERT INTO @cascade ( ms_sql )\", \"SELECT CASE WHEN o.type IN ('F','PK')\", \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\", \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\", \"FROM sys.objects o\", \"JOIN sys.schemas s on o.schema_id = s.schema_id\", \"LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id\", \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema, \"ORDER BY o.type ASC;\", \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\", \"WHILE @id IS NOT NULL\", \"BEGIN\", \"BEGIN TRY EXEC sp_executesql @ms_sql; END TRY\", \"BEGIN CATCH BREAK; THROW; END CATCH;\", \"DELETE FROM @cascade WHERE id = @id;\", \"SELECT @id = NULL, @ms_sql = NULL;\", \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\", \"END\", \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\", \"END;\"].join(\" \");\n  }\n  showSchemasQuery() {\n    return ['SELECT \"name\" as \"schema_name\" FROM sys.schemas as s', 'WHERE \"s\".\"name\" NOT IN (', \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\", \")\", \"AND\", '\"s\".\"name\" NOT LIKE', \"'db_%'\"].join(\" \");\n  }\n  versionQuery() {\n    return [\"DECLARE @ms_ver NVARCHAR(20);\", \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\", \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"].join(\" \");\n  }\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = {},\n      attributesClauseParts = [];\n    let commentStr = \"\";\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n        if (dataType.includes(\"COMMENT \")) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace(\"COMMENT\", \"\").trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          dataType = commentMatch[1];\n        }\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          primaryKeys.push(attr);\n          if (dataType.includes(\"REFERENCES\")) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n          }\n        } else if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`);\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([`IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`, `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(\", \")})`, \";\", commentStr]);\n  }\n  describeTableQuery(tableName, schema) {\n    let sql = [\"SELECT\", \"c.COLUMN_NAME AS 'Name',\", \"c.DATA_TYPE AS 'Type',\", \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\", \"c.IS_NULLABLE as 'IsNull',\", \"COLUMN_DEFAULT AS 'Default',\", \"pk.CONSTRAINT_TYPE AS 'Constraint',\", \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\", \"CAST(prop.value AS NVARCHAR) AS 'Comment'\", \"FROM\", \"INFORMATION_SCHEMA.TABLES t\", \"INNER JOIN\", \"INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA\", \"LEFT JOIN (SELECT tc.table_schema, tc.table_name, \", \"cu.column_name, tc.CONSTRAINT_TYPE \", \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc \", \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu \", \"ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name \", \"and tc.constraint_name=cu.constraint_name \", \"and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk \", \"ON pk.table_schema=c.table_schema \", \"AND pk.table_name=c.table_name \", \"AND pk.column_name=c.column_name \", \"INNER JOIN sys.columns AS sc\", \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\", \"LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id\", \"AND prop.minor_id = sc.column_id\", \"AND prop.name = 'MS_Description'\", \"WHERE t.TABLE_NAME =\", wrapSingleQuote(tableName)].join(\" \");\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n    return sql;\n  }\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema || \"dbo\";\n    return `SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${this.escape(tableName)} AND TABLE_SCHEMA = ${this.escape(schemaName)}`;\n  }\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([`IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`, \"DROP TABLE\", quoteTbl, \";\"]);\n  }\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n    let commentStr = \"\";\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      delete dataType[\"comment\"];\n    }\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(table), \"ADD\", this.quoteIdentifier(key), this.attributeToSQL(dataType, {\n      context: \"addColumn\"\n    }), \";\", commentStr]);\n  }\n  commentTemplate(comment, table, column) {\n    return ` EXEC sp_addextendedproperty @name = N'MS_Description', @value = ${this.escape(comment)}, @level0type = N'Schema', @level0name = 'dbo', @level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, @level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP COLUMN\", this.quoteIdentifier(attributeName), \";\"]);\n  }\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = \"\";\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes(\"COMMENT \")) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace(\"COMMENT\", \"\").trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        definition = commentMatch[1];\n      }\n      if (definition.includes(\"REFERENCES\")) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, \"\")}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), attrString.length && `ALTER COLUMN ${attrString.join(\", \")}`, constraintString.length && `ADD ${constraintString.join(\", \")}`, \";\", commentString]);\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\"EXEC sp_rename\", `'${this.quoteTable(tableName)}.${attrBefore}',`, `'${newName}',`, \"'COLUMN'\", \";\"]);\n  }\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n    let needIdentityInsertWrapper = false,\n      outputFragment = \"\";\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n      outputFragment = returnValues.outputFragment;\n    }\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n    attrValueHashes.forEach(attrValueHash => {\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) return;\n          allAttributes.push(key);\n        }\n      });\n    });\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${allAttributes.map(key => this.escape(attrValueHash[key])).join(\",\")})`);\n      });\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(\",\");\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === \"string\" ? v : v(tupleStr)).join(\";\");\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(\";\");\n  }\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace(\"UPDATE\", updateArgs);\n    }\n    return sql;\n  }\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === \"string\" ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(\", \");\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(\", \");\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`;\n    let joinCondition;\n    identityAttrs.forEach(key => {\n      if (insertValues[key] && insertValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n      }\n    });\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      for (const key in clause) {\n        if (typeof clause[key] === \"undefined\" || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n    if (clauses.length === 0) {\n      throw new Error(\"Primary Key or Unique key should be passed to upsert query\");\n    } else {\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(\" AND \");\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(\" AND \");\n      }\n    }\n    const filteredUpdateClauses = updateKeys.filter(key => !identityAttrs.includes(key)).map(key => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    });\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(\", \")}` : \"\";\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n    return Utils.joinSQLFragments([\"DELETE\", options.limit && `TOP(${this.escape(options.limit)})`, \"FROM\", table, whereClause && `WHERE ${whereClause}`, \";\", \"SELECT @@ROWCOUNT AS AFFECTEDROWS\", \";\"]);\n  }\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    if (attribute.references) {\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log(\"MSSQL does not support self referencial constraints, we will remove it but we recommend restructuring your query\");\n        attribute.onDelete = \"\";\n        attribute.onUpdate = \"\";\n      }\n    }\n    let template;\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(\", \")}))`;\n      return template;\n    }\n    template = attribute.type.toString();\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += \" NULL\";\n    }\n    if (attribute.autoIncrement) {\n      template += \" IDENTITY(1,1)\";\n    }\n    if (attribute.type !== \"TEXT\" && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key, attribute;\n    for (key in attributes) {\n      attribute = attributes[key];\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          attribute.onDelete = \"\";\n          attribute.onUpdate = \"\";\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n          attribute.onUpdate = \"\";\n        }\n      }\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n    return result;\n  }\n  createTrigger() {\n    throwMethodUndefined(\"createTrigger\");\n  }\n  dropTrigger() {\n    throwMethodUndefined(\"dropTrigger\");\n  }\n  renameTrigger() {\n    throwMethodUndefined(\"renameTrigger\");\n  }\n  createFunction() {\n    throwMethodUndefined(\"createFunction\");\n  }\n  dropFunction() {\n    throwMethodUndefined(\"dropFunction\");\n  }\n  renameFunction() {\n    throwMethodUndefined(\"renameFunction\");\n  }\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${\"SELECT constraint_name = OBJ.NAME, constraintName = OBJ.NAME, \"}${catalogName ? `constraintCatalog = '${catalogName}', ` : \"\"}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), tableName = TB.NAME, tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${catalogName ? `tableCatalog = '${catalogName}', ` : \"\"}columnName = COL.NAME, referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${catalogName ? `referencedCatalog = '${catalogName}', ` : \"\"}referencedTableName = RTB.NAME, referencedColumnName = RCOL.NAME FROM sys.foreign_key_columns FKC INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID`;\n  }\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)} WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([this._getForeignKeysQueryPrefix(), \"WHERE\", `TB.NAME =${wrapSingleQuote(tableName)}`, \"AND\", `COL.NAME =${wrapSingleQuote(attributeName)}`, table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`]);\n  }\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\"SELECT K.TABLE_NAME AS tableName,\", \"K.COLUMN_NAME AS columnName,\", \"K.CONSTRAINT_NAME AS constraintName\", \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C\", \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K\", \"ON C.TABLE_NAME = K.TABLE_NAME\", \"AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG\", \"AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA\", \"AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME\", \"WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'\", `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`, `AND K.TABLE_NAME = ${tableName}`, \";\"]);\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP\", this.quoteIdentifier(foreignKey)]);\n  }\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\"SELECT name FROM sys.default_constraints\", `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`, `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`, `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`, \";\"]);\n  }\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP CONSTRAINT\", this.quoteIdentifier(constraintName), \";\"]);\n  }\n  setIsolationLevelQuery() {}\n  generateTransactionId() {\n    return randomBytes(10).toString(\"hex\");\n  }\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return \"BEGIN TRANSACTION;\";\n  }\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n    return \"COMMIT TRANSACTION;\";\n  }\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return \"ROLLBACK TRANSACTION;\";\n  }\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, {\n      modelName: model && model.name,\n      as: mainTableAs\n    });\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, \"11.0.0\");\n    if (isSQLServer2008 && options.offset) {\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = {\n        mainQueryOrder: []\n      };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n      const tmpTable = mainTableAs || \"OffsetTable\";\n      if (options.include) {\n        const subQuery = options.subQuery === void 0 ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n        let mainJoinQueries = [];\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n          const joinQueries = this.generateInclude(include, {\n            externalAs: mainTableAs,\n            internalAs: mainTableAs\n          }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n        return Utils.joinSQLFragments([\"SELECT TOP 100 PERCENT\", attributes.join(\", \"), \"FROM (\", [\"SELECT\", options.limit && `TOP ${options.limit}`, \"* FROM (\", [\"SELECT ROW_NUMBER() OVER (\", [\"ORDER BY\", orders.mainQueryOrder.join(\", \")], `) as row_num, ${tmpTable}.* FROM (`, [\"SELECT DISTINCT\", `${tmpTable}.* FROM ${tables} AS ${tmpTable}`, mainJoinQueries, where && `WHERE ${where}`], `) AS ${tmpTable}`], `) AS ${tmpTable} WHERE row_num > ${offset}`], `) AS ${tmpTable}`]);\n      }\n      return Utils.joinSQLFragments([\"SELECT TOP 100 PERCENT\", attributes.join(\", \"), \"FROM (\", [\"SELECT\", options.limit && `TOP ${options.limit}`, \"* FROM (\", [\"SELECT ROW_NUMBER() OVER (\", [\"ORDER BY\", orders.mainQueryOrder.join(\", \")], `) as row_num, * FROM ${tables} AS ${tmpTable}`, where && `WHERE ${where}`], `) AS ${tmpTable} WHERE row_num > ${offset}`], `) AS ${tmpTable}`]);\n    }\n    return Utils.joinSQLFragments([\"SELECT\", isSQLServer2008 && options.limit && `TOP ${options.limit}`, attributes.join(\", \"), `FROM ${tables}`, mainTableAs && `AS ${mainTableAs}`, options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`]);\n  }\n  addLimitAndOffset(options, model) {\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, \"11.0.0\")) {\n      return \"\";\n    }\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === void 0 ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;\n    let fragment = \"\";\n    let orders = {};\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n    if (options.limit || options.offset) {\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\n        let primaryKey = model.primaryKeyField;\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(primaryKey)}`;\n        const aliasedAttribute = (options.attributes || []).find(attr => Array.isArray(attr) && attr[1] && (attr[0] === primaryKey || attr[1] === primaryKey));\n        if (aliasedAttribute) {\n          const modelName = this.quoteIdentifier(options.tableAs || model.name);\n          const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);\n          primaryKey = new Utils.Col(alias || aliasedAttribute[1]);\n        }\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = (options.order || []).map(order => {\n            const value = Array.isArray(order) ? order[0] : order;\n            if (value instanceof Utils.Col) {\n              return value.col;\n            }\n            if (value instanceof Utils.Literal) {\n              return value.val;\n            }\n            return value;\n          });\n          const primaryKeyFieldAlreadyPresent = orderFieldNames.some(fieldName => fieldName === (primaryKey.col || primaryKey));\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? \", \" : \" ORDER BY \";\n            fragment += tablePkFragment;\n          }\n        }\n      }\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n    return fragment;\n  }\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n  quoteIdentifier(identifier, force) {\n    return `[${identifier.replace(/[[\\]']+/g, \"\")}]`;\n  }\n}\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\nmodule.exports = MSSQLQueryGenerator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,IAAIC,QAAQ;AAClB,MAAMC,QAAQD,QAAQ;AACtB,MAAME,YAAYF,QAAQ;AAC1B,MAAMG,aAAaH,QAAQ;AAC3B,MAAMI,yBAAyBJ,QAAQ;AACvC,MAAMK,cAAcL,QAAQ,UAAUK;AACtC,MAAMC,SAASN,QAAQ;AACvB,MAAMO,KAAKP,QAAQ;AAGnB,MAAMQ,uBAAuB,UAASC,YAAY;EAChD,MAAM,IAAIC,MAAM,eAAeD;AAAA;AAGjC,kCAAkCL,uBAAuB;EACvDO,oBAAoBC,cAAcC,SAAS;IACzCA,UAAUC;MAAEC,SAAS;IAAA,GAASF;IAE9B,MAAMG,YAAYH,QAAQE,UAAU,WAAW,KAAKE,OAAOJ,QAAQE,aAAa;IAEhF,OAAO,CACL,2DAA2DG,gBAAgBN,eAAe,KAC1F,SACA,mBAAmB,KAAKO,gBAAgBP,eACxC,GAAGI,cACH,QACAI,KAAK;EAAA;EAGTC,kBAAkBT,cAAc;IAC9B,OAAO,CACL,uDAAuDM,gBAAgBN,eAAe,KACtF,SACA,iBAAiB,KAAKO,gBAAgBP,eAAe,KACrD,QACAQ,KAAK;EAAA;EAGTE,aAAaC,QAAQ;IACnB,OAAO,CACL,qCACA,oCACA,uBAAuBL,gBAAgBK,SAAS,KAChD,SACA,sCACA,KAAKJ,gBAAgBI,SACrB,MACA,QACAH,KAAK;EAAA;EAGTI,WAAWD,QAAQ;IAEjB,MAAME,eAAeP,gBAAgBK;IACrC,OAAO,CACL,iCACA,oCACA,uBAAuBE,cAAc,KACrC,SACA,4CACA,4BACA,yCACA,qCACA,mCACA,yCACA,4FACA,6DACA,sBACA,mDACA,qEACA,kDAAkDA,cAClD,wBACA,sEACA,yBACA,SACA,iDACA,wCACA,wCACA,sCACA,sEACA,OACA,oCAAoC,KAAKN,gBAAgBI,SAAS,MAClE,QACAH,KAAK;EAAA;EAGTM,mBAAmB;IACjB,OAAO,CACL,wDACA,6BACA,0DACA,KAAK,OAAO,uBAAuB,UACnCN,KAAK;EAAA;EAGTO,eAAe;IAEb,OAAO,CACL,iCACA,mFACA,kFACAP,KAAK;EAAA;EAGTQ,iBAAiBC,WAAWC,YAAYjB,SAAS;IAC/C,MAAMkB,cAAc;MAClBC,cAAc;MACdC,wBAAwB;IAE1B,IAAIC,aAAa;IAEjB,WAAWC,QAAQL,YAAY;MAC7B,IAAIM,OAAOC,UAAUC,eAAeC,KAAKT,YAAYK,OAAO;QAC1D,IAAIK,WAAWV,WAAWK;QAC1B,IAAIM;QAEJ,IAAID,SAASE,SAAS,aAAa;UACjC,MAAMC,eAAeH,SAASC,MAAM;UACpC,MAAMG,cAAcD,aAAa,GAAGE,QAAQ,WAAW,IAAIC;UAC3DZ,cAAc,KAAKa,gBAAgBH,aAAaf,WAAWM;UAE3DK,WAAWG,aAAa;QAAA;QAG1B,IAAIH,SAASE,SAAS,gBAAgB;UACpCX,YAAYiB,KAAKb;UAEjB,IAAIK,SAASE,SAAS,eAAe;YAEnCD,QAAQD,SAASC,MAAM;YACvBR,sBAAsBe,KAAK,GAAG,KAAK7B,gBAAgBgB,SAASM,MAAM,GAAGI,QAAQ,eAAe;YAC5Fb,YAAYG,QAAQM,MAAM;UAAA,OACrB;YACLR,sBAAsBe,KAAK,GAAG,KAAK7B,gBAAgBgB,SAASK,SAASK,QAAQ,eAAe;UAAA;QAAA,WAErFL,SAASE,SAAS,eAAe;UAE1CD,QAAQD,SAASC,MAAM;UACvBR,sBAAsBe,KAAK,GAAG,KAAK7B,gBAAgBgB,SAASM,MAAM;UAClET,YAAYG,QAAQM,MAAM;QAAA,OACrB;UACLR,sBAAsBe,KAAK,GAAG,KAAK7B,gBAAgBgB,SAASK;QAAA;MAAA;IAAA;IAKlE,MAAMS,WAAWlB,YAAYmB,IAAIC,MAAM,KAAKhC,gBAAgBgC,KAAK/B,KAAK;IAEtE,IAAIP,QAAQuC,YAAY;MACtBrD,EAAEsD,KAAKxC,QAAQuC,YAAY,CAACE,SAASC,cAAc;QACjD,IAAID,QAAQE,aAAa;UACvB,IAAI,OAAOD,cAAc,UAAU;YACjCA,YAAY,QAAQ1B,aAAayB,QAAQG,OAAOrC,KAAK;UAAA;UAEvDa,sBAAsBe,KAAK,cACzB,KAAK7B,gBAAgBoC,sBAErBD,QAAQG,OAAOP,IAAIQ,SAAS,KAAKvC,gBAAgBuC,QAAQtC,KAAK;QAAA;MAAA;IAAA;IAMtE,IAAI6B,SAASU,SAAS,GAAG;MACvB1B,sBAAsBe,KAAK,gBAAgBC;IAAA;IAG7C,WAAWW,QAAQ5B,aAAa;MAC9B,IAAII,OAAOC,UAAUC,eAAeC,KAAKP,aAAa4B,OAAO;QAC3D3B,sBAAsBe,KAAK,gBAAgB,KAAK7B,gBAAgByC,UAAU5B,YAAY4B;MAAA;IAAA;IAI1F,MAAMC,kBAAkB,KAAKC,WAAWjC;IAExC,OAAO5B,MAAM8D,iBAAiB,CAC5B,iBAAiBF,kCACjB,gBAAgBA,oBAAoB5B,sBAAsBb,KAAK,UAC/D,KACAc;EAAA;EAIJ8B,mBAAmBnC,WAAWN,QAAQ;IACpC,IAAI0C,MAAM,CACR,UACA,4BACA,0BACA,2CACA,8BACA,gCACA,uCACA,4GACA,6CACA,QACA,+BACA,cACA,mGACA,sDACA,uCACA,iDACA,iDACA,uEACA,8CACA,6CACA,sCACA,mCACA,qCACA,gCACA,gGACA,0EACA,oCACA,oCACA,wBAAwB/C,gBAAgBW,YACxCT,KAAK;IAEP,IAAIG,QAAQ;MACV0C,OAAO,uBAAuB/C,gBAAgBK;IAAA;IAGhD,OAAO0C;EAAA;EAGTC,iBAAiBC,QAAQC,OAAO;IAC9B,OAAO,kBAAkB,KAAKN,WAAWK,YAAY,KAAKL,WAAWM;EAAA;EAGvEC,kBAAkB;IAChB,OAAO;EAAA;EAGTC,iBAAiBC,OAAO;IACtB,MAAM1C,YAAY0C,MAAM1C,aAAa0C;IACrC,MAAMC,aAAaD,MAAMhD,UAAU;IAEnC,OAAO,mHAAmH,KAAKN,OAAOY,iCAAiC,KAAKZ,OAAOuD;EAAA;EAGrLC,eAAe5C,WAAW;IACxB,MAAM6C,WAAW,KAAKZ,WAAWjC;IACjC,OAAO5B,MAAM8D,iBAAiB,CAC5B,iBAAiBW,+BACjB,cACAA,UACA;EAAA;EAIJC,eAAeJ,OAAOK,KAAKpC,UAAU;IAGnCA,SAASkB,QAAQkB;IACjB,IAAI1C,aAAa;IAEjB,IAAIM,SAASqC,WAAW9E,EAAE+E,SAAStC,SAASqC,UAAU;MACpD3C,aAAa,KAAKa,gBAAgBP,SAASqC,SAASN,OAAOK;MAI3D,OAAOpC,SAAS;IAAA;IAGlB,OAAOvC,MAAM8D,iBAAiB,CAC5B,eACA,KAAKD,WAAWS,QAChB,OACA,KAAKpD,gBAAgByD,MACrB,KAAKG,eAAevC,UAAU;MAAEwC,SAAS;IAAA,IACzC,KACA9C;EAAA;EAIJa,gBAAgB8B,SAASN,OAAOU,QAAQ;IACtC,OAAO,oEACoC,KAAKhE,OAAO4D,iGAEV,KAAK1D,gBAAgBoD,kDACpB,KAAKpD,gBAAgB8D;EAAA;EAGrEC,kBAAkBrD,WAAWsD,eAAe;IAC1C,OAAOlF,MAAM8D,iBAAiB,CAC5B,eACA,KAAKD,WAAWjC,YAChB,eACA,KAAKV,gBAAgBgE,gBACrB;EAAA;EAIJC,kBAAkBvD,WAAWC,YAAY;IACvC,MAAMuD,aAAa;MACjBC,mBAAmB;IACrB,IAAIC,gBAAgB;IAEpB,WAAWJ,iBAAiBrD,YAAY;MACtC,MAAM0D,iBAAiB,KAAKrE,gBAAgBgE;MAC5C,IAAIM,aAAa3D,WAAWqD;MAC5B,IAAIM,WAAW/C,SAAS,aAAa;QACnC,MAAMC,eAAe8C,WAAWhD,MAAM;QACtC,MAAMG,cAAcD,aAAa,GAAGE,QAAQ,WAAW,IAAIC;QAC3DyC,iBAAiB,KAAKxC,gBAAgBH,aAAaf,WAAWsD;QAE9DM,aAAa9C,aAAa;MAAA;MAE5B,IAAI8C,WAAW/C,SAAS,eAAe;QACrC4C,iBAAiBtC,KAAK,gBAAgBwC,mBAAmBC,WAAW5C,QAAQ,qBAAqB;MAAA,OAC5F;QACLwC,WAAWrC,KAAK,GAAGwC,kBAAkBC;MAAA;IAAA;IAIzC,OAAOxF,MAAM8D,iBAAiB,CAC5B,eACA,KAAKD,WAAWjC,YAChBwD,WAAW1B,UAAU,gBAAgB0B,WAAWjE,KAAK,SACrDkE,iBAAiB3B,UAAU,OAAO2B,iBAAiBlE,KAAK,SACxD,KACAmE;EAAA;EAIJG,kBAAkB7D,WAAW8D,YAAY7D,YAAY;IACnD,MAAM8D,UAAUxD,OAAOyD,KAAK/D,YAAY;IACxC,OAAO7B,MAAM8D,iBAAiB,CAC5B,kBACA,IAAI,KAAKD,WAAWjC,cAAc8D,gBAClC,IAAIC,aACJ,YACA;EAAA;EAIJE,gBAAgBjE,WAAWkE,iBAAiBlF,SAASiB,YAAY;IAC/D,MAAMkE,cAAc,KAAKlC,WAAWjC;IACpChB,UAAUA,WAAW;IACrBiB,aAAaA,cAAc;IAE3B,MAAMmE,SAAS;IACf,MAAMC,gBAAgB;IACtB,MAAMC,aAAa;IAEnB,IAAIC,4BAA4B;MAC9BC,iBAAiB;IAEnB,IAAIxF,QAAQyF,WAAW;MACrB,MAAMC,eAAe,KAAKC,qBAAqB1E,YAAYjB;MAE3DwF,iBAAiBE,aAAaF;IAAA;IAGhC,MAAMI,aAAa,eAAeT,cAAcK;IAEhDN,gBAAgBW,QAAQC,iBAAiB;MAEvC,MAAMlD,SAASrB,OAAOyD,KAAKc;MAC3B,MAAMC,YAAY9E,WAAW2B,OAAO;MACpC,IAAIA,OAAOE,WAAW,KAAKiD,aAAaA,UAAUC,iBAAiBF,cAAclD,OAAO,QAAQ,MAAM;QACpG0C,WAAWnD,KAAKyD;QAChB;MAAA;MAIF1G,EAAE+G,OAAOH,eAAe,CAACI,OAAOnC,QAAQ;QACtC,IAAImC,UAAU,QAAQjF,WAAW8C,QAAQ9C,WAAW8C,KAAKiC,eAAe;UACtET,4BAA4B;QAAA;QAG9B,IAAI,CAACF,cAAcxD,SAASkC,MAAM;UAChC,IAAImC,UAAU,QAAQjF,WAAW8C,QAAQ9C,WAAW8C,KAAKiC,eACvD;UAEFX,cAAclD,KAAK4B;QAAA;MAAA;IAAA;IAKzB,IAAIsB,cAAcvC,SAAS,GAAG;MAC5BoC,gBAAgBW,QAAQC,iBAAiB;QACvCV,OAAOjD,KAAK,IACVkD,cAAchD,IAAI0B,OAChB,KAAK3D,OAAO0F,cAAc/B,OAAOxD,KAAK;MAAA;MAI5C,MAAM4F,mBAAmBd,cAAchD,IAAIf,QAAQ,KAAKhB,gBAAgBgB,OAAOf,KAAK;MACpF+E,WAAWnD,KAAKiE,YAAY,eAAejB,gBAAgBgB,oBAAoBX,yBAAyBY;IAAA;IAE1G,MAAMC,WAAW;IACjB,IAAIC,SAAS;IACb,MAAMC,QAAQC,KAAKC,MAAM,OAAOpB,cAAcvC,SAAS,MAAM;IAC7D,OAAOwD,SAASE,KAAKE,IAAItB,OAAOtC,QAAQ,IAAI;MAC1C,MAAMsD,WAAWhB,OAAOuB,MAAML,QAAQE,KAAKI,IAAIxB,OAAOtC,QAAQwD,SAASC;MACvE,IAAIM,iBAAiBvB,WAAWjD,IAAIyE,KAAK,OAAOA,MAAM,WAAWA,IAAIA,EAAEV,WAAW7F,KAAK;MACvF,IAAIgF,2BAA2B;QAC7BsB,iBAAiB,uBAAuB1B,mBAAmB0B,uCAAuC1B;MAAA;MAEpGkB,SAASlE,KAAK0E;MACdP,UAAUC;IAAA;IAEZ,OAAOF,SAAS9F,KAAK;EAAA;EAGvBwG,YAAY/F,WAAW8E,eAAekB,OAAOhH,SAASiB,YAAY;IAChE,MAAMmC,MAAM,MAAM2D,YAAY/F,WAAW8E,eAAekB,OAAOhH,SAASiB;IACxE,IAAIjB,QAAQiH,OAAO;MACjB,MAAMC,aAAa,cAAc,KAAK9G,OAAOJ,QAAQiH;MACrD7D,IAAI+D,QAAQ/D,IAAI+D,MAAMnF,QAAQ,UAAUkF;IAAA;IAE1C,OAAO9D;EAAA;EAGTgE,YAAYpG,WAAWqG,cAAcC,cAAcN,OAAOO,OAAO;IAC/D,MAAMC,mBAAmB,KAAKvE,WAAW,GAAGjC;IAC5C,MAAMyG,mBAAmB,KAAKxE,WAAW,GAAGjC;IAC5C,MAAM0G,mBAAmB;IACzB,MAAMC,gBAAgB;IACtB,MAAMC,cAAc;IACpB,MAAMC,kBAAkB,KAAK5E,WAAWjC;IACxC,IAAIuE,4BAA4B;IAGhC,WAAWxB,OAAOwD,MAAMO,eAAe;MACrC,IAAIP,MAAMO,cAAc/D,KAAKgE,YAAY;QACvCL,iBAAiBvF,KAAKoF,MAAMO,cAAc/D,KAAKlB,SAASkB;MAAA;MAE1D,IAAIwD,MAAMO,cAAc/D,KAAKiE,QAAQ;QACnCJ,YAAYzF,KAAKoF,MAAMO,cAAc/D,KAAKlB,SAASkB;MAAA;MAErD,IAAIwD,MAAMO,cAAc/D,KAAKiC,eAAe;QAC1C2B,cAAcxF,KAAKoF,MAAMO,cAAc/D,KAAKlB,SAASkB;MAAA;IAAA;IAKzD,WAAWkE,SAASV,MAAMW,UAAU;MAClC,IAAID,MAAMD,UAAUC,MAAMrF,QAAQ;QAChC,WAAWC,SAASoF,MAAMrF,QAAQ;UAChC,MAAMuF,YAAY,OAAOtF,UAAU,WAAWA,QAAQA,MAAMuF,QAAQvF,MAAMwF;UAC1E,IAAI,CAACT,YAAY/F,SAASsG,cAAcZ,MAAMO,cAAcK,YAAY;YACtEP,YAAYzF,KAAKgG;UAAA;QAAA;MAAA;IAAA;IAMzB,MAAMG,aAAa/G,OAAOyD,KAAKsC;IAC/B,MAAMiB,aAAahH,OAAOyD,KAAKqC;IAC/B,MAAMmB,mBAAmBD,WAAWlG,IAAI0B,OAAO,KAAKzD,gBAAgByD,MAAMxD,KAAK;IAC/E,MAAMkI,sBAAsBF,WAAWlG,IAAI0B,OAAO,KAAK3D,OAAOiH,aAAatD,OAAOxD,KAAK;IACvF,MAAMmI,mBAAmB,UAAUD;IACnC,IAAIE;IAGJhB,cAAc9B,QAAQ9B,OAAO;MAC3B,IAAIsD,aAAatD,QAAQsD,aAAatD,SAAS,MAAM;QACnDwB,4BAA4B;MAAA;IAAA;IAShC,MAAMqD,UAAU5B,MAAMtH,GAAGmJ,IAAIC,OAAOC,UAAU;MAC5C,IAAIC,QAAQ;MAIZ,WAAWjF,OAAOgF,QAAQ;QACxB,IAAI,OAAOA,OAAOhF,SAAS,eAAegF,OAAOhF,QAAQ,MAAM;UAC7DiF,QAAQ;UACR;QAAA;MAAA;MAGJ,OAAOA;IAAA;IAOT,MAAMC,iBAAiBC,SAAS;MAC9B,OAAOA,MAAM7G,IAAI0B,OAAO;QACtBA,MAAM,KAAKzD,gBAAgByD;QAC3B,OAAO,GAAGyD,oBAAoBzD,SAAS0D,oBAAoB1D;MAAA;IAAA;IAI/D,IAAI6E,QAAQ9F,WAAW,GAAG;MACxB,MAAM,IAAIjD,MAAM;IAAA,OACX;MAEL,WAAWkE,OAAO6E,SAAS;QACzB,MAAM5D,OAAOzD,OAAOyD,KAAK4D,QAAQ7E;QACjC,IAAI2D,iBAAiB7F,SAASmD,KAAK,KAAK;UACtC2D,gBAAgBM,eAAevB,kBAAkBnH,KAAK;UACtD;QAAA;MAAA;MAGJ,IAAI,CAACoI,eAAe;QAClBA,gBAAgBM,eAAerB,aAAarH,KAAK;MAAA;IAAA;IAKrD,MAAM4I,wBAAwBb,WAAWQ,OAAO/E,OAAO,CAAC4D,cAAc9F,SAASkC,MAC5E1B,IAAI0B,OAAO;MACV,MAAMmC,QAAQ,KAAK9F,OAAOkH,aAAavD;MACvCA,MAAM,KAAKzD,gBAAgByD;MAC3B,OAAO,GAAGyD,oBAAoBzD,SAASmC;IAAA;IAE3C,MAAMkD,gBAAgBD,sBAAsBrG,SAAS,IAAI,gCAAgCqG,sBAAsB5I,KAAK,UAAU;IAE9H,MAAM8I,gBAAgB,IAAIb,4BAA4BC;IAEtD,IAAItB,QAAQ,cAAcU,qCAAqCL,2BAA2BkB,wBAAwBjB,oBAAoBe,wBAAwBG;IAC9JxB,SAAS,IAAIiC,8CAA8CC;IAC3D,IAAI9D,2BAA2B;MAC7B4B,QAAQ,uBAAuBU,uBAAuBV,6BAA6BU;IAAA;IAErF,OAAOV;EAAA;EAGTmC,mBAAmBtI,WAAW;IAC5B,OAAO,kBAAkB,KAAKiC,WAAWjC;EAAA;EAG3CuI,YAAYvI,WAAWgG,OAA4B;IAAA,IAArBhH,8EAAU;IAAA,IAAIuH;IAC1C,MAAM7D,QAAQ,KAAKT,WAAWjC;IAC9B,MAAMwI,cAAc,KAAKC,mBAAmBzC,OAAO,MAAMO,OAAOvH;IAEhE,OAAOZ,MAAM8D,iBAAiB,CAC5B,UACAlD,QAAQiH,SAAS,OAAO,KAAK7G,OAAOJ,QAAQiH,WAC5C,QACAvD,OACA8F,eAAe,SAASA,eACxB,KACA,qCACA;EAAA;EAIJE,iBAAiB1I,WAAW;IAC1B,OAAO,sCAAsC,KAAKiC,WAAWjC;EAAA;EAG/D2I,qBAAqB3I,WAAW;IAC9B,OAAO,qCAAqC,KAAKZ,OAAO,KAAK6C,WAAWjC;EAAA;EAG1E4I,iBAAiB5I,WAAW6I,uBAAuB;IACjD,IAAInH,YAAYmH;IAEhB,IAAI,OAAOnH,cAAc,UAAU;MACjCA,YAAYtD,MAAM0K,WAAW,GAAG9I,aAAa6I,sBAAsBtJ,KAAK;IAAA;IAG1E,OAAO,cAAc,KAAKwJ,iBAAiBrH,iBAAiB,KAAKqH,iBAAiB/I;EAAA;EAGpFkD,eAAemE,WAAWrI,SAAS;IACjC,IAAI,CAACd,EAAE8K,cAAc3B,YAAY;MAC/BA,YAAY;QACV4B,MAAM5B;MAAA;IAAA;IAKV,IAAIA,UAAU6B,YAAY;MAExB,IAAI7B,UAAU8B,SAAS9B,UAAU8B,MAAMnJ,cAAcqH,UAAU6B,WAAW3C,OAAO;QAC/E,KAAK6C,UAAUC,IAAI;QAEnBhC,UAAUiC,WAAW;QACrBjC,UAAUkC,WAAW;MAAA;IAAA;IAIzB,IAAIC;IAEJ,IAAInC,UAAU4B,gBAAgB5K,UAAUoL,MAAM;MAC5C,IAAIpC,UAAU4B,KAAKS,UAAU,CAACrC,UAAUqC,QAAQrC,UAAUqC,SAASrC,UAAU4B,KAAKS;MAGlFF,WAAWnC,UAAU4B,KAAKU;MAC1BH,YAAY,WAAW,KAAKlK,gBAAgB+H,UAAUxF,aAAawF,UAAUqC,OAAOrI,IAAI6D,SAAS;QAC/F,OAAO,KAAK9F,OAAO8F;MAAA,GAClB3F,KAAK;MACR,OAAOiK;IAAA;IAETA,WAAWnC,UAAU4B,KAAKW;IAE1B,IAAIvC,UAAUwC,cAAc,OAAO;MACjCL,YAAY;IAAA,WACH,CAACnC,UAAUN,cAAc,CAAC3I,MAAM0L,sBAAsBzC,UAAU0C,eAAe;MACxFP,YAAY;IAAA;IAGd,IAAInC,UAAUrC,eAAe;MAC3BwE,YAAY;IAAA;IAId,IAAInC,UAAU4B,SAAS,UAAU5B,UAAU4B,KAAKe,YAAY,QACxD5L,MAAM0L,sBAAsBzC,UAAU0C,eAAe;MACvDP,YAAY,YAAY,KAAKpK,OAAOiI,UAAU0C;IAAA;IAGhD,IAAI1C,UAAUL,WAAW,MAAM;MAC7BwC,YAAY;IAAA;IAGd,IAAInC,UAAUN,YAAY;MACxByC,YAAY;IAAA;IAGd,IAAK,EAACxK,WAAW,CAACA,QAAQiL,iCAAiC5C,UAAU6B,YAAY;MAC/EM,YAAY,eAAe,KAAKvH,WAAWoF,UAAU6B,WAAW3C;MAEhE,IAAIc,UAAU6B,WAAWnG,KAAK;QAC5ByG,YAAY,KAAK,KAAKlK,gBAAgB+H,UAAU6B,WAAWnG;MAAA,OACtD;QACLyG,YAAY,KAAK,KAAKlK,gBAAgB;MAAA;MAGxC,IAAI+H,UAAUiC,UAAU;QACtBE,YAAY,cAAcnC,UAAUiC,SAASY;MAAA;MAG/C,IAAI7C,UAAUkC,UAAU;QACtBC,YAAY,cAAcnC,UAAUkC,SAASW;MAAA;IAAA;IAIjD,IAAI7C,UAAUrE,WAAW,OAAOqE,UAAUrE,YAAY,UAAU;MAC9DwG,YAAY,YAAYnC,UAAUrE;IAAA;IAGpC,OAAOwG;EAAA;EAGTW,gBAAgBlK,YAAYjB,SAAS;IACnC,MAAMoL,SAAS;MACbC,sBAAsB;IACxB,IAAItH,KACFsE;IAEF,KAAKtE,OAAO9C,YAAY;MACtBoH,YAAYpH,WAAW8C;MAEvB,IAAIsE,UAAU6B,YAAY;QACxB,IAAImB,oBAAoBxJ,SAASwG,UAAU6B,WAAW3C,MAAMqD,aAAa;UAEvEvC,UAAUiC,WAAW;UACrBjC,UAAUkC,WAAW;QAAA,OAChB;UACLc,oBAAoBlJ,KAAKkG,UAAU6B,WAAW3C,MAAMqD;UAKpDvC,UAAUkC,WAAW;QAAA;MAAA;MAKzB,IAAIxG,OAAO,CAACsE,UAAUxF,OAAOwF,UAAUxF,QAAQkB;MAC/CqH,OAAO/C,UAAUxF,SAASkB,OAAO,KAAKG,eAAemE,WAAWrI;IAAA;IAGlE,OAAOoL;EAAA;EAGTE,gBAAgB;IACd3L,qBAAqB;EAAA;EAGvB4L,cAAc;IACZ5L,qBAAqB;EAAA;EAGvB6L,gBAAgB;IACd7L,qBAAqB;EAAA;EAGvB8L,iBAAiB;IACf9L,qBAAqB;EAAA;EAGvB+L,eAAe;IACb/L,qBAAqB;EAAA;EAGvBgM,iBAAiB;IACfhM,qBAAqB;EAAA;EASvBiM,2BAA2BC,aAAa;IACtC,OAAO,GAAG,mEAGRA,cAAc,wBAAwBA,mBAAmB,kHAIrDA,cAAc,mBAAmBA,mBAAmB,gFAGpDA,cAAc,wBAAwBA,mBAAmB;EAAA;EAkBjEC,oBAAoBpI,OAAOmI,aAAa;IACtC,MAAM7K,YAAY0C,MAAM1C,aAAa0C;IACrC,IAAIN,MAAM,GAAG,KAAKwI,2BAA2BC,+BAC1BxL,gBAAgBW;IAEnC,IAAI0C,MAAMhD,QAAQ;MAChB0C,OAAO,mCAAmC/C,gBAAgBqD,MAAMhD;IAAA;IAElE,OAAO0C;EAAA;EAGT2I,mBAAmBrI,OAAOY,eAAe;IACvC,MAAMtD,YAAY0C,MAAM1C,aAAa0C;IACrC,OAAOtE,MAAM8D,iBAAiB,CAC5B,KAAK0I,8BACL,SACA,YAAYvL,gBAAgBW,cAC5B,OACA,aAAaX,gBAAgBiE,kBAC7BZ,MAAMhD,UAAU,kCAAkCL,gBAAgBqD,MAAMhD;EAAA;EAI5EsL,6BAA6BtI,OAAOY,eAAe;IACjD,MAAMtD,YAAYX,gBAAgBqD,MAAM1C,aAAa0C;IACrD,OAAOtE,MAAM8D,iBAAiB,CAC5B,qCACA,gCACA,uCACA,kDACA,iDACA,kCACA,mDACA,iDACA,6CACA,2CACA,uBAAuB7C,gBAAgBiE,kBACvC,sBAAsBtD,aACtB;EAAA;EAIJiL,oBAAoBjL,WAAWkL,YAAY;IACzC,OAAO9M,MAAM8D,iBAAiB,CAC5B,eACA,KAAKD,WAAWjC,YAChB,QACA,KAAKV,gBAAgB4L;EAAA;EAIzBC,0BAA0BnL,WAAWsD,eAAe;IAClD,MAAMa,cAAc,KAAKlC,WAAWjC;IACpC,OAAO5B,MAAM8D,iBAAiB,CAC5B,4CACA,uCAAuCiC,sBACvC,4EAA4Eb,mBAC5E,8BAA8Ba,uBAC9B;EAAA;EAIJiH,oBAAoBpL,WAAWqL,gBAAgB;IAC7C,OAAOjN,MAAM8D,iBAAiB,CAC5B,eACA,KAAKD,WAAWjC,YAChB,mBACA,KAAKV,gBAAgB+L,iBACrB;EAAA;EAIJC,yBAAyB;EAIzBC,wBAAwB;IACtB,OAAO/M,YAAY,IAAIoL,SAAS;EAAA;EAGlC4B,sBAAsBC,aAAa;IACjC,IAAIA,YAAYC,QAAQ;MACtB,OAAO,oBAAoB,KAAKpM,gBAAgBmM,YAAYrE;IAAA;IAG9D,OAAO;EAAA;EAGTuE,uBAAuBF,aAAa;IAClC,IAAIA,YAAYC,QAAQ;MACtB;IAAA;IAGF,OAAO;EAAA;EAGTE,yBAAyBH,aAAa;IACpC,IAAIA,YAAYC,QAAQ;MACtB,OAAO,wBAAwB,KAAKpM,gBAAgBmM,YAAYrE;IAAA;IAGlE,OAAO;EAAA;EAGTyE,wBAAwB7M,SAASuH,OAAOtG,YAAY6L,QAAQC,aAAa/F,OAAO;IAC9E,KAAKgG,wBAAwB/L,YAAY;MAAEgM,WAAW1F,SAASA,MAAMa;MAAM8E,IAAIH;IAAA;IAE/E,MAAMI,YAAY,KAAK/C,UAAUpK,QAAQoN;IACzC,MAAMC,kBAAkB5N,OAAOuJ,MAAMmE,cAAc1N,OAAO6N,GAAGH,WAAW;IAExE,IAAIE,mBAAmBrN,QAAQsG,QAAQ;MAWrC,MAAMA,SAAStG,QAAQsG,UAAU;MACjC,MAAMiH,aAAavN,QAAQwN,mBAAmBxN,QAAQyN,sBAAsBzN,QAAQ0N;MACpF,IAAIC,SAAS;QAAEC,gBAAgB;MAAA;MAC/B,IAAI5N,QAAQ6N,OAAO;QACjBF,SAAS,KAAKG,eAAe9N,SAASuH,OAAOgG;MAAA;MAG/C,IAAII,OAAOC,eAAe9K,WAAW,GAAG;QACtC6K,OAAOC,eAAezL,KAAK,KAAK7B,gBAAgBiH,MAAMwG;MAAA;MAGxD,MAAMC,WAAWjB,eAAe;MAEhC,IAAI/M,QAAQiO,SAAS;QACnB,MAAMC,WAAWlO,QAAQkO,aAAa,SAAYlO,QAAQiH,SAASjH,QAAQ0N,sBAAsB1N,QAAQkO;QACzG,MAAMC,YAAY;UAChB/F,MAAM2E;UACNqB,YAAY;UACZlB,IAAI;UACJ3F;QAAA;QAEF,MAAM8G,eAAe;UACnBC,OAAOH;UACPnO;UACAkO;QAAA;QAGF,IAAIK,kBAAkB;QACtB,WAAWN,WAAWjO,QAAQiO,SAAS;UACrC,IAAIA,QAAQO,UAAU;YACpB;UAAA;UAEF,MAAMC,cAAc,KAAKC,gBAAgBT,SAAS;YAAEU,YAAY5B;YAAa6B,YAAY7B;UAAA,GAAesB;UACxGE,kBAAkBA,gBAAgBM,OAAOJ,YAAYK;QAAA;QAGvD,OAAO1P,MAAM8D,iBAAiB,CAC5B,0BACAjC,WAAWV,KAAK,OAChB,UACA,CACE,UACAP,QAAQiH,SAAS,OAAOjH,QAAQiH,SAChC,YACA,CACE,8BACA,CACE,YACA0G,OAAOC,eAAerN,KAAK,QAE7B,iBAAiByN,qBACjB,CACE,mBACA,GAAGA,mBAAmBlB,aAAakB,YACnCO,iBACAvH,SAAS,SAASA,UAEpB,QAAQgH,aAEV,QAAQA,4BAA4B1H,WAEtC,QAAQ0H;MAAA;MAGZ,OAAO5O,MAAM8D,iBAAiB,CAC5B,0BACAjC,WAAWV,KAAK,OAChB,UACA,CACE,UACAP,QAAQiH,SAAS,OAAOjH,QAAQiH,SAChC,YACA,CACE,8BACA,CACE,YACA0G,OAAOC,eAAerN,KAAK,QAE7B,wBAAwBuM,aAAakB,YACrChH,SAAS,SAASA,UAEpB,QAAQgH,4BAA4B1H,WAEtC,QAAQ0H;IAAA;IAIZ,OAAO5O,MAAM8D,iBAAiB,CAC5B,UACAmK,mBAAmBrN,QAAQiH,SAAS,OAAOjH,QAAQiH,SACnDhG,WAAWV,KAAK,OAChB,QAAQuM,UACRC,eAAe,MAAMA,eACrB/M,QAAQ+O,aAAazP,WAAWU,QAAQ+O,cAAc,SAASzP,WAAWU,QAAQ+O;EAAA;EAItFC,kBAAkBhP,SAASuH,OAAO;IAEhC,IAAI9H,OAAOuJ,MAAM,KAAKoB,UAAUpK,QAAQoN,oBAAoB3N,OAAO6N,GAAG,KAAKlD,UAAUpK,QAAQoN,iBAAiB,WAAW;MACvH,OAAO;IAAA;IAGT,MAAM9G,SAAStG,QAAQsG,UAAU;IACjC,MAAMiH,aAAavN,QAAQkO,aAAa,SACpClO,QAAQwN,mBAAmBxN,QAAQyN,sBAAsBzN,QAAQ0N,sBACjE1N,QAAQkO;IAEZ,IAAIe,WAAW;IACf,IAAItB,SAAS;IAEb,IAAI3N,QAAQ6N,OAAO;MACjBF,SAAS,KAAKG,eAAe9N,SAASuH,OAAOgG;IAAA;IAG/C,IAAIvN,QAAQiH,SAASjH,QAAQsG,QAAQ;MAGnC,IAAI,CAACtG,QAAQ6N,SAAS7N,QAAQ6N,MAAM/K,WAAW,KAAK9C,QAAQiO,WAAWN,OAAOuB,cAAcpM,WAAW,GAAG;QACxG,IAAIiF,aAAaR,MAAMwG;QAEvB,MAAMoB,kBAAkB,GAAG,KAAKlM,WAAWjD,QAAQoP,WAAW7H,MAAMa,SAAS,KAAK9H,gBAAgByH;QAClG,MAAMsH,mBAAoB,SAAQpO,cAAc,IAAIqO,KAAKhO,QAAQiO,MAAMC,QAAQlO,SACxEA,KAAK,OACJA,KAAK,OAAOyG,cAAczG,KAAK,OAAOyG;QAE9C,IAAIsH,kBAAkB;UACpB,MAAMpC,YAAY,KAAK3M,gBAAgBN,QAAQoP,WAAW7H,MAAMa;UAChE,MAAMqH,QAAQ,KAAKC,kBAAkBzC,WAAWoC,iBAAiB,IAAIrP;UAErE+H,aAAa,IAAI3I,MAAMuQ,IAAIF,SAASJ,iBAAiB;QAAA;QAGvD,IAAI,CAACrP,QAAQ6N,SAAS,CAAC7N,QAAQ6N,MAAM/K,QAAQ;UAC3CmM,YAAY,aAAaE;QAAA,OACpB;UACL,MAAMS,kBAAmB,SAAQ/B,SAAS,IAAIxL,IAAIwL,SAAS;YACzD,MAAM3H,QAAQqJ,MAAMC,QAAQ3B,SAASA,MAAM,KAAKA;YAEhD,IAAI3H,iBAAiB9G,MAAMuQ,KAAK;cAC9B,OAAOzJ,MAAM2J;YAAA;YAGf,IAAI3J,iBAAiB9G,MAAM0Q,SAAS;cAClC,OAAO5J,MAAM6J;YAAA;YAGf,OAAO7J;UAAA;UAET,MAAM8J,gCAAgCJ,gBAAgBK,KACpD9H,aAAaA,eAAeJ,WAAW8H,OAAO9H;UAGhD,IAAI,CAACiI,+BAA+B;YAClCf,YAAYjP,QAAQ6N,SAAS,CAACN,aAAa,OAAO;YAClD0B,YAAYE;UAAA;QAAA;MAAA;MAKlB,IAAInP,QAAQsG,UAAUtG,QAAQiH,OAAO;QACnCgI,YAAY,WAAW,KAAK7O,OAAOkG;MAAA;MAGrC,IAAItG,QAAQiH,OAAO;QACjBgI,YAAY,eAAe,KAAK7O,OAAOJ,QAAQiH;MAAA;IAAA;IAInD,OAAOgI;EAAA;EAGTiB,aAAahK,OAAO;IAClB,OAAOA,QAAQ,IAAI;EAAA;EAWrB5F,gBAAgB6P,YAAYC,OAAO;IACjC,OAAO,IAAID,WAAWnO,QAAQ,YAAY;EAAA;AAAA;AAK9C,yBAAyBmO,YAAY;EACnC,OAAO/Q,MAAMiR,SAASjR,MAAMkR,YAAYH,YAAY,MAAM;AAAA;AAG5DI,OAAOC,UAAUC","names":["_","require","Utils","DataTypes","TableHints","AbstractQueryGenerator","randomBytes","semver","Op","throwMethodUndefined","methodName","Error","createDatabaseQuery","databaseName","options","__spreadValues","collate","collation","escape","wrapSingleQuote","quoteIdentifier","join","dropDatabaseQuery","createSchema","schema","dropSchema","quotedSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","primaryKeys","foreignKeys","attributesClauseParts","commentStr","attr","Object","prototype","hasOwnProperty","call","dataType","match","includes","commentMatch","commentText","replace","trim","commentTemplate","push","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","quotedTableName","quoteTable","joinSQLFragments","describeTableQuery","sql","renameTableQuery","before","after","showTablesQuery","tableExistsQuery","table","schemaName","dropTableQuery","quoteTbl","addColumnQuery","key","comment","isString","attributeToSQL","context","column","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","commentString","quotedAttrName","definition","renameColumnQuery","attrBefore","newName","keys","bulkInsertQuery","attrValueHashes","quotedTable","tuples","allAttributes","allQueries","needIdentityInsertWrapper","outputFragment","returning","returnValues","generateReturnValues","emptyQuery","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","value","quotedAttributes","tupleStr","commands","offset","batch","Math","floor","max","slice","min","generatedQuery","v","updateQuery","where","limit","updateArgs","query","upsertQuery","insertValues","updateValues","model","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","rawAttributes","primaryKey","unique","index","_indexes","fieldName","name","attribute","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","or","filter","clause","valid","getJoinSnippet","array","filteredUpdateClauses","updateSnippet","insertSnippet","truncateTableQuery","deleteQuery","whereClause","getWhereConditions","showIndexesQuery","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","underscore","quoteIdentifiers","isPlainObject","type","references","Model","sequelize","log","onDelete","onUpdate","template","ENUM","values","toSql","toString","allowNull","defaultValueSchemable","defaultValue","_binary","withoutForeignKeyConstraints","toUpperCase","attributesToSQL","result","existingConstraints","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","_getForeignKeysQueryPrefix","catalogName","getForeignKeysQuery","getForeignKeyQuery","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","foreignKey","getDefaultConstraintQuery","dropConstraintQuery","constraintName","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","_throwOnEmptyAttributes","modelName","as","dbVersion","databaseVersion","isSQLServer2008","lt","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","mainQueryOrder","order","getQueryOrders","primaryKeyField","tmpTable","include","subQuery","mainTable","quotedName","topLevelInfo","names","mainJoinQueries","separate","joinQueries","generateInclude","externalAs","internalAs","concat","mainQuery","tableHint","addLimitAndOffset","fragment","subQueryOrder","tablePkFragment","tableAs","aliasedAttribute","find","Array","isArray","alias","_getAliasForField","Col","orderFieldNames","col","Literal","val","primaryKeyFieldAlreadyPresent","some","booleanValue","identifier","force","addTicks","removeTicks","module","exports","MSSQLQueryGenerator"],"sources":["C:\\Users\\rizla\\projects\\react\\NSBEHack-main\\nsbeapp\\node_modules\\sequelize\\src\\dialects\\mssql\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = { collate: null, ...options };\n\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n\n    return [\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\n      `${collation};`,\n      'END;'\n    ].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\n      'END;'\n    ].join(' ');\n  }\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = {},\n      attributesClauseParts = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          // remove comment related substring from dataType\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${\n            this.quoteIdentifier(indexName)\n          } UNIQUE (${\n            columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\n          })`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`,\n      ';',\n      commentStr\n    ]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"CAST(prop.value AS NVARCHAR) AS 'Comment'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'INNER JOIN sys.columns AS sc',\n      \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\",\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      \"AND prop.name = 'MS_Description'\",\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema || 'dbo';\n\n    return `SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${this.escape(tableName)} AND TABLE_SCHEMA = ${this.escape(schemaName)}`;\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\n      'DROP TABLE',\n      quoteTbl,\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n      delete dataType['comment'];\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, { context: 'addColumn' }),\n      ';',\n      commentStr\n    ]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' +\n        `@name = N'MS_Description', @value = ${this.escape(comment)}, ` +\n        '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' +\n        `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` +\n        `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        // remove comment related substring from dataType\n        definition = commentMatch[1];\n      }\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `ALTER COLUMN ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n      commentString\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\n      'EXEC sp_rename',\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\n      `'${newName}',`,\n      \"'COLUMN'\",\n      ';'\n    ]);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',')\n        })`);\n      });\n\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (insertValues[key] && insertValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (typeof clause[key] === 'undefined' || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const filteredUpdateClauses = updateKeys.filter(key => !identityAttrs.includes(key))\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      });\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(', ')}` : '';\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n\n    return Utils.joinSQLFragments([\n      'DELETE',\n      options.limit && `TOP(${this.escape(options.limit)})`,\n      'FROM',\n      table,\n      whereClause && `WHERE ${whereClause}`,\n      ';',\n      'SELECT @@ROWCOUNT AS AFFECTEDROWS',\n      ';'\n    ]);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n      return template;\n    }\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, '}${\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` +\n        'tableName = TB.NAME, ' +\n        `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\n          catalogName ? `tableCatalog = '${catalogName}', ` : ''\n        }columnName = COL.NAME, ` +\n        `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\n          catalogName ? `referencedCatalog = '${catalogName}', ` : ''\n        }referencedTableName = RTB.NAME, ` +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM sys.foreign_key_columns FKC ' +\n        'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      this._getForeignKeysQueryPrefix(),\n      'WHERE',\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\n      'AND',\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`\n    ]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName}`,\n      ';'\n    ]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(foreignKey)\n    ]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      'SELECT name FROM sys.default_constraints',\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\n      ';'\n    ]);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      this.quoteIdentifier(constraintName),\n      ';'\n    ]);\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\n\n    if (isSQLServer2008 && options.offset) {\n      // For earlier versions of SQL server, we need to nest several queries\n      // in order to emulate the OFFSET behavior.\n      //\n      // 1. The outermost query selects all items from the inner query block.\n      //    This is due to a limitation in SQL server with the use of computed\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\n      //    the TOP N rows of the query where the row number is > OFFSET\n      // 3. The innermost query is the actual set we want information from\n\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = { mainQueryOrder: [] };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || 'OffsetTable';\n\n      if (options.include) {\n        const subQuery = options.subQuery === undefined ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n\n        let mainJoinQueries = [];\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n          const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n\n        return Utils.joinSQLFragments([\n          'SELECT TOP 100 PERCENT',\n          attributes.join(', '),\n          'FROM (',\n          [\n            'SELECT',\n            options.limit && `TOP ${options.limit}`,\n            '* FROM (',\n            [\n              'SELECT ROW_NUMBER() OVER (',\n              [\n                'ORDER BY',\n                orders.mainQueryOrder.join(', ')\n              ],\n              `) as row_num, ${tmpTable}.* FROM (`,\n              [\n                'SELECT DISTINCT',\n                `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,\n                mainJoinQueries,\n                where && `WHERE ${where}`\n              ],\n              `) AS ${tmpTable}`\n            ],\n            `) AS ${tmpTable} WHERE row_num > ${offset}`\n          ],\n          `) AS ${tmpTable}`\n        ]);\n      }\n      return Utils.joinSQLFragments([\n        'SELECT TOP 100 PERCENT',\n        attributes.join(', '),\n        'FROM (',\n        [\n          'SELECT',\n          options.limit && `TOP ${options.limit}`,\n          '* FROM (',\n          [\n            'SELECT ROW_NUMBER() OVER (',\n            [\n              'ORDER BY',\n              orders.mainQueryOrder.join(', ')\n            ],\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\n            where && `WHERE ${where}`\n          ],\n          `) AS ${tmpTable} WHERE row_num > ${offset}`\n        ],\n        `) AS ${tmpTable}`\n      ]);\n    }\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\n      attributes.join(', '),\n      `FROM ${tables}`,\n      mainTableAs && `AS ${mainTableAs}`,\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`\n    ]);\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\n      : options.subQuery;\n\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      // TODO: document why this is adding the primary key of the model in ORDER BY\n      //  if options.include is set\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\n        let primaryKey = model.primaryKeyField;\n\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(primaryKey)}`;\n        const aliasedAttribute = (options.attributes || []).find(attr => Array.isArray(attr)\n            && attr[1]\n            && (attr[0] === primaryKey || attr[1] === primaryKey));\n\n        if (aliasedAttribute) {\n          const modelName = this.quoteIdentifier(options.tableAs || model.name);\n          const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);\n\n          primaryKey = new Utils.Col(alias || aliasedAttribute[1]);\n        }\n\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = (options.order || []).map(order => {\n            const value = Array.isArray(order) ? order[0] : order;\n\n            if (value instanceof Utils.Col) {\n              return value.col;\n            }\n\n            if (value instanceof Utils.Literal) {\n              return value.val;\n            }\n\n            return value;\n          });\n          const primaryKeyFieldAlreadyPresent = orderFieldNames.some(\n            fieldName => fieldName === (primaryKey.col || primaryKey)\n          );\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return `[${identifier.replace(/[[\\]']+/g, '')}]`;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}